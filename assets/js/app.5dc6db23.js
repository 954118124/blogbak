(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,o,s=e[0],l=e[1],c=e[2],d=0,p=[];d<s.length;d++)o=s[d],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&p.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var r={},a={1:0},i=[];function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"f39d1b19",3:"9a3e9bf4",4:"bd92418e",5:"2d40d187",6:"b7f04f6b",7:"a6e5a0c4",8:"efea30be",9:"838f3b2f",10:"4b1d7be0",11:"c8a2e16e",12:"4e63b6b7",13:"937fd95b",14:"44590f36",15:"f62e9c22",16:"ff13acc8",17:"192798ed",18:"a44b7d05",19:"c60bf3bf",20:"34e3976d",21:"bc9dc5f6",22:"9775f22c",23:"e4766724",24:"58bf237c",25:"eb1f275b",26:"b591ee7b",27:"615ffd14",28:"dfb6e497",29:"b427a3ad",30:"19bca574",31:"6f18cb49",32:"fc97eefb",33:"4a6bb74c",34:"d52b5201",35:"1bbdb77b",36:"3873878f",37:"4c648d71",38:"5403efc8",39:"2b0ee46d",40:"83d2e034",41:"f55a4d82",42:"6d8298d3",43:"ea7004a3",44:"579cf258",45:"cf14f3fe",46:"ec847662",47:"62ae979c",48:"5ee1c3b4",49:"8e6a1f2a",50:"a38f5b6c",51:"816ab55a",52:"00e6184d",53:"6f98bac0",54:"a9c154c6",55:"5412f1f2",56:"277678f1",57:"3beb8ccb",58:"831a2a61",59:"48ede025",60:"2c20d5e5",61:"9de19ce8",62:"5337ff4f",63:"6b73d26f",64:"ed9b7592",65:"51839cfc",66:"61fd9383",67:"8183e45e",68:"7e6625d8",69:"a8f40145",70:"57032516",71:"b3d79287",72:"21dddce8",73:"e21e7a1f",74:"f8a0b698",75:"05e4b95e",76:"47ccc8f3",77:"e4095d17"}[n]+".js"}(n);var l=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",l.name="ChunkLoadError",l.type=r,l.request=i,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;i.push([245,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(0),a=t(38).f,i=t(26),o=t(14),s=t(120),l=t(124),c=t(112);n.exports=function(n,e){var t,u,d,p,h,f=n.target,m=n.global,g=n.stat;if(t=m?r:g?r[f]||s(f,{}):(r[f]||{}).prototype)for(u in e){if(p=e[u],d=n.noTargetGet?(h=a(t,u))&&h.value:t[u],!c(m?u:f+(g?".":"#")+u,n.forced)&&void 0!==d){if(typeof p==typeof d)continue;l(p,d)}(n.sham||d&&d.sham)&&i(p,"sham",!0),o(t,u,p,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(68),a=Function.prototype,i=a.bind,o=a.call,s=r&&i.bind(o,o);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return o.apply(n,arguments)}}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(127),a=t(14),i=t(265);r||a(Object.prototype,"toString",i,{unsafe:!0})},function(n,e,t){var r=t(0),a=t(52),i=t(9),o=t(89),s=t(53),l=t(158),c=a("wks"),u=r.Symbol,d=u&&u.for,p=l?u:u&&u.withoutSetter||o;n.exports=function(n){if(!i(c,n)||!s&&"string"!=typeof c[n]){var e="Symbol."+n;s&&i(u,n)?c[n]=u[n]:c[n]=l&&d?d(e):p(e)}return c[n]}},function(n,e,t){var r=t(68),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){var r=t(2);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(3),a=t(15),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(0),a=t(11),i=r.String,o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not an object")}},function(n,e,t){var r=t(4);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(0),a=t(85),i=r.String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(0),a=t(8),i=t(160),o=t(159),s=t(10),l=t(91),c=r.TypeError,u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;e.f=a?o?function(n,e,t){if(s(n),e=l(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=d(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(s(n),e=l(e),s(t),i)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(0),a=t(4),i=t(26),o=t(165),s=t(120);n.exports=function(n,e,t,l){var c=!!l&&!!l.unsafe,u=!!l&&!!l.enumerable,d=!!l&&!!l.noTargetGet,p=l&&void 0!==l.name?l.name:e;return a(t)&&o(t,p,l),n===r?(u?n[e]=t:s(e,t),n):(c?!d&&n[e]&&(u=!0):delete n[e],u?n[e]=t:i(n,e,t),n)}},function(n,e,t){var r=t(0),a=t(21),i=r.Object;n.exports=function(n){return i(a(n))}},function(n,e,t){var r=t(0),a=t(4),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(1),a=t(100);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,e,t){"use strict";function r(n,e,t,r,a,i,o,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},c._ssrRegister=l):a&&(l=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e){n.exports=!1},function(n,e,t){var r=t(55);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=t(14),a=t(286),i=Error.prototype;i.toString!==a&&r(i,"toString",a)},function(n,e,t){var r=t(67),a=t(21);n.exports=function(n){return r(a(n))}},function(n,e,t){var r=t(0),a=t(4),i=t(70),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a function")}},function(n,e,t){var r=t(3),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e,t){var r=t(8),a=t(13),i=t(50);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){"use strict";var r=t(178).charAt,a=t(12),i=t(35),o=t(164),s=i.set,l=i.getterFor("String Iterator");o(String,"String",(function(n){s(this,{type:"String Iterator",string:a(n),index:0})}),(function(){var n,e=l(this),t=e.string,a=e.index;return a>=t.length?{value:void 0,done:!0}:(n=r(t,a),e.index+=n.length,{value:n,done:!1})}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(16);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(195),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e,t){"use strict";var r=t(1),a=t(61).filter;r({target:"Array",proto:!0,forced:!t(79)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(179),i=t(180),o=t(148),s=t(26),l=t(6),c=l("iterator"),u=l("toStringTag"),d=o.values,p=function(n,e){if(n){if(n[c]!==d)try{s(n,c,d)}catch(e){n[c]=d}if(n[u]||s(n,u,e),a[e])for(var t in o)if(n[t]!==o[t])try{s(n,t,o[t])}catch(e){n[t]=o[t]}}};for(var h in a)p(r[h]&&r[h].prototype,h);p(i,"DOMTokenList")},function(n,e,t){var r,a=t(10),i=t(149),o=t(122),s=t(72),l=t(163),c=t(90),u=t(93),d=u("IE_PROTO"),p=function(){},h=function(n){return"<script>"+n+"<\/script>"},f=function(n){n.write(h("")),n.close();var e=n.parentWindow.Object;return n=null,e},m=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;m="undefined"!=typeof document?document.domain&&r?f(r):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(h("document.F=Object")),n.close(),n.F):f(r);for(var t=o.length;t--;)delete m.prototype[o[t]];return m()};s[d]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=a(n),t=new p,p.prototype=null,t[d]=n):t=m(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(3);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r,a,i,o=t(247),s=t(0),l=t(3),c=t(11),u=t(26),d=t(9),p=t(119),h=t(93),f=t(72),m=s.TypeError,g=s.WeakMap;if(o||p.state){var v=p.state||(p.state=new g),b=l(v.get),y=l(v.has),x=l(v.set);r=function(n,e){if(y(v,n))throw new m("Object already initialized");return e.facade=n,x(v,n,e),e},a=function(n){return b(v,n)||{}},i=function(n){return y(v,n)}}else{var _=h("state");f[_]=!0,r=function(n,e){if(d(n,_))throw new m("Object already initialized");return e.facade=n,u(n,_,e),e},a=function(n){return d(n,_)?n[_]:{}},i=function(n){return d(n,_)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=a(e)).type!==n)throw m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(1),a=t(184);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,e,t){var r=t(0),a=t(179),i=t(180),o=t(184),s=t(26),l=function(n){if(n&&n.forEach!==o)try{s(n,"forEach",o)}catch(e){n.forEach=o}};for(var c in a)a[c]&&l(r[c]&&r[c].prototype);l(i)},function(n,e,t){var r=t(8),a=t(7),i=t(123),o=t(50),s=t(23),l=t(91),c=t(9),u=t(160),d=Object.getOwnPropertyDescriptor;e.f=r?d:function(n,e){if(n=s(n),e=l(e),u)try{return d(n,e)}catch(n){}if(c(n,e))return o(!a(i.f,n,e),n[e])}},function(n,e,t){var r=t(68),a=Function.prototype,i=a.apply,o=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?o.bind(i):function(){return o.apply(i,arguments)})},function(n,e,t){var r=t(1),a=t(0),i=t(39),o=t(282),s=a.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=o(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=o("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return i(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),c("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(306),a=t(309);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(86),t(99),t(5),t(131),t(27),t(32);function r(n){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return d})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return h})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(17),t(46),t(145),t(45),t(109),t(118),t(44),t(36),t(5),t(37),t(31),t(65),t(108),t(88),t(83),t(142),t(22),t(84);var r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return o.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function d(n){if(l(n))return n;if(!n)return"404";var e=n.match(r),t=e?e[0]:"",a=s(n);return i.test(a)?n:a+".html"+t}function p(n,e){var t=n.hash,a=function(n){var e=n&&n.match(r);if(e)return e[0]}(e);return(!a||t===a)&&s(n.path)===s(e)}function h(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));for(var r=s(e),a=0;a<n.length;a++)if(s(n[a].regularPath)===r)return Object.assign({},n[a],{type:"page",path:d(n[a].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function f(n,e,t,r){var a=t.pages,i=t.themeConfig,o=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return m(n);var s=o.sidebar||i.sidebar;if(s){var l=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),c=l.base,u=l.config;return"auto"===u?m(n):u?u.map((function(n){return function n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return h(t,e,r);if(Array.isArray(e))return Object.assign(h(t,e[0],r),{title:e[1]});a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(h(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,a+1)})),collapsable:!1!==e.collapsable}}(n,a,c)})):[]}return[]}function m(n){var e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function g(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var r=t(1),a=t(61).map;r({target:"Array",proto:!0,forced:!t(79)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";t(17);var r,a,i=t(1),o=t(0),s=t(7),l=t(3),c=t(4),u=t(11),d=(r=!1,(a=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&r),p=o.Error,h=l(/./.test);i({target:"RegExp",proto:!0,forced:!d},{test:function(n){var e=this.exec;if(!c(e))return h(this,n);var t=s(e,this,n);if(null!==t&&!u(t))throw new p("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){"use strict";var r=t(39),a=t(7),i=t(3),o=t(116),s=t(2),l=t(10),c=t(4),u=t(47),d=t(55),p=t(12),h=t(21),f=t(132),m=t(49),g=t(287),v=t(117),b=t(6)("replace"),y=Math.max,x=Math.min,_=i([].concat),k=i([].push),w=i("".indexOf),E=i("".slice),A="$0"==="a".replace(/./,"$0"),T=!!/./[b]&&""===/./[b]("a","$0");o("replace",(function(n,e,t){var i=T?"$":"$0";return[function(n,t){var r=h(this),i=null==n?void 0:m(n,b);return i?a(i,n,r,t):a(e,p(r),n,t)},function(n,a){var o=l(this),s=p(n);if("string"==typeof a&&-1===w(a,i)&&-1===w(a,"$<")){var h=t(e,o,s,a);if(h.done)return h.value}var m=c(a);m||(a=p(a));var b=o.global;if(b){var A=o.unicode;o.lastIndex=0}for(var T=[];;){var S=v(o,s);if(null===S)break;if(k(T,S),!b)break;""===p(S[0])&&(o.lastIndex=f(s,d(o.lastIndex),A))}for(var C,j="",I=0,z=0;z<T.length;z++){for(var P=p((S=T[z])[0]),O=y(x(u(S.index),s.length),0),M=[],B=1;B<S.length;B++)k(M,void 0===(C=S[B])?C:String(C));var R=S.groups;if(m){var L=_([P],M,O,s);void 0!==R&&k(L,R);var q=p(r(a,void 0,L))}else q=g(P,s,O,M,R,a);O>=I&&(j+=E(s,I,O)+q,I=O+P.length)}return j+E(s,I)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!A||T)},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){"use strict";var r=t(2);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(24);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(19),a=t(119);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.22.5",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.22.5/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(54),a=t(2);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,a,i=t(0),o=t(29),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(a=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(47),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){"use strict";var r=t(91),a=t(13),i=t(50);n.exports=function(n,e,t){var o=r(e);o in n?a.f(n,o,i(0,t)):n[o]=t}},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(64),o=t(97),s=t(11),l=t(71),c=t(20),u=t(23),d=t(57),p=t(6),h=t(79),f=t(76),m=h("slice"),g=p("species"),v=a.Array,b=Math.max;r({target:"Array",proto:!0,forced:!m},{slice:function(n,e){var t,r,a,p=u(this),h=c(p),m=l(n,h),y=l(void 0===e?h:e,h);if(i(p)&&(t=p.constructor,(o(t)&&(t===v||i(t.prototype))||s(t)&&null===(t=t[g]))&&(t=void 0),t===v||void 0===t))return f(p,m,y);for(r=new(void 0===t?v:t)(b(y-m,0)),a=0;m<y;m++,a++)m in p&&d(r,a,p[m]);return r.length=a,r}})},function(n,e,t){t(382),t(383)},function(n,e,t){var r=t(3),a=t(24),i=t(68),o=r(r.bind);n.exports=function(n,e){return a(n),void 0===e?n:i?o(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(60),a=t(3),i=t(67),o=t(15),s=t(20),l=t(114),c=a([].push),u=function(n){var e=1==n,t=2==n,a=3==n,u=4==n,d=6==n,p=7==n,h=5==n||d;return function(f,m,g,v){for(var b,y,x=o(f),_=i(x),k=r(m,g),w=s(_),E=0,A=v||l,T=e?A(f,w):t||p?A(f,0):void 0;w>E;E++)if((h||E in _)&&(y=k(b=_[E],E,x),n))if(e)T[E]=y;else if(y)switch(n){case 3:return!0;case 5:return b;case 6:return E;case 2:c(T,b)}else switch(n){case 4:return!1;case 7:c(T,b)}return d?-1:a||u?u:T}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},function(n,e,t){var r=t(162),a=t(122).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(13).f,a=t(9),i=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!a(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(25);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){t(1)({target:"Array",stat:!0},{isArray:t(64)})},function(n,e,t){var r=t(80),a=t(291),i=t(292),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(0),a=t(3),i=t(2),o=t(25),s=r.Object,l=a("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?l(n,""):s(n)}:s},function(n,e,t){var r=t(2);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(0),a=t(16),i=t(4),o=t(34),s=t(158),l=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return i(e)&&o(e.prototype,l(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(47),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(8),a=t(9),i=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=a(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(3),a=t(10),i=t(248);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(3);n.exports=r([].slice)},function(n,e,t){var r=t(0),a=t(56),i=t(4),o=t(112),s=t(94),l=t(6),c=t(256),u=t(19),d=t(54),p=a&&a.prototype,h=l("species"),f=!1,m=i(r.PromiseRejectionEvent),g=o("Promise",(function(){var n=s(a),e=n!==String(a);if(!e&&66===d)return!0;if(u&&(!p.catch||!p.finally))return!0;if(d>=51&&/native code/.test(n))return!1;var t=new a((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[h]=r,!(f=t.then((function(){}))instanceof r)||!e&&c&&!m}));n.exports={CONSTRUCTOR:g,REJECTION_EVENT:m,SUBCLASSING:f}},function(n,e,t){"use strict";var r=t(24),a=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new a(n)}},function(n,e,t){var r=t(2),a=t(6),i=t(54),o=a("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){var r=t(30).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(65);var r=t(82);t(86),t(99),t(5),t(131),t(27),t(32),t(190);var a=t(106);t(40),t(22);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(2),o=t(64),s=t(11),l=t(15),c=t(20),u=t(57),d=t(114),p=t(79),h=t(6),f=t(54),m=h("isConcatSpreadable"),g=a.TypeError,v=f>=51||!i((function(){var n=[];return n[m]=!1,n.concat()[0]!==n})),b=p("concat"),y=function(n){if(!s(n))return!1;var e=n[m];return void 0!==e?!!e:o(n)};r({target:"Array",proto:!0,arity:1,forced:!v||!b},{concat:function(n){var e,t,r,a,i,o=l(this),s=d(o,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(y(i=-1===e?o:arguments[e])){if(p+(a=c(i))>9007199254740991)throw g("Maximum allowed index exceeded");for(t=0;t<a;t++,p++)t in i&&u(s,p,i[t])}else{if(p>=9007199254740991)throw g("Maximum allowed index exceeded");u(s,p++,i)}return s.length=p,s}})},function(n,e,t){"use strict";var r=t(74).PROPER,a=t(14),i=t(10),o=t(12),s=t(2),l=t(241),c=RegExp.prototype.toString,u=s((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),d=r&&"toString"!=c.name;(u||d)&&a(RegExp.prototype,"toString",(function(){var n=i(this);return"/"+o(n.source)+"/"+o(l(n))}),{unsafe:!0})},function(n,e,t){var r=t(0),a=t(127),i=t(4),o=t(25),s=t(6)("toStringTag"),l=r.Object,c="Arguments"==o(function(){return arguments}());n.exports=a?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=l(n),s))?t:c?o(e):"Object"==(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){t(274),t(277),t(278),t(130),t(279)},function(n,e,t){var r=t(8),a=t(74).EXISTS,i=t(3),o=t(13).f,s=Function.prototype,l=i(s.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(c.exec);r&&!a&&o(s,"name",{configurable:!0,get:function(){try{return u(c,l(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(3),a=t(14),i=Date.prototype,o=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&a(i,"toString",(function(){var n=s(this);return n==n?o(this):"Invalid Date"}))},function(n,e,t){var r=t(3),a=0,i=Math.random(),o=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++a+i,36)}},function(n,e,t){var r=t(0),a=t(11),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var r=t(161),a=t(69);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){var r=t(162),a=t(122);n.exports=Object.keys||function(n){return r(n,a)}},function(n,e,t){var r=t(52),a=t(89),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(3),a=t(4),i=t(119),o=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(25),a=t(0);n.exports="process"==r(a.process)},function(n,e,t){var r=t(3),a=t(2),i=t(4),o=t(85),s=t(16),l=t(94),c=function(){},u=[],d=s("Reflect","construct"),p=/^\s*(?:class|function)\b/,h=r(p.exec),f=!p.exec(c),m=function(n){if(!i(n))return!1;try{return d(c,u,n),!0}catch(n){return!1}},g=function(n){if(!i(n))return!1;switch(o(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return f||!!h(p,l(n))}catch(n){return!0}};g.sham=!0,n.exports=!d||a((function(){var n;return m(m.call)||!m(Object)||!m((function(){n=!0}))||n}))?g:m},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(5);function r(n,e,t,r,a,i,o){try{var s=n[i](o),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,a)}function a(n){return function(){var e=this,t=arguments;return new Promise((function(a,i){var o=n.apply(e,t);function s(n){r(o,a,i,s,l,"next",n)}function l(n){r(o,a,i,s,l,"throw",n)}s(void 0)}))}}},function(n,e,t){"use strict";var r=t(1),a=t(8),i=t(0),o=t(3),s=t(9),l=t(4),c=t(34),u=t(12),d=t(13).f,p=t(124),h=i.Symbol,f=h&&h.prototype;if(a&&l(h)&&(!("description"in f)||void 0!==h().description)){var m={},g=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),e=c(f,this)?new h(n):void 0===n?h():h(n);return""===n&&(m[e]=!0),e};p(g,h),g.prototype=f,f.constructor=g;var v="Symbol(test)"==String(h("test")),b=o(f.toString),y=o(f.valueOf),x=/^Symbol\((.*)\)[^)]+$/,_=o("".replace),k=o("".slice);d(f,"description",{configurable:!0,get:function(){var n=y(this),e=b(n);if(s(m,n))return"";var t=v?k(e,7,-1):_(e,x,"$1");return""===t?void 0:t}}),r({global:!0,constructor:!0,forced:!0},{Symbol:g})}},function(n,e,t){"use strict";var r,a,i=t(7),o=t(3),s=t(12),l=t(191),c=t(115),u=t(52),d=t(33),p=t(35).get,h=t(230),f=t(235),m=u("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,v=g,b=o("".charAt),y=o("".indexOf),x=o("".replace),_=o("".slice),k=(a=/b*/g,i(g,r=/a/,"a"),i(g,a,"a"),0!==r.lastIndex||0!==a.lastIndex),w=c.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(k||E||w||h||f)&&(v=function(n){var e,t,r,a,o,c,u,h=this,f=p(h),A=s(n),T=f.raw;if(T)return T.lastIndex=h.lastIndex,e=i(v,T,A),h.lastIndex=T.lastIndex,e;var S=f.groups,C=w&&h.sticky,j=i(l,h),I=h.source,z=0,P=A;if(C&&(j=x(j,"y",""),-1===y(j,"g")&&(j+="g"),P=_(A,h.lastIndex),h.lastIndex>0&&(!h.multiline||h.multiline&&"\n"!==b(A,h.lastIndex-1))&&(I="(?: "+I+")",P=" "+P,z++),t=new RegExp("^(?:"+I+")",j)),E&&(t=new RegExp("^"+I+"$(?!\\s)",j)),k&&(r=h.lastIndex),a=i(g,C?t:h,P),C?a?(a.input=_(a.input,z),a[0]=_(a[0],z),a.index=h.lastIndex,h.lastIndex+=a[0].length):h.lastIndex=0:k&&a&&(h.lastIndex=h.global?a.index+a[0].length:r),E&&a&&a.length>1&&i(m,a[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(a[o]=void 0)})),a&&S)for(a.groups=c=d(null),o=0;o<S.length;o++)c[(u=S[o])[0]]=a[u[1]];return a}),n.exports=v},function(n,e,t){var r=t(296),a=t(297),i=t(298),o=t(299),s=t(300);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(197);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(41)(Object,"create");n.exports=r},function(n,e,t){var r=t(318);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(140);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(58),t(5),t(87),t(190),t(27),t(17),t(45);var r=t(82);function a(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),u=r.speed,d=r.easing;return l.offsetWidth,o((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,u,d)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,o=e.querySelector(r.barSelector),l=n?"-100":i(t.status||0),u=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&p(a),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=d(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=d(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){"use strict";var r=t(1),a=t(3),i=t(121).indexOf,o=t(48),s=a([].indexOf),l=!!s&&1/s([1],1,-0)<0,c=o("indexOf");r({target:"Array",proto:!0,forced:l||!c},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return l?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){"use strict";var r=t(39),a=t(7),i=t(3),o=t(116),s=t(152),l=t(10),c=t(21),u=t(126),d=t(132),p=t(55),h=t(12),f=t(49),m=t(129),g=t(117),v=t(100),b=t(115),y=t(2),x=b.UNSUPPORTED_Y,_=Math.min,k=[].push,w=i(/./.exec),E=i(k),A=i("".slice);o("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=h(c(this)),o=void 0===t?4294967295:t>>>0;if(0===o)return[];if(void 0===n)return[i];if(!s(n))return a(e,i,n,o);for(var l,u,d,p=[],f=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),g=0,b=new RegExp(n.source,f+"g");(l=a(v,b,i))&&!((u=b.lastIndex)>g&&(E(p,A(i,g,l.index)),l.length>1&&l.index<i.length&&r(k,p,m(l,1)),d=l[0].length,g=u,p.length>=o));)b.lastIndex===l.index&&b.lastIndex++;return g===i.length?!d&&w(b,"")||E(p,""):E(p,A(i,g)),p.length>o?m(p,0,o):p}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:a(e,this,n,t)}:e,[function(e,t){var r=c(this),o=null==e?void 0:f(e,n);return o?a(o,e,r,t):a(i,h(r),e,t)},function(n,r){var a=l(this),o=h(n),s=t(i,a,o,r,i!==e);if(s.done)return s.value;var c=u(a,RegExp),f=a.unicode,m=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(x?"g":"y"),v=new c(x?"^(?:"+a.source+")":a,m),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===o.length)return null===g(v,o)?[o]:[];for(var y=0,k=0,w=[];k<o.length;){v.lastIndex=x?0:k;var T,S=g(v,x?A(o,k):o);if(null===S||(T=_(p(v.lastIndex+(x?k:0)),o.length))===y)k=d(o,k,f);else{if(E(w,A(o,y,k)),w.length===b)return w;for(var C=1;C<=S.length-1;C++)if(E(w,S[C]),w.length===b)return w;k=y=T}}return E(w,A(o,y)),w}]}),!!y((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),x)},function(n,e,t){var r=t(1),a=t(15),i=t(92);r({target:"Object",stat:!0,forced:t(2)((function(){i(1)}))},{keys:function(n){return i(a(n))}})},function(n,e,t){var r=t(6),a=t(33),i=t(13),o=r("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),n.exports=function(n){s[o][n]=!0}},function(n,e,t){var r=t(2),a=t(4),i=/#|\.prototype\./,o=function(n,e){var t=l[s(n)];return t==u||t!=c&&(a(e)?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(85),a=t(49),i=t(73),o=t(6)("iterator");n.exports=function(n){if(null!=n)return a(n,o)||a(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r=t(266);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(2),a=t(0).RegExp,i=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),o=i||r((function(){return!a("a","y").sticky})),s=i||r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:o,UNSUPPORTED_Y:i}},function(n,e,t){"use strict";t(17);var r=t(3),a=t(14),i=t(100),o=t(2),s=t(6),l=t(26),c=s("species"),u=RegExp.prototype;n.exports=function(n,e,t,d){var p=s(n),h=!o((function(){var e={};return e[p]=function(){return 7},7!=""[n](e)})),f=h&&!o((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[p]=/./[p]),t.exec=function(){return e=!0,null},t[p](""),!e}));if(!h||!f||t){var m=r(/./[p]),g=e(p,""[n],(function(n,e,t,a,o){var s=r(n),l=e.exec;return l===i||l===u.exec?h&&!o?{done:!0,value:m(e,t,a)}:{done:!0,value:s(t,e,a)}:{done:!1}}));a(String.prototype,n,g[0]),a(u,p,g[1])}d&&l(u[p],"sham",!0)}},function(n,e,t){var r=t(0),a=t(7),i=t(10),o=t(4),s=t(25),l=t(100),c=r.TypeError;n.exports=function(n,e){var t=n.exec;if(o(t)){var r=a(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return a(l,n,e);throw c("RegExp#exec called on incompatible receiver")}},function(n,e,t){"use strict";var r=t(1),a=t(3),i=t(67),o=t(23),s=t(48),l=a([].join),c=i!=Object,u=s("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(n){return l(o(this),void 0===n?",":n)}})},function(n,e,t){var r=t(0),a=t(120),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(23),a=t(71),i=t(20),o=function(n){return function(e,t,o){var s,l=r(e),c=i(l),u=a(o,c);if(n&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(9),a=t(166),i=t(38),o=t(13);n.exports=function(n,e,t){for(var s=a(e),l=o.f,c=i.f,u=0;u<s.length;u++){var d=s[u];r(n,d)||t&&r(t,d)||l(n,d,c(e,d))}}},function(n,e,t){var r=t(0),a=t(9),i=t(4),o=t(15),s=t(93),l=t(168),c=s("IE_PROTO"),u=r.Object,d=u.prototype;n.exports=l?u.getPrototypeOf:function(n){var e=o(n);if(a(e,c))return e[c];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof u?d:null}},function(n,e,t){var r=t(10),a=t(169),i=t(6)("species");n.exports=function(n,e){var t,o=r(n).constructor;return void 0===o||null==(t=r(o)[i])?e:a(t)}},function(n,e,t){var r={};r[t(6)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e,t){var r=t(0),a=t(71),i=t(20),o=t(57),s=r.Array,l=Math.max;n.exports=function(n,e,t){for(var r=i(n),c=a(e,r),u=a(void 0===t?r:t,r),d=s(l(u-c,0)),p=0;c<u;c++,p++)o(d,p,n[c]);return d.length=p,d}},function(n,e,t){var r=t(1),a=t(16),i=t(39),o=t(7),s=t(3),l=t(2),c=t(64),u=t(4),d=t(11),p=t(69),h=t(76),f=t(53),m=a("JSON","stringify"),g=s(/./.exec),v=s("".charAt),b=s("".charCodeAt),y=s("".replace),x=s(1..toString),_=/[\uD800-\uDFFF]/g,k=/^[\uD800-\uDBFF]$/,w=/^[\uDC00-\uDFFF]$/,E=!f||l((function(){var n=a("Symbol")();return"[null]"!=m([n])||"{}"!=m({a:n})||"{}"!=m(Object(n))})),A=l((function(){return'"\\udf06\\ud834"'!==m("\udf06\ud834")||'"\\udead"'!==m("\udead")})),T=function(n,e){var t=h(arguments),r=e;if((d(e)||void 0!==n)&&!p(n))return c(e)||(e=function(n,e){if(u(r)&&(e=o(r,this,n,e)),!p(e))return e}),t[1]=e,i(m,null,t)},S=function(n,e,t){var r=v(t,e-1),a=v(t,e+1);return g(k,n)&&!g(w,a)||g(w,n)&&!g(k,r)?"\\u"+x(b(n,0),16):n};m&&r({target:"JSON",stat:!0,arity:3,forced:E||A},{stringify:function(n,e,t){var r=h(arguments),a=i(E?T:m,null,r);return A&&"string"==typeof a?y(a,_,S):a}})},function(n,e,t){t(188)("iterator")},function(n,e,t){"use strict";var r=t(178).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(290),a=t(51),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(41)(t(30),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(310),a=t(317),i=t(319),o=t(320),s=t(321);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(28),a=t(140),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(66),a=t(51);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(1),a=t(388).start;r({target:"String",proto:!0,forced:t(390)},{padStart:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(65);t(86),t(99),t(5),t(131),t(27),t(32);var r=t(106);t(40),t(22);function a(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(1),a=t(61).some;r({target:"Array",proto:!0,forced:!t(48)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(7),a=t(116),i=t(10),o=t(55),s=t(12),l=t(21),c=t(49),u=t(132),d=t(117);a("match",(function(n,e,t){return[function(e){var t=l(this),a=null==e?void 0:c(e,n);return a?r(a,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),a=s(n),l=t(e,r,a);if(l.done)return l.value;if(!r.global)return d(r,a);var c=r.unicode;r.lastIndex=0;for(var p,h=[],f=0;null!==(p=d(r,a));){var m=s(p[0]);h[f]=m,""===m&&(r.lastIndex=u(a,o(r.lastIndex),c)),f++}return 0===f?null:h}]}))},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function l(n,e,t,r){var a=e&&e.prototype instanceof d?e:d,i=Object.create(a.prototype),o=new w(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return A()}for(t.method=a,t.arg=i;;){var o=t.delegate;if(o){var s=x(o,t);if(s){if(s===u)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=c(n,e,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}(n,t,o),i}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var u={};function d(){}function p(){}function h(){}var f={};s(f,a,(function(){return this}));var m=Object.getPrototypeOf,g=m&&m(m(E([])));g&&g!==e&&t.call(g,a)&&(f=g);var v=h.prototype=d.prototype=Object.create(f);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){var r;this._invoke=function(a,i){function o(){return new e((function(r,o){!function r(a,i,o,s){var l=c(n[a],n,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&t.call(d,"__await")?e.resolve(d.__await).then((function(n){r("next",n,o,s)}),(function(n){r("throw",n,o,s)})):e.resolve(d).then((function(n){u.value=n,o(u)}),(function(n){return r("throw",n,o,s)}))}s(l.arg)}(a,i,r,o)}))}return r=r?r.then(o,o):o()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=c(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var a=r.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function _(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function w(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(_,this),this.reset(!0)}function E(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:A}}function A(){return{value:void 0,done:!0}}return p.prototype=h,s(v,"constructor",h),s(h,"constructor",p),p.displayName=s(h,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,h):(n.__proto__=h,s(n,o,"GeneratorFunction")),n.prototype=Object.create(v),n},n.awrap=function(n){return{__await:n}},b(y.prototype),s(y.prototype,i,(function(){return this})),n.AsyncIterator=y,n.async=function(e,t,r,a,i){void 0===i&&(i=Promise);var o=new y(l(e,t,r,a),i);return n.isGeneratorFunction(t)?o:o.next().then((function(n){return n.done?n.value:o.next()}))},b(v),s(v,o,"Generator"),s(v,a,(function(){return this})),s(v,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=E,w.prototype={constructor:w,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return o.type="throw",o.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=n,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(o)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var a=r.arg;k(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:E(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){var r=t(1),a=t(8),i=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!a},{defineProperty:i})},function(n,e,t){"use strict";var r=t(23),a=t(111),i=t(73),o=t(35),s=t(13).f,l=t(164),c=t(19),u=t(8),d=o.set,p=o.getterFor("Array Iterator");n.exports=l(Array,"Array",(function(n,e){d(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=p(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var h=i.Arguments=i.Array;if(a("keys"),a("values"),a("entries"),!c&&u&&"values"!==h.name)try{s(h,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(8),a=t(159),i=t(13),o=t(10),s=t(23),l=t(92);e.f=r&&!a?Object.defineProperties:function(n,e){o(n);for(var t,r=s(e),a=l(e),c=a.length,u=0;c>u;)i.f(n,t=a[u++],r[t]);return n}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){var r=t(0),a=t(7),i=t(24),o=t(10),s=t(70),l=t(113),c=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?l(n):e;if(i(t))return o(a(t,n));throw c(s(n)+" is not iterable")}},function(n,e,t){var r=t(11),a=t(25),i=t(6)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==a(n))}},function(n,e,t){var r=t(4),a=t(11),i=t(75);n.exports=function(n,e,t){var o,s;return i&&r(o=e.constructor)&&o!==t&&a(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,o,s,l,c=0,u=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=a;return r=a=void 0,c=e,o=n.apply(i,t)}function y(n){return c=n,s=setTimeout(_,e),u?b(n):o}function x(n){var t=n-l;return void 0===l||t>=e||t<0||g&&n-c>=i}function _(){var n=h();if(x(n))return k(n);s=setTimeout(_,function(n){var t=e-(n-l);return g?p(t,i-(n-c)):t}(n))}function k(n){return s=void 0,v&&r?b(n):(r=a=void 0,o)}function w(){var n=h(),t=x(n);if(r=arguments,a=this,l=n,t){if(void 0===s)return y(l);if(g)return s=setTimeout(_,e),b(l)}return void 0===s&&(s=setTimeout(_,e)),o}return e=m(e)||0,f(t)&&(u=!!t.leading,i=(g="maxWait"in t)?d(m(t.maxWait)||0,e):i,v="trailing"in t?!!t.trailing:v),w.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=a=s=void 0},w.flush=function(){return void 0===s?o:k(h())},w}},function(n,e,t){var r=t(3),a=t(21),i=t(12),o=t(157),s=r("".replace),l="["+o+"]",c=RegExp("^"+l+l+"*"),u=RegExp(l+l+"*$"),d=function(n){return function(e){var t=i(a(e));return 1&n&&(t=s(t,c,"")),2&n&&(t=s(t,u,"")),t}};n.exports={start:d(1),end:d(2),trim:d(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){var r=t(53);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(8),a=t(2);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(8),a=t(2),i=t(90);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),a=t(7),i=t(11),o=t(69),s=t(49),l=t(246),c=t(6),u=r.TypeError,d=c("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,r=s(n,d);if(r){if(void 0===e&&(e="default"),t=a(r,n,e),!i(t)||o(t))return t;throw u("Can't convert object to primitive value")}return void 0===e&&(e="number"),l(n,e)}},function(n,e,t){var r=t(3),a=t(9),i=t(23),o=t(121).indexOf,s=t(72),l=r([].push);n.exports=function(n,e){var t,r=i(n),c=0,u=[];for(t in r)!a(s,t)&&a(r,t)&&l(u,t);for(;e.length>c;)a(r,t=e[c++])&&(~o(u,t)||l(u,t));return u}},function(n,e,t){var r=t(16);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(1),a=t(7),i=t(19),o=t(74),s=t(4),l=t(231),c=t(125),u=t(75),d=t(63),p=t(26),h=t(14),f=t(6),m=t(73),g=t(167),v=o.PROPER,b=o.CONFIGURABLE,y=g.IteratorPrototype,x=g.BUGGY_SAFARI_ITERATORS,_=f("iterator"),k=function(){return this};n.exports=function(n,e,t,o,f,g,w){l(t,e,o);var E,A,T,S=function(n){if(n===f&&P)return P;if(!x&&n in I)return I[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},C=e+" Iterator",j=!1,I=n.prototype,z=I[_]||I["@@iterator"]||f&&I[f],P=!x&&z||S(f),O="Array"==e&&I.entries||z;if(O&&(E=c(O.call(new n)))!==Object.prototype&&E.next&&(i||c(E)===y||(u?u(E,y):s(E[_])||h(E,_,k)),d(E,C,!0,!0),i&&(m[C]=k)),v&&"values"==f&&z&&"values"!==z.name&&(!i&&b?p(I,"name","values"):(j=!0,P=function(){return a(z,this)})),f)if(A={values:S("values"),keys:g?P:S("keys"),entries:S("entries")},w)for(T in A)(x||j||!(T in I))&&h(I,T,A[T]);else r({target:e,proto:!0,forced:x||j},A);return i&&!w||I[_]===P||h(I,_,P,{name:f}),m[e]=P,A}},function(n,e,t){var r=t(2),a=t(4),i=t(9),o=t(8),s=t(74).CONFIGURABLE,l=t(94),c=t(35),u=c.enforce,d=c.get,p=Object.defineProperty,h=o&&!r((function(){return 8!==p((function(){}),"length",{value:8}).length})),f=String(String).split("String"),m=n.exports=function(n,e,t){if("Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||s&&n.name!==e)&&p(n,"name",{value:e,configurable:!0}),h&&t&&i(t,"arity")&&n.length!==t.arity&&p(n,"length",{value:t.arity}),t&&i(t,"constructor")&&t.constructor){if(o)try{p(n,"prototype",{writable:!1})}catch(n){}}else n.prototype=void 0;var r=u(n);return i(r,"source")||(r.source=f.join("string"==typeof e?e:"")),n};Function.prototype.toString=m((function(){return a(this)&&d(this).source||l(this)}),"toString")},function(n,e,t){var r=t(16),a=t(3),i=t(62),o=t(95),s=t(10),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r,a,i,o=t(2),s=t(4),l=t(33),c=t(125),u=t(14),d=t(6),p=t(19),h=d("iterator"),f=!1;[].keys&&("next"in(i=[].keys())?(a=c(c(i)))!==Object.prototype&&(r=a):f=!0),null==r||o((function(){var n={};return r[h].call(n)!==n}))?r={}:p&&(r=l(r)),s(r[h])||u(r,h,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:f}},function(n,e,t){var r=t(2);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0),a=t(97),i=t(70),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a constructor")}},function(n,e,t){var r,a,i,o,s=t(0),l=t(39),c=t(60),u=t(4),d=t(9),p=t(2),h=t(163),f=t(76),m=t(90),g=t(150),v=t(171),b=t(96),y=s.setImmediate,x=s.clearImmediate,_=s.process,k=s.Dispatch,w=s.Function,E=s.MessageChannel,A=s.String,T=0,S={};try{r=s.location}catch(n){}var C=function(n){if(d(S,n)){var e=S[n];delete S[n],e()}},j=function(n){return function(){C(n)}},I=function(n){C(n.data)},z=function(n){s.postMessage(A(n),r.protocol+"//"+r.host)};y&&x||(y=function(n){g(arguments.length,1);var e=u(n)?n:w(n),t=f(arguments,1);return S[++T]=function(){l(e,void 0,t)},a(T),T},x=function(n){delete S[n]},b?a=function(n){_.nextTick(j(n))}:k&&k.now?a=function(n){k.now(j(n))}:E&&!v?(o=(i=new E).port2,i.port1.onmessage=I,a=c(o.postMessage,o)):s.addEventListener&&u(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!p(z)?(a=z,s.addEventListener("message",I,!1)):a="onreadystatechange"in m("script")?function(n){h.appendChild(m("script")).onreadystatechange=function(){h.removeChild(this),C(n)}}:function(n){setTimeout(j(n),0)}),n.exports={set:y,clear:x}},function(n,e,t){var r=t(29);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(0),a=t(60),i=t(7),o=t(10),s=t(70),l=t(173),c=t(20),u=t(34),d=t(151),p=t(113),h=t(174),f=r.TypeError,m=function(n,e){this.stopped=n,this.result=e},g=m.prototype;n.exports=function(n,e,t){var r,v,b,y,x,_,k,w=t&&t.that,E=!(!t||!t.AS_ENTRIES),A=!(!t||!t.IS_ITERATOR),T=!(!t||!t.INTERRUPTED),S=a(e,w),C=function(n){return r&&h(r,"normal",n),new m(!0,n)},j=function(n){return E?(o(n),T?S(n[0],n[1],C):S(n[0],n[1])):T?S(n,C):S(n)};if(A)r=n;else{if(!(v=p(n)))throw f(s(n)+" is not iterable");if(l(v)){for(b=0,y=c(n);y>b;b++)if((x=j(n[b]))&&u(g,x))return x;return new m(!1)}r=d(n,v)}for(_=r.next;!(k=i(_,r)).done;){try{x=j(k.value)}catch(n){h(r,"throw",n)}if("object"==typeof x&&x&&u(g,x))return x}return new m(!1)}},function(n,e,t){var r=t(6),a=t(73),i=r("iterator"),o=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||o[i]===n)}},function(n,e,t){var r=t(7),a=t(10),i=t(49);n.exports=function(n,e,t){var o,s;a(n);try{if(!(o=i(n,"return"))){if("throw"===e)throw t;return t}o=r(o,n)}catch(n){s=!0,o=n}if("throw"===e)throw t;if(s)throw o;return a(o),t}},function(n,e,t){var r=t(56),a=t(176),i=t(77).CONSTRUCTOR;n.exports=i||!a((function(n){r.all(n).then(void 0,(function(){}))}))},function(n,e,t){var r=t(6)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!a)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(10),a=t(11),i=t(78);n.exports=function(n,e){if(r(n),a(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){var r=t(3),a=t(47),i=t(12),o=t(21),s=r("".charAt),l=r("".charCodeAt),c=r("".slice),u=function(n){return function(e,t){var r,u,d=i(o(e)),p=a(t),h=d.length;return p<0||p>=h?n?"":void 0:(r=l(d,p))<55296||r>56319||p+1===h||(u=l(d,p+1))<56320||u>57343?n?s(d,p):r:n?c(d,p,p+2):u-56320+(r-55296<<10)+65536}};n.exports={codeAt:u(!1),charAt:u(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(90)("span").classList,a=r&&r.constructor&&r.constructor.prototype;n.exports=a===Object.prototype?void 0:a},function(n,e,t){var r=t(1),a=t(2),i=t(15),o=t(125),s=t(168);r({target:"Object",stat:!0,forced:a((function(){o(1)})),sham:!s},{getPrototypeOf:function(n){return o(i(n))}})},function(n,e,t){var r=t(0),a=t(152),i=r.TypeError;n.exports=function(n){if(a(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(61).forEach,a=t(48)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(2);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(25),a=t(23),i=t(62).f,o=t(129),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return o(s)}}(n):i(a(n))}},function(n,e,t){var r=t(6);e.f=r},function(n,e,t){var r=t(275),a=t(9),i=t(187),o=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});a(e,n)||o(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(53);n.exports=r&&!!Symbol.for&&!!Symbol.keyFor},function(n,e,t){var r=t(1),a=t(280);r({target:"Array",stat:!0,forced:!t(176)((function(n){Array.from(n)}))},{from:a})},function(n,e,t){"use strict";var r=t(10);n.exports=function(){var n=r(this),e="";return n.hasIndices&&(e+="d"),n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(12);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(1)({target:"Object",stat:!0,sham:!t(8)},{create:t(33)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(101),a=t(301),i=t(302),o=t(303),s=t(304),l=t(305);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(66),a=t(135);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(322),a=t(51);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,o,n,s))}},function(n,e,t){var r=t(202),a=t(325),i=t(203);n.exports=function(n,e,t,o,s,l){var c=1&t,u=n.length,d=e.length;if(u!=d&&!(c&&d>u))return!1;var p=l.get(n),h=l.get(e);if(p&&h)return p==e&&h==n;var f=-1,m=!0,g=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++f<u;){var v=n[f],b=e[f];if(o)var y=c?o(b,v,f,e,n,l):o(v,b,f,n,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!a(e,(function(n,e){if(!i(g,e)&&(v===n||s(v,n,t,o,l)))return g.push(e)}))){m=!1;break}}else if(v!==b&&!s(v,b,t,o,l)){m=!1;break}}return l.delete(n),l.delete(e),m}},function(n,e,t){var r=t(136),a=t(323),i=t(324);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(335),a=t(341),i=t(208);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(30),a=t(337),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||a;n.exports=l}).call(this,t(154)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(338),a=t(339),i=t(340),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,e,t){var r=t(198),a=t(138);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(41)(t(30),"Set");n.exports=r},function(n,e,t){var r=t(135);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(213),a=t(105);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(28),a=t(139),i=t(352),o=t(355);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(o(n))}},function(n,e,t){var r=t(0),a=t(39),i=t(4),o=t(29),s=t(76),l=t(150),c=/MSIE .\./.test(o),u=r.Function,d=function(n){return c?function(e,t){var r=l(arguments.length,1)>2,o=i(e)?e:u(e),c=r?s(arguments,2):void 0;return n(r?function(){a(o,this,c)}:o,t)}:n};n.exports={setTimeout:d(r.setTimeout),setInterval:d(r.setInterval)}},function(n,e,t){var r=t(1),a=t(216);r({target:"Function",proto:!0,forced:Function.bind!==a},{bind:a})},function(n,e,t){"use strict";var r=t(0),a=t(3),i=t(24),o=t(11),s=t(9),l=t(76),c=t(68),u=r.Function,d=a([].concat),p=a([].join),h={},f=function(n,e,t){if(!s(h,e)){for(var r=[],a=0;a<e;a++)r[a]="a["+a+"]";h[e]=u("C,a","return new C("+p(r,",")+")")}return h[e](n,t)};n.exports=c?u.bind:function(n){var e=i(this),t=e.prototype,r=l(arguments,1),a=function(){var t=d(r,l(arguments));return this instanceof a?f(e,t.length,t):e.apply(n,t)};return o(t)&&(a.prototype=t),a}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(1),a=t(399),i=t(111);r({target:"Array",proto:!0},{fill:a}),i("fill")},function(n,e,t){t(1)({target:"Object",stat:!0},{setPrototypeOf:t(75)})},function(n,e,t){var r=t(1),a=t(16),i=t(39),o=t(216),s=t(169),l=t(10),c=t(11),u=t(33),d=t(2),p=a("Reflect","construct"),h=Object.prototype,f=[].push,m=d((function(){function n(){}return!(p((function(){}),[],n)instanceof n)})),g=!d((function(){p((function(){}))})),v=m||g;r({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(n,e){s(n),l(e);var t=arguments.length<3?n:s(arguments[2]);if(g&&!m)return p(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(f,r,e),new(i(o,n,r))}var a=t.prototype,d=u(c(a)?a:h),v=i(n,d,e);return c(v)?v:d}})},function(n,e,t){var r=t(1),a=t(0),i=t(63);r({global:!0},{Reflect:{}}),i(a.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(288),a=t(293),i=t(364),o=t(372),s=t(381),l=t(239),c=i((function(n){var e=l(n);return s(e)&&(e=void 0),o(r(n,1,s,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(391),t(18)),i=Object(a.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(36),t(5),t(37),t(44),t(31);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},a=(t(392),t(18)),i=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(8),a=t(0),i=t(3),o=t(112),s=t(14),l=t(9),c=t(153),u=t(34),d=t(69),p=t(161),h=t(2),f=t(62).f,m=t(38).f,g=t(13).f,v=t(387),b=t(156).trim,y=a.Number,x=y.prototype,_=a.TypeError,k=i("".slice),w=i("".charCodeAt),E=function(n){var e=p(n,"number");return"bigint"==typeof e?e:A(e)},A=function(n){var e,t,r,a,i,o,s,l,c=p(n,"number");if(d(c))throw _("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=b(c),43===(e=w(c,0))||45===e){if(88===(t=w(c,2))||120===t)return NaN}else if(48===e){switch(w(c,1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+c}for(o=(i=k(c,2)).length,s=0;s<o;s++)if((l=w(i,s))<48||l>a)return NaN;return parseInt(i,r)}return+c};if(o("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var T,S=function(n){var e=arguments.length<1?0:y(E(n)),t=this;return u(x,t)&&h((function(){v(t)}))?c(Object(e),t,S):e},C=r?f(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),j=0;C.length>j;j++)l(y,T=C[j])&&!l(S,T)&&g(S,T,m(y,T));S.prototype=x,x.constructor=S,s(a,"Number",S,{constructor:!0})}},function(n,e,t){var r=t(2),a=t(0).RegExp;n.exports=r((function(){var n=a(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){"use strict";var r=t(167).IteratorPrototype,a=t(33),i=t(50),o=t(63),s=t(73),l=function(){return this};n.exports=function(n,e,t,c){var u=e+" Iterator";return n.prototype=a(r,{next:i(+!c,t)}),o(n,u,!1,!0),s[u]=l,n}},function(n,e,t){"use strict";var r=t(16),a=t(13),i=t(6),o=t(8),s=i("species");n.exports=function(n){var e=r(n),t=a.f;o&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(0),a=t(34),i=r.TypeError;n.exports=function(n,e){if(a(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){var r=t(1),a=t(8),i=t(166),o=t(23),s=t(38),l=t(57);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var e,t,r=o(n),a=s.f,c=i(r),u={},d=0;c.length>d;)void 0!==(t=a(r,e=c[d++]))&&l(u,e,t);return u}})},function(n,e,t){var r=t(2),a=t(0).RegExp;n.exports=r((function(){var n=a("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){var r=t(13).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(1),a=t(121).includes,i=t(2),o=t(111);r({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(n,e,t){"use strict";var r=t(1),a=t(3),i=t(182),o=t(21),s=t(12),l=t(183),c=a("".indexOf);r({target:"String",proto:!0,forced:!l("includes")},{includes:function(n){return!!~c(s(o(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(1),a=t(156).trim;r({target:"String",proto:!0,forced:t(386)("trim")},{trim:function(){return a(this)}})},function(n,e,t){var r=t(7),a=t(9),i=t(34),o=t(191),s=RegExp.prototype;n.exports=function(n){var e=n.flags;return void 0!==e||"flags"in s||a(n,"flags")||!i(s,n)?e:r(o,n)}},function(n,e,t){var r=t(129),a=Math.floor,i=function(n,e){var t=n.length,l=a(t/2);return t<8?o(n,e):s(n,i(r(n,0,l),e),i(r(n,l),e),e)},o=function(n,e){for(var t,r,a=n.length,i=1;i<a;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var a=e.length,i=t.length,o=0,s=0;o<a||s<i;)n[o+s]=o<a&&s<i?r(e[o],t[s])<=0?e[o++]:t[s++]:o<a?e[o++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(0),a=t(8),i=t(115).MISSED_STICKY,o=t(25),s=t(244),l=t(35).get,c=RegExp.prototype,u=r.TypeError;a&&i&&s(c,"sticky",{configurable:!0,get:function(){if(this!==c){if("RegExp"===o(this))return!!l(this).sticky;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){var r=t(165),a=t(13);n.exports=function(n,e,t){return t.get&&r(t.get,e,{getter:!0}),t.set&&r(t.set,e,{setter:!0}),a.f(n,e,t)}},function(n,e,t){n.exports=t(404)},function(n,e,t){var r=t(0),a=t(7),i=t(4),o=t(11),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!o(r=a(t,n)))return r;if(i(t=n.valueOf)&&!o(r=a(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!o(r=a(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(4),i=t(94),o=r.WeakMap;n.exports=a(o)&&/native code/.test(i(o))},function(n,e,t){var r=t(0),a=t(4),i=r.String,o=r.TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){t(250),t(257),t(258),t(259),t(260),t(261)},function(n,e,t){"use strict";var r,a,i,o=t(1),s=t(19),l=t(96),c=t(0),u=t(7),d=t(14),p=t(75),h=t(63),f=t(232),m=t(24),g=t(4),v=t(11),b=t(233),y=t(126),x=t(170).set,_=t(251),k=t(254),w=t(128),E=t(255),A=t(35),T=t(56),S=t(77),C=t(78),j=S.CONSTRUCTOR,I=S.REJECTION_EVENT,z=S.SUBCLASSING,P=A.getterFor("Promise"),O=A.set,M=T&&T.prototype,B=T,R=M,L=c.TypeError,q=c.document,D=c.process,$=C.f,N=$,U=!!(q&&q.createEvent&&c.dispatchEvent),F=function(n){var e;return!(!v(n)||!g(e=n.then))&&e},G=function(n,e){var t,r,a,i=e.value,o=1==e.state,s=o?n.ok:n.fail,l=n.resolve,c=n.reject,d=n.domain;try{s?(o||(2===e.rejection&&K(e),e.rejection=1),!0===s?t=i:(d&&d.enter(),t=s(i),d&&(d.exit(),a=!0)),t===n.promise?c(L("Promise-chain cycle")):(r=F(t))?u(r,t,l,c):l(t)):c(i)}catch(n){d&&!a&&d.exit(),c(n)}},V=function(n,e){n.notified||(n.notified=!0,_((function(){for(var t,r=n.reactions;t=r.get();)G(t,n);n.notified=!1,e&&!n.rejection&&J(n)})))},H=function(n,e,t){var r,a;U?((r=q.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:t},!I&&(a=c["on"+n])?a(r):"unhandledrejection"===n&&k("Unhandled promise rejection",t)},J=function(n){u(x,c,(function(){var e,t=n.facade,r=n.value;if(Q(n)&&(e=w((function(){l?D.emit("unhandledRejection",r,t):H("unhandledrejection",t,r)})),n.rejection=l||Q(n)?2:1,e.error))throw e.value}))},Q=function(n){return 1!==n.rejection&&!n.parent},K=function(n){u(x,c,(function(){var e=n.facade;l?D.emit("rejectionHandled",e):H("rejectionhandled",e,n.value)}))},W=function(n,e,t){return function(r){n(e,r,t)}},Z=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,V(n,!0))},X=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw L("Promise can't be resolved itself");var r=F(e);r?_((function(){var t={done:!1};try{u(r,e,W(X,t,n),W(Z,t,n))}catch(e){Z(t,e,n)}})):(n.value=e,n.state=1,V(n,!1))}catch(e){Z({done:!1},e,n)}}};if(j&&(R=(B=function(n){b(this,R),m(n),u(r,this);var e=P(this);try{n(W(X,e),W(Z,e))}catch(n){Z(e,n)}}).prototype,(r=function(n){O(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:new E,rejection:!1,state:0,value:void 0})}).prototype=d(R,"then",(function(n,e){var t=P(this),r=$(y(this,B));return t.parent=!0,r.ok=!g(n)||n,r.fail=g(e)&&e,r.domain=l?D.domain:void 0,0==t.state?t.reactions.add(r):_((function(){G(r,t)})),r.promise})),a=function(){var n=new r,e=P(n);this.promise=n,this.resolve=W(X,e),this.reject=W(Z,e)},C.f=$=function(n){return n===B||void 0===n?new a(n):N(n)},!s&&g(T)&&M!==Object.prototype)){i=M.then,z||d(M,"then",(function(n,e){var t=this;return new B((function(n,e){u(i,t,n,e)})).then(n,e)}),{unsafe:!0});try{delete M.constructor}catch(n){}p&&p(M,R)}o({global:!0,constructor:!0,wrap:!0,forced:j},{Promise:B}),h(B,"Promise",!1,!0),f("Promise")},function(n,e,t){var r,a,i,o,s,l,c,u,d=t(0),p=t(60),h=t(38).f,f=t(170).set,m=t(171),g=t(252),v=t(253),b=t(96),y=d.MutationObserver||d.WebKitMutationObserver,x=d.document,_=d.process,k=d.Promise,w=h(d,"queueMicrotask"),E=w&&w.value;E||(r=function(){var n,e;for(b&&(n=_.domain)&&n.exit();a;){e=a.fn,a=a.next;try{e()}catch(n){throw a?o():i=void 0,n}}i=void 0,n&&n.enter()},m||b||v||!y||!x?!g&&k&&k.resolve?((c=k.resolve(void 0)).constructor=k,u=p(c.then,c),o=function(){u(r)}):b?o=function(){_.nextTick(r)}:(f=p(f,d),o=function(){f(r)}):(s=!0,l=x.createTextNode(""),new y(r).observe(l,{characterData:!0}),o=function(){l.data=s=!s})),n.exports=E||function(n){var e={fn:n,next:void 0};i&&(i.next=e),a||(a=e,o()),i=e}},function(n,e,t){var r=t(29),a=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},function(n,e,t){var r=t(29);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window&&"object"!=typeof Deno},function(n,e,t){"use strict";var r=t(1),a=t(7),i=t(24),o=t(78),s=t(128),l=t(172);r({target:"Promise",stat:!0,forced:t(175)},{all:function(n){var e=this,t=o.f(e),r=t.resolve,c=t.reject,u=s((function(){var t=i(e.resolve),o=[],s=0,u=1;l(n,(function(n){var i=s++,l=!1;u++,a(t,e,n).then((function(n){l||(l=!0,o[i]=n,--u||r(o))}),c)})),--u||r(o)}));return u.error&&c(u.value),t.promise}})},function(n,e,t){"use strict";var r=t(1),a=t(19),i=t(77).CONSTRUCTOR,o=t(56),s=t(16),l=t(4),c=t(14),u=o&&o.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(n){return this.then(void 0,n)}}),!a&&l(o)){var d=s("Promise").prototype.catch;u.catch!==d&&c(u,"catch",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(1),a=t(7),i=t(24),o=t(78),s=t(128),l=t(172);r({target:"Promise",stat:!0,forced:t(175)},{race:function(n){var e=this,t=o.f(e),r=t.reject,c=s((function(){var o=i(e.resolve);l(n,(function(n){a(o,e,n).then(t.resolve,r)}))}));return c.error&&r(c.value),t.promise}})},function(n,e,t){"use strict";var r=t(1),a=t(7),i=t(78);r({target:"Promise",stat:!0,forced:t(77).CONSTRUCTOR},{reject:function(n){var e=i.f(this);return a(e.reject,void 0,n),e.promise}})},function(n,e,t){"use strict";var r=t(1),a=t(16),i=t(19),o=t(56),s=t(77).CONSTRUCTOR,l=t(177),c=a("Promise"),u=i&&!s;r({target:"Promise",stat:!0,forced:i||s},{resolve:function(n){return l(u&&this===c?o:this,n)}})},function(n,e,t){var r=t(1),a=t(263);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==a},{assign:a})},function(n,e,t){"use strict";var r=t(8),a=t(3),i=t(7),o=t(2),s=t(92),l=t(95),c=t(123),u=t(15),d=t(67),p=Object.assign,h=Object.defineProperty,f=a([].concat);n.exports=!p||o((function(){if(r&&1!==p({b:1},p(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=p({},n)[t]||"abcdefghijklmnopqrst"!=s(p({},e)).join("")}))?function(n,e){for(var t=u(n),a=arguments.length,o=1,p=l.f,h=c.f;a>o;)for(var m,g=d(arguments[o++]),v=p?f(s(g),p(g)):s(g),b=v.length,y=0;b>y;)m=v[y++],r&&!i(h,g,m)||(t[m]=g[m]);return t}:p},function(n,e,t){"use strict";var r=t(1),a=t(19),i=t(56),o=t(2),s=t(16),l=t(4),c=t(126),u=t(177),d=t(14),p=i&&i.prototype;if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){p.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=c(this,s("Promise")),t=l(n);return this.then(t?function(t){return u(e,n()).then((function(){return t}))}:n,t?function(t){return u(e,n()).then((function(){throw t}))}:n)}}),!a&&l(i)){var h=s("Promise").prototype.finally;p.finally!==h&&d(p,"finally",h,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(127),a=t(85);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,e,t){var r=t(0),a=t(64),i=t(97),o=t(11),s=t(6)("species"),l=r.Array;n.exports=function(n){var e;return a(n)&&(e=n.constructor,(i(e)&&(e===l||a(e.prototype))||o(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?l:e}},function(n,e,t){"use strict";var r=t(1),a=t(268).left,i=t(48),o=t(54),s=t(96);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&o>79&&o<83},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(24),i=t(15),o=t(67),s=t(20),l=r.TypeError,c=function(n){return function(e,t,r,c){a(t);var u=i(e),d=o(u),p=s(u),h=n?p-1:0,f=n?-1:1;if(r<2)for(;;){if(h in d){c=d[h],h+=f;break}if(h+=f,n?h<0:p<=h)throw l("Reduce of empty array with no initial value")}for(;n?h>=0:p>h;h+=f)h in d&&(c=t(c,d[h],h,u));return c}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var r,a=t(1),i=t(3),o=t(38).f,s=t(55),l=t(12),c=t(182),u=t(21),d=t(183),p=t(19),h=i("".startsWith),f=i("".slice),m=Math.min,g=d("startsWith");a({target:"String",proto:!0,forced:!!(p||g||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!g},{startsWith:function(n){var e=l(u(this));c(n);var t=s(m(arguments.length>1?arguments[1]:void 0,e.length)),r=l(n);return h?h(e,r,t):f(e,t,t+r.length)===r}})},function(n,e,t){var r=t(1),a=t(185),i=t(2),o=t(11),s=t(271).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){l(1)})),sham:!a},{freeze:function(n){return l&&o(n)?l(s(n)):n}})},function(n,e,t){var r=t(1),a=t(3),i=t(72),o=t(11),s=t(9),l=t(13).f,c=t(62),u=t(186),d=t(272),p=t(89),h=t(185),f=!1,m=p("meta"),g=0,v=function(n){l(n,m,{value:{objectID:"O"+g++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},f=!0;var n=c.f,e=a([].splice),t={};t[m]=1,n(t).length&&(c.f=function(t){for(var r=n(t),a=0,i=r.length;a<i;a++)if(r[a]===m){e(r,a,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(n,e){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,m)){if(!d(n))return"F";if(!e)return"E";v(n)}return n[m].objectID},getWeakData:function(n,e){if(!s(n,m)){if(!d(n))return!0;if(!e)return!1;v(n)}return n[m].weakData},onFreeze:function(n){return h&&f&&d(n)&&!s(n,m)&&v(n),n}};i[m]=!0},function(n,e,t){var r=t(2),a=t(11),i=t(25),o=t(273),s=Object.isExtensible,l=r((function(){s(1)}));n.exports=l||o?function(n){return!!a(n)&&((!o||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(2);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(7),o=t(3),s=t(19),l=t(8),c=t(53),u=t(2),d=t(9),p=t(34),h=t(10),f=t(23),m=t(91),g=t(12),v=t(50),b=t(33),y=t(92),x=t(62),_=t(186),k=t(95),w=t(38),E=t(13),A=t(149),T=t(123),S=t(14),C=t(52),j=t(93),I=t(72),z=t(89),P=t(6),O=t(187),M=t(188),B=t(276),R=t(63),L=t(35),q=t(61).forEach,D=j("hidden"),$=L.set,N=L.getterFor("Symbol"),U=Object.prototype,F=a.Symbol,G=F&&F.prototype,V=a.TypeError,H=a.QObject,J=w.f,Q=E.f,K=_.f,W=T.f,Z=o([].push),X=C("symbols"),Y=C("op-symbols"),nn=C("wks"),en=!H||!H.prototype||!H.prototype.findChild,tn=l&&u((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=J(U,e);r&&delete U[e],Q(n,e,t),r&&n!==U&&Q(U,e,r)}:Q,rn=function(n,e){var t=X[n]=b(G);return $(t,{type:"Symbol",tag:n,description:e}),l||(t.description=e),t},an=function(n,e,t){n===U&&an(Y,e,t),h(n);var r=m(e);return h(t),d(X,r)?(t.enumerable?(d(n,D)&&n[D][r]&&(n[D][r]=!1),t=b(t,{enumerable:v(0,!1)})):(d(n,D)||Q(n,D,v(1,{})),n[D][r]=!0),tn(n,r,t)):Q(n,r,t)},on=function(n,e){h(n);var t=f(e),r=y(t).concat(un(t));return q(r,(function(e){l&&!i(sn,t,e)||an(n,e,t[e])})),n},sn=function(n){var e=m(n),t=i(W,this,e);return!(this===U&&d(X,e)&&!d(Y,e))&&(!(t||!d(this,e)||!d(X,e)||d(this,D)&&this[D][e])||t)},ln=function(n,e){var t=f(n),r=m(e);if(t!==U||!d(X,r)||d(Y,r)){var a=J(t,r);return!a||!d(X,r)||d(t,D)&&t[D][r]||(a.enumerable=!0),a}},cn=function(n){var e=K(f(n)),t=[];return q(e,(function(n){d(X,n)||d(I,n)||Z(t,n)})),t},un=function(n){var e=n===U,t=K(e?Y:f(n)),r=[];return q(t,(function(n){!d(X,n)||e&&!d(U,n)||Z(r,X[n])})),r};c||(S(G=(F=function(){if(p(G,this))throw V("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,e=z(n),t=function(n){this===U&&i(t,Y,n),d(this,D)&&d(this[D],e)&&(this[D][e]=!1),tn(this,e,v(1,n))};return l&&en&&tn(U,e,{configurable:!0,set:t}),rn(e,n)}).prototype,"toString",(function(){return N(this).tag})),S(F,"withoutSetter",(function(n){return rn(z(n),n)})),T.f=sn,E.f=an,A.f=on,w.f=ln,x.f=_.f=cn,k.f=un,O.f=function(n){return rn(P(n),n)},l&&(Q(G,"description",{configurable:!0,get:function(){return N(this).description}}),s||S(U,"propertyIsEnumerable",sn,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!c,sham:!c},{Symbol:F}),q(y(nn),(function(n){M(n)})),r({target:"Symbol",stat:!0,forced:!c},{useSetter:function(){en=!0},useSimple:function(){en=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!l},{create:function(n,e){return void 0===e?b(n):on(b(n),e)},defineProperty:an,defineProperties:on,getOwnPropertyDescriptor:ln}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:cn}),B(),R(F,"Symbol"),I[D]=!0},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){var r=t(7),a=t(16),i=t(6),o=t(14);n.exports=function(){var n=a("Symbol"),e=n&&n.prototype,t=e&&e.valueOf,s=i("toPrimitive");e&&!e[s]&&o(e,s,(function(n){return r(t,this)}),{arity:1})}},function(n,e,t){var r=t(1),a=t(16),i=t(9),o=t(12),s=t(52),l=t(189),c=s("string-to-symbol-registry"),u=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{for:function(n){var e=o(n);if(i(c,e))return c[e];var t=a("Symbol")(e);return c[e]=t,u[t]=e,t}})},function(n,e,t){var r=t(1),a=t(9),i=t(69),o=t(70),s=t(52),l=t(189),c=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{keyFor:function(n){if(!i(n))throw TypeError(o(n)+" is not a symbol");if(a(c,n))return c[n]}})},function(n,e,t){var r=t(1),a=t(53),i=t(2),o=t(95),s=t(15);r({target:"Object",stat:!0,forced:!a||i((function(){o.f(1)}))},{getOwnPropertySymbols:function(n){var e=o.f;return e?e(s(n)):[]}})},function(n,e,t){"use strict";var r=t(0),a=t(60),i=t(7),o=t(15),s=t(281),l=t(173),c=t(97),u=t(20),d=t(57),p=t(151),h=t(113),f=r.Array;n.exports=function(n){var e=o(n),t=c(this),r=arguments.length,m=r>1?arguments[1]:void 0,g=void 0!==m;g&&(m=a(m,r>2?arguments[2]:void 0));var v,b,y,x,_,k,w=h(e),E=0;if(!w||this==f&&l(w))for(v=u(e),b=t?new this(v):f(v);v>E;E++)k=g?m(e[E],E):e[E],d(b,E,k);else for(_=(x=p(e,w)).next,b=t?new this:[];!(y=i(_,x)).done;E++)k=g?s(x,m,[y.value,E],!0):y.value,d(b,E,k);return b.length=E,b}},function(n,e,t){var r=t(10),a=t(174);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){a(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(16),a=t(9),i=t(26),o=t(34),s=t(75),l=t(124),c=t(236),u=t(153),d=t(192),p=t(283),h=t(284),f=t(285),m=t(8),g=t(19);n.exports=function(n,e,t,v){var b=v?2:1,y=n.split("."),x=y[y.length-1],_=r.apply(null,y);if(_){var k=_.prototype;if(!g&&a(k,"cause")&&delete k.cause,!t)return _;var w=r("Error"),E=e((function(n,e){var t=d(v?e:n,void 0),r=v?new _(n):new _;return void 0!==t&&i(r,"message",t),f&&i(r,"stack",h(r.stack,2)),this&&o(k,this)&&u(r,this,E),arguments.length>b&&p(r,arguments[b]),r}));if(E.prototype=k,"Error"!==x?s?s(E,w):l(E,w,{name:!0}):m&&"stackTraceLimit"in _&&(c(E,_,"stackTraceLimit"),c(E,_,"prepareStackTrace")),l(E,_),!g)try{k.name!==x&&i(k,"name",x),k.constructor=E}catch(n){}return E}}},function(n,e,t){var r=t(11),a=t(26);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(3),a=Error,i=r("".replace),o=String(a("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(o);n.exports=function(n,e){if(l&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=i(n,s,"");return n}},function(n,e,t){var r=t(2),a=t(50);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(8),a=t(2),i=t(10),o=t(33),s=t(192),l=Error.prototype.toString,c=a((function(){if(r){var n=o(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==l.call(n))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));n.exports=c?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:l},function(n,e,t){var r=t(3),a=t(15),i=Math.floor,o=r("".charAt),s=r("".replace),l=r("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,d,p){var h=t+n.length,f=r.length,m=u;return void 0!==d&&(d=a(d),m=c),s(p,m,(function(a,s){var c;switch(o(s,0)){case"$":return"$";case"&":return n;case"`":return l(e,0,t);case"'":return l(e,h);case"<":c=d[l(s,1,-1)];break;default:var u=+s;if(0===u)return a;if(u>f){var p=i(u/10);return 0===p?a:p<=f?void 0===r[p-1]?o(s,1):r[p-1]+o(s,1):a}c=r[u-1]}return void 0===c?"":c}))}},function(n,e,t){var r=t(194),a=t(289);n.exports=function n(e,t,i,o,s){var l=-1,c=e.length;for(i||(i=a),s||(s=[]);++l<c;){var u=e[l];t>0&&i(u)?t>1?n(u,t-1,i,o,s):r(s,u):o||(s[s.length]=u)}return s}},function(n,e,t){var r=t(80),a=t(133),i=t(28),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,e,t){var r=t(66),a=t(51);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(80),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(294),a=t(350),i=t(141),o=t(28),s=t(361);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(295),a=t(349),i=t(211);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(196),a=t(200);n.exports=function(n,e,t,i){var o=t.length,s=o,l=!i;if(null==n)return!s;for(n=Object(n);o--;){var c=t[o];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<s;){var u=(c=t[o])[0],d=n[u],p=c[1];if(l&&c[2]){if(void 0===d&&!(u in n))return!1}else{var h=new r;if(i)var f=i(d,p,u,n,e,h);if(!(void 0===f?a(p,d,3,i,h):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(102),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(102);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(102);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(102);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(101);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(101),a=t(134),i=t(136);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var o=t.__data__;if(!a||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(198),a=t(307),i=t(135),o=t(199),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,p=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?p:s).test(o(n))}},function(n,e,t){var r,a=t(308),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(30)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(311),a=t(101),i=t(134);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(312),a=t(313),i=t(314),o=t(315),s=t(316);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(103);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(103),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(103),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(103);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(104);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(104);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(104);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(104);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(196),a=t(201),i=t(326),o=t(329),s=t(345),l=t(28),c=t(205),u=t(207),d="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,f,m){var g=l(n),v=l(e),b=g?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?d:b)==d,_=(y="[object Arguments]"==y?d:y)==d,k=b==y;if(k&&c(n)){if(!c(e))return!1;g=!0,x=!1}if(k&&!x)return m||(m=new r),g||u(n)?a(n,e,t,h,f,m):i(n,e,b,t,h,f,m);if(!(1&t)){var w=x&&p.call(n,"__wrapped__"),E=_&&p.call(e,"__wrapped__");if(w||E){var A=w?n.value():n,T=E?e.value():e;return m||(m=new r),f(A,T,t,h,m)}}return!!k&&(m||(m=new r),o(n,e,t,h,f,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(80),a=t(327),i=t(197),o=t(201),s=t(328),l=t(137),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,d,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=s;case"[object Set]":var f=1&r;if(h||(h=l),n.size!=e.size&&!f)return!1;var m=p.get(n);if(m)return m==e;r|=2,p.set(n,e);var g=o(h(n),h(e),r,c,d,p);return p.delete(n),g;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(30).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(330),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var l=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!l)return!1;for(var d=u;d--;){var p=c[d];if(!(l?p in e:a.call(e,p)))return!1}var h=s.get(n),f=s.get(e);if(h&&f)return h==e&&f==n;var m=!0;s.set(n,e),s.set(e,n);for(var g=l;++d<u;){var v=n[p=c[d]],b=e[p];if(i)var y=l?i(b,v,p,e,n,s):i(v,b,p,n,e,s);if(!(void 0===y?v===b||o(v,b,t,i,s):y)){m=!1;break}g||(g="constructor"==p)}if(m&&!g){var x=n.constructor,_=e.constructor;x==_||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(m=!1)}return s.delete(n),s.delete(e),m}},function(n,e,t){var r=t(331),a=t(332),i=t(204);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(194),a=t(28);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(333),a=t(334),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(e){return i.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var o=n[t];e(o,t,n)&&(i[a++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(336),a=t(133),i=t(28),o=t(205),s=t(206),l=t(207),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&a(n),d=!t&&!u&&o(n),p=!t&&!u&&!d&&l(n),h=t||u||d||p,f=h?r(n.length,String):[],m=f.length;for(var g in n)!e&&!c.call(n,g)||h&&("length"==g||d&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,m))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(66),a=t(138),i=t(51),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(195),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(154)(n))},function(n,e,t){var r=t(342),a=t(343),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(344)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(346),a=t(134),i=t(347),o=t(209),s=t(348),l=t(66),c=t(199),u=c(r),d=c(a),p=c(i),h=c(o),f=c(s),m=l;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=m(new a)||i&&"[object Promise]"!=m(i.resolve())||o&&"[object Set]"!=m(new o)||s&&"[object WeakMap]"!=m(new s))&&(m=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case d:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var r=t(41)(t(30),"DataView");n.exports=r},function(n,e,t){var r=t(41)(t(30),"Promise");n.exports=r},function(n,e,t){var r=t(41)(t(30),"WeakMap");n.exports=r},function(n,e,t){var r=t(210),a=t(204);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,r(o)]}return e}},function(n,e,t){var r=t(200),a=t(351),i=t(358),o=t(139),s=t(210),l=t(211),c=t(105);n.exports=function(n,e){return o(n)&&s(e)?l(c(n),e):function(t){var o=a(t,n);return void 0===o&&o===e?i(t,n):r(e,o,3)}}},function(n,e,t){var r=t(212);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(353),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var r=t(354);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(136);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return t.cache=i.set(a,o)||i,o};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(356);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(80),a=t(357),i=t(28),o=t(140),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(o(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(359),a=t(360);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(213),a=t(133),i=t(28),o=t(206),s=t(138),l=t(105);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,d=!1;++c<u;){var p=l(e[c]);if(!(d=null!=n&&t(n,p)))break;n=n[p]}return d||++c!=u?d:!!(u=null==n?0:n.length)&&s(u)&&o(p,u)&&(i(n)||a(n))}},function(n,e,t){var r=t(362),a=t(363),i=t(139),o=t(105);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(212);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(141),a=t(365),i=t(367);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(366),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=a(i.length-e,0),l=Array(s);++o<s;)l[o]=i[e+o];o=-1;for(var c=Array(e+1);++o<e;)c[o]=i[o];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(368),a=t(371)(r);n.exports=a},function(n,e,t){var r=t(369),a=t(370),i=t(141),o=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(41),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(202),a=t(373),i=t(378),o=t(203),s=t(379),l=t(137);n.exports=function(n,e,t){var c=-1,u=a,d=n.length,p=!0,h=[],f=h;if(t)p=!1,u=i;else if(d>=200){var m=e?null:s(n);if(m)return l(m);p=!1,u=o,f=new r}else f=e?[]:h;n:for(;++c<d;){var g=n[c],v=e?e(g):g;if(g=t||0!==g?g:0,p&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;e&&f.push(v),h.push(g)}else u(f,v,t)||(f!==h&&f.push(v),h.push(g))}return h}},function(n,e,t){var r=t(374);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(375),a=t(376),i=t(377);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(209),a=t(380),i=t(137),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(208),a=t(51);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){var r=t(1),a=t(0),i=t(214).setInterval;r({global:!0,bind:!0,forced:a.setInterval!==i},{setInterval:i})},function(n,e,t){var r=t(1),a=t(0),i=t(214).setTimeout;r({global:!0,bind:!0,forced:a.setTimeout!==i},{setTimeout:i})},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(74).PROPER,a=t(2),i=t(157);n.exports=function(n){return a((function(){return!!i[n]()||"​᠎"!=="​᠎"[n]()||r&&i[n].name!==n}))}},function(n,e,t){var r=t(3);n.exports=r(1..valueOf)},function(n,e,t){var r=t(3),a=t(55),i=t(12),o=t(389),s=t(21),l=r(o),c=r("".slice),u=Math.ceil,d=function(n){return function(e,t,r){var o,d,p=i(s(e)),h=a(t),f=p.length,m=void 0===r?" ":i(r);return h<=f||""==m?p:((d=l(m,u((o=h-f)/m.length))).length>o&&(d=c(d,0,o)),n?p+d:d+p)}};n.exports={start:d(!1),end:d(!0)}},function(n,e,t){"use strict";var r=t(0),a=t(47),i=t(12),o=t(21),s=r.RangeError;n.exports=function(n){var e=i(o(this)),t="",r=a(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(29);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(217)},function(n,e,t){"use strict";t(218)},function(n,e,t){"use strict";var r=t(1),a=t(3),i=t(24),o=t(15),s=t(20),l=t(12),c=t(2),u=t(242),d=t(48),p=t(394),h=t(395),f=t(54),m=t(396),g=[],v=a(g.sort),b=a(g.push),y=c((function(){g.sort(void 0)})),x=c((function(){g.sort(null)})),_=d("sort"),k=!c((function(){if(f)return f<70;if(!(p&&p>3)){if(h)return!0;if(m)return m<603;var n,e,t,r,a="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)g.push({k:e+r,v:t})}for(g.sort((function(n,e){return e.v-n.v})),r=0;r<g.length;r++)e=g[r].k.charAt(0),a.charAt(a.length-1)!==e&&(a+=e);return"DGBEFHACIJK"!==a}}));r({target:"Array",proto:!0,forced:y||!x||!_||!k},{sort:function(n){void 0!==n&&i(n);var e=o(this);if(k)return void 0===n?v(e):v(e,n);var t,r,a=[],c=s(e);for(r=0;r<c;r++)r in e&&b(a,e[r]);for(u(a,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:l(e)>l(t)?1:-1}}(n)),t=a.length,r=0;r<t;)e[r]=a[r++];for(;r<c;)delete e[r++];return e}})},function(n,e,t){var r=t(29).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(29);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(29).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(15),a=t(71),i=t(20);n.exports=function(n){for(var e=r(this),t=i(e),o=arguments.length,s=a(o>1?arguments[1]:void 0,t),l=o>2?arguments[2]:void 0,c=void 0===l?t:a(l,t);c>s;)e[s++]=n;return e}},function(n,e,t){"use strict";t.r(e);var r=t(42);t(65),t(215),t(22),t(88),t(5),t(84),t(17),t(45),t(219),t(401);"object"===("undefined"==typeof window?"undefined":Object(r.a)(window))&&(window.Ribbons=function(){var n=window,e=document.body,t=document.documentElement,a=function n(){if(1===arguments.length){if(Array.isArray(arguments[0])){var e=Math.round(n(0,arguments[0].length-1));return arguments[0][e]}return n(0,arguments[0])}return 2===arguments.length?Math.random()*(arguments[1]-arguments[0])+arguments[0]:0},i=function(r){var a=Math.max(0,n.innerWidth||t.clientWidth||e.clientWidth||0),i=Math.max(0,n.innerHeight||t.clientHeight||e.clientHeight||0);return{width:a,height:i,ratio:a/i,centerx:a/2,centery:i/2,scrollx:Math.max(0,n.pageXOffset||t.scrollLeft||e.scrollLeft||0)-(t.clientLeft||0),scrolly:Math.max(0,n.pageYOffset||t.scrollTop||e.scrollTop||0)-(t.clientTop||0)}},o=function(n,e){this.x=0,this.y=0,this.set(n,e)};o.prototype={constructor:o,set:function(n,e){this.x=n||0,this.y=e||0},copy:function(n){return this.x=n.x||0,this.y=n.y||0,this},multiply:function(n,e){return this.x*=n||1,this.y*=e||1,this},divide:function(n,e){return this.x/=n||1,this.y/=e||1,this},add:function(n,e){return this.x+=n||0,this.y+=e||0,this},subtract:function(n,e){return this.x-=n||0,this.y-=e||0,this},clampX:function(n,e){return this.x=Math.max(n,Math.min(this.x,e)),this},clampY:function(n,e){return this.y=Math.max(n,Math.min(this.y,e)),this},flipX:function(){return this.x*=-1,this},flipY:function(){return this.y*=-1,this}};var s=function(n){this._canvas=null,this._context=null,this._sto=null,this._width=0,this._height=0,this._scroll=0,this._ribbons=[],this._options=n,this._onDraw=this._onDraw.bind(this),this._onResize=this._onResize.bind(this),this._onScroll=this._onScroll.bind(this),this.setOptions(n),this.init()};return s.prototype={constructor:s,setOptions:function(n){if("object"===Object(r.a)(n))for(var e in n)n.hasOwnProperty(e)&&(this._options[e]=n[e])},init:function(){try{this._canvas=document.createElement("canvas"),this._canvas.style.display="block",this._canvas.style.position="fixed",this._canvas.style.margin="0",this._canvas.style.padding="0",this._canvas.style.border="0",this._canvas.style.outline="0",this._canvas.style.left="0",this._canvas.style.top="0",this._canvas.style.width="100%",this._canvas.style.height="100%",this._canvas.style["z-index"]="-1",this._canvas.id="bgCanvas",this._onResize(),this._context=this._canvas.getContext("2d"),this._context.clearRect(0,0,this._width,this._height),this._context.globalAlpha=this._options.colorAlpha,window.addEventListener("resize",this._onResize),window.addEventListener("scroll",this._onScroll),document.body.appendChild(this._canvas)}catch(n){return void console.warn("Canvas Context Error: "+n.toString())}this._onDraw()},addRibbon:function(){var n=Math.round(a(1,9))>5?"right":"left",e=1e3,t=this._width+200,r=0,i=0,s="right"===n?-200:t,l=Math.round(a(0,this._height));/^(top|min)$/i.test(this._options.verticalPosition)?l=200:/^(middle|center)$/i.test(this._options.verticalPosition)?l=this._height/2:/^(bottom|max)$/i.test(this._options.verticalPosition)&&(l=this._height-200);for(var c=[],u=new o(s,l),d=new o(s,l),p=null,h=Math.round(a(0,360)),f=0;!(e<=0);){if(e--,r=Math.round((1*Math.random()-.2)*this._options.horizontalSpeed),i=Math.round((1*Math.random()-.5)*(.25*this._height)),(p=new o).copy(d),"right"===n){if(p.add(r,i),d.x>=t)break}else if("left"===n&&(p.subtract(r,i),d.x<=-200))break;c.push({point1:new o(u.x,u.y),point2:new o(d.x,d.y),point3:p,color:h,delay:f,dir:n,alpha:0,phase:0}),u.copy(d),d.copy(p),f+=4,h+=this._options.colorCycleSpeed}this._ribbons.push(c)},_drawRibbonSection:function(n){if(n){if(n.phase>=1&&n.alpha<=0)return!0;if(n.delay<=0){if(n.phase+=.02,n.alpha=1*Math.sin(n.phase),n.alpha=n.alpha<=0?0:n.alpha,n.alpha=n.alpha>=1?1:n.alpha,this._options.animateSections){var e=.1*Math.sin(1+n.phase*Math.PI/2);"right"===n.dir?(n.point1.add(e,0),n.point2.add(e,0),n.point3.add(e,0)):(n.point1.subtract(e,0),n.point2.subtract(e,0),n.point3.subtract(e,0)),n.point1.add(0,e),n.point2.add(0,e),n.point3.add(0,e)}}else n.delay-=.5;var t=this._options.colorSaturation,r=this._options.colorBrightness,a="hsla("+n.color+", "+t+", "+r+", "+n.alpha+" )";this._context.save(),0!==this._options.parallaxAmount&&this._context.translate(0,this._scroll*this._options.parallaxAmount),this._context.beginPath(),this._context.moveTo(n.point1.x,n.point1.y),this._context.lineTo(n.point2.x,n.point2.y),this._context.lineTo(n.point3.x,n.point3.y),this._context.fillStyle=a,this._context.fill(),this._options.strokeSize>0&&(this._context.lineWidth=this._options.strokeSize,this._context.strokeStyle=a,this._context.lineCap="round",this._context.stroke()),this._context.restore()}return!1},_onDraw:function(){for(var n=0,e=this._ribbons.length;n<e;++n)this._ribbons[n]||this._ribbons.splice(n,1);this._context.clearRect(0,0,this._width,this._height);for(var t=0;t<this._ribbons.length;++t){for(var r=this._ribbons[t],a=r.length,i=0,o=0;o<a;++o)this._drawRibbonSection(r[o])&&i++;i>=a&&(this._ribbons[t]=null)}this._ribbons.length<this._options.ribbonCount&&this.addRibbon(),requestAnimationFrame(this._onDraw)},_onResize:function(n){var e=i();this._width=e.width,this._height=e.height,this._canvas&&(this._canvas.width=this._width,this._canvas.height=this._height,this._context&&(this._context.globalAlpha=this._options.colorAlpha))},_onScroll:function(n){var e=i();this._scroll=e.scrolly}},s}()),e.default=Ribbons},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(71),o=t(47),s=t(20),l=t(15),c=t(114),u=t(57),d=t(79)("splice"),p=a.TypeError,h=Math.max,f=Math.min;r({target:"Array",proto:!0,forced:!d},{splice:function(n,e){var t,r,a,d,m,g,v=l(this),b=s(v),y=i(n,b),x=arguments.length;if(0===x?t=r=0:1===x?(t=0,r=b-y):(t=x-2,r=f(h(o(e),0),b-y)),b+t-r>9007199254740991)throw p("Maximum allowed length exceeded");for(a=c(v,r),d=0;d<r;d++)(m=y+d)in v&&u(a,d,v[m]);if(a.length=r,t<r){for(d=y;d<b-r;d++)g=d+t,(m=d+r)in v?v[g]=v[m]:delete v[g];for(d=b;d>b-r+t;d--)delete v[d-1]}else if(t>r)for(d=b-r;d>y;d--)g=d+t-1,(m=d+r-1)in v?v[g]=v[m]:delete v[g];for(d=0;d<t;d++)v[d+y]=arguments[d+2];return v.length=b-r+t,a}})},function(n,e,t){"use strict";t(223)},function(n,e,t){"use strict";t(224)},function(n,e,t){"use strict";t.r(e);t(148),t(249),t(262),t(264);var r=t(98),a=(t(146),t(58),t(5),t(27),t(32),t(44),t(31),Object.freeze({}));function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function d(n){return"[object Object]"===u.call(n)}function p(n){return"[object RegExp]"===u.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function f(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function m(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function g(n){var e=parseFloat(n);return isNaN(e)?n:e}function v(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}v("slot,component",!0);var b=v("key,ref,slot,slot-scope,is");function y(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var x=Object.prototype.hasOwnProperty;function _(n,e){return x.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var w=/-(\w)/g,E=k((function(n){return n.replace(w,(function(n,e){return e?e.toUpperCase():""}))})),A=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,S=k((function(n){return n.replace(T,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function j(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function I(n,e){for(var t in e)n[t]=e[t];return n}function z(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function P(n,e,t){}var O=function(n,e,t){return!1},M=function(n){return n};function B(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return B(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var o=Object.keys(n),s=Object.keys(e);return o.length===s.length&&o.every((function(t){return B(n[t],e[t])}))}catch(n){return!1}}function R(n,e){for(var t=0;t<n.length;t++)if(B(n[t],e))return t;return-1}function L(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var q=["component","directive","filter"],D=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:O,isReservedAttr:O,isUnknownElement:O,getTagNamespace:P,parsePlatformTagName:M,mustUseProp:O,async:!0,_lifecycleHooks:D},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var F=new RegExp("[^"+N.source+".$_\\d]");var G,V="__proto__"in{},H="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Q=J&&WXEnvironment.platform.toLowerCase(),K=H&&window.navigator.userAgent.toLowerCase(),W=K&&/msie|trident/.test(K),Z=K&&K.indexOf("msie 9.0")>0,X=K&&K.indexOf("edge/")>0,Y=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===Q),nn=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(H)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===G&&(G=!H&&!J&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),G},on=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,cn="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);ln="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=P,dn=0,pn=function(){this.id=dn++,this.subs=[]};pn.prototype.addSub=function(n){this.subs.push(n)},pn.prototype.removeSub=function(n){y(this.subs,n)},pn.prototype.depend=function(){pn.target&&pn.target.addDep(this)},pn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},pn.target=null;var hn=[];function fn(n){hn.push(n),pn.target=n}function mn(){hn.pop(),pn.target=hn[hn.length-1]}var gn=function(n,e,t,r,a,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},vn={child:{configurable:!0}};vn.child.get=function(){return this.componentInstance},Object.defineProperties(gn.prototype,vn);var bn=function(n){void 0===n&&(n="");var e=new gn;return e.text=n,e.isComment=!0,e};function yn(n){return new gn(void 0,void 0,void 0,String(n))}function xn(n){var e=new gn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var _n=Array.prototype,kn=Object.create(_n);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=_n[n];U(kn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var a,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var wn=Object.getOwnPropertyNames(kn),En=!0;function An(n){En=n}var Tn=function(n){this.value=n,this.dep=new pn,this.vmCount=0,U(n,"__ob__",this),Array.isArray(n)?(V?function(n,e){n.__proto__=e}(n,kn):function(n,e,t){for(var r=0,a=t.length;r<a;r++){var i=t[r];U(n,i,e[i])}}(n,kn,wn),this.observeArray(n)):this.walk(n)};function Sn(n,e){var t;if(c(n)&&!(n instanceof gn))return _(n,"__ob__")&&n.__ob__ instanceof Tn?t=n.__ob__:En&&!an()&&(Array.isArray(n)||d(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Tn(n)),e&&t&&t.vmCount++,t}function Cn(n,e,t,r,a){var i=new pn,o=Object.getOwnPropertyDescriptor(n,e);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(t=n[e]);var c=!a&&Sn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return pn.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(e)&&zn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!l||(l?l.call(n,e):t=e,c=!a&&Sn(e),i.notify())}})}}function jn(n,e,t){if(Array.isArray(n)&&h(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(Cn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function In(n,e){if(Array.isArray(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||_(n,e)&&(delete n[e],t&&t.dep.notify())}}function zn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&zn(e)}Tn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Cn(n,e[t])},Tn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Sn(n[e])};var Pn=$.optionMergeStrategies;function On(n,e){if(!e)return n;for(var t,r,a,i=cn?Reflect.ownKeys(e):Object.keys(e),o=0;o<i.length;o++)"__ob__"!==(t=i[o])&&(r=n[t],a=e[t],_(n,t)?r!==a&&d(r)&&d(a)&&On(r,a):jn(n,t,a));return n}function Mn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,a="function"==typeof n?n.call(t,t):n;return r?On(r,a):a}:e?n?function(){return On("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Bn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Rn(n,e,t,r){var a=Object.create(n||null);return e?I(a,e):a}Pn.data=function(n,e,t){return t?Mn(n,e,t):e&&"function"!=typeof e?n:Mn(n,e)},D.forEach((function(n){Pn[n]=Bn})),q.forEach((function(n){Pn[n+"s"]=Rn})),Pn.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in I(a,n),e){var o=a[i],s=e[i];o&&!Array.isArray(o)&&(o=[o]),a[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return a},Pn.props=Pn.methods=Pn.inject=Pn.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return I(a,n),e&&I(a,e),a},Pn.provide=Mn;var Ln=function(n,e){return void 0===e?n:e};function qn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[E(a)]={type:null});else if(d(t))for(var o in t)a=t[o],i[E(o)]=d(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(d(t))for(var i in t){var o=t[i];r[i]=d(o)?I({from:i},o):{from:o}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=qn(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=qn(n,e.mixins[r],t);var i,o={};for(i in n)s(i);for(i in e)_(n,i)||s(i);function s(r){var a=Pn[r]||Ln;o[r]=a(n[r],e[r],t,r)}return o}function Dn(n,e,t,r){if("string"==typeof t){var a=n[e];if(_(a,t))return a[t];var i=E(t);if(_(a,i))return a[i];var o=A(i);return _(a,o)?a[o]:a[t]||a[i]||a[o]}}function $n(n,e,t,r){var a=e[n],i=!_(t,n),o=t[n],s=Gn(Boolean,a.type);if(s>-1)if(i&&!_(a,"default"))o=!1;else if(""===o||o===S(n)){var l=Gn(String,a.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!_(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Un(e.type)?r.call(n):r}(r,a,n);var c=En;An(!0),Sn(o),An(c)}return o}var Nn=/^\s*function (\w+)/;function Un(n){var e=n&&n.toString().match(Nn);return e?e[1]:""}function Fn(n,e){return Un(n)===Un(e)}function Gn(n,e){if(!Array.isArray(e))return Fn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Fn(e[t],n))return t;return-1}function Vn(n,e,t){fn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){Jn(n,r,"errorCaptured hook")}}Jn(n,e,t)}finally{mn()}}function Hn(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&f(i)&&!i._handled&&(i.catch((function(n){return Vn(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){Vn(n,r,a)}return i}function Jn(n,e,t){if($.errorHandler)try{return $.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Qn(e,null,"config.errorHandler")}Qn(n,e,t)}function Qn(n,e,t){if(!H&&!J||"undefined"==typeof console)throw n;console.error(n)}var Kn,Wn=!1,Zn=[],Xn=!1;function Yn(){Xn=!1;var n=Zn.slice(0);Zn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Kn=function(){ne.then(Yn),Y&&setTimeout(P)},Wn=!0}else if(W||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Kn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Yn)}:function(){setTimeout(Yn,0)};else{var ee=1,te=new MutationObserver(Yn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Kn=function(){ee=(ee+1)%2,re.data=String(ee)},Wn=!0}function ae(n,e){var t;if(Zn.push((function(){if(n)try{n.call(e)}catch(n){Vn(n,e,"nextTick")}else t&&t(e)})),Xn||(Xn=!0,Kn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ie=new ln;function oe(n){!function n(e,t){var r,a,i=Array.isArray(e);if(!i&&!c(e)||Object.isFrozen(e)||e instanceof gn)return;if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(r=e.length;r--;)n(e[r],t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,ie),ie.clear()}var se=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function le(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Hn(r,null,arguments,e,"v-on handler");for(var a=r.slice(),i=0;i<a.length;i++)Hn(a[i],null,n,e,"v-on handler")}return t.fns=n,t}function ce(n,e,t,r,a,o){var l,c,u,d;for(l in n)c=n[l],u=e[l],d=se(l),i(c)||(i(u)?(i(c.fns)&&(c=n[l]=le(c,o)),s(d.once)&&(c=n[l]=a(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)i(n[l])&&r((d=se(l)).name,e[l],d.capture)}function ue(n,e,t){var r;n instanceof gn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),y(r.fns,l)}i(a)?r=le([l]):o(a.fns)&&s(a.merged)?(r=a).fns.push(l):r=le([a,l]),r.merged=!0,n[e]=r}function de(n,e,t,r,a){if(o(e)){if(_(e,t))return n[t]=e[t],a||delete e[t],!0;if(_(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function pe(n){return l(n)?[yn(n)]:Array.isArray(n)?function n(e,t){var r,a,c,u,d=[];for(r=0;r<e.length;r++)i(a=e[r])||"boolean"==typeof a||(c=d.length-1,u=d[c],Array.isArray(a)?a.length>0&&(he((a=n(a,(t||"")+"_"+r))[0])&&he(u)&&(d[c]=yn(u.text+a[0].text),a.shift()),d.push.apply(d,a)):l(a)?he(u)?d[c]=yn(u.text+a):""!==a&&d.push(yn(a)):he(a)&&he(u)?d[c]=yn(u.text+a.text):(s(e._isVList)&&o(a.tag)&&i(a.key)&&o(t)&&(a.key="__vlist"+t+"_"+r+"__"),d.push(a)));return d}(n):void 0}function he(n){return o(n)&&o(n.text)&&!1===n.isComment}function fe(n,e){if(n){for(var t=Object.create(null),r=cn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){for(var o=n[i].from,s=e;s;){if(s._provided&&_(s._provided,o)){t[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in n[i]){var l=n[i].default;t[i]="function"==typeof l?l.call(e):l}else 0}}return t}}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(ge)&&delete t[c];return t}function ge(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ve(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,i=Object.keys(e).length>0,o=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&t&&t!==a&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var l in r={},n)n[l]&&"$"!==l[0]&&(r[l]=ye(e,l,n[l]))}else r={};for(var c in e)c in r||(r[c]=xe(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),U(r,"$stable",o),U(r,"$key",s),U(r,"$hasNormal",i),r}function ye(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:pe(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ve(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function xe(n,e){return function(){return n[e]}}function _e(n,e){var t,r,a,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,a=n.length;r<a;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(c(n))if(cn&&n[Symbol.iterator]){t=[];for(var l=n[Symbol.iterator](),u=l.next();!u.done;)t.push(e(u.value,t.length)),u=l.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,a=i.length;r<a;r++)s=i[r],t[r]=e(n[s],s,r);return o(t)||(t=[]),t._isVList=!0,t}function ke(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=I(I({},r),t)),a=i(t)||("function"==typeof e?e():e)):a=this.$slots[n]||("function"==typeof e?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},a):a}function we(n){return Dn(this.$options,"filters",n)||M}function Ee(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Ae(n,e,t,r,a){var i=$.keyCodes[e]||t;return a&&r&&!$.keyCodes[e]?Ee(a,r):i?Ee(i,n):r?S(r)!==e:void 0===n}function Te(n,e,t,r,a){if(t)if(c(t)){var i;Array.isArray(t)&&(t=z(t));var o=function(o){if("class"===o||"style"===o||b(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||$.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=E(o),c=S(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:"+o]=function(n){t[o]=n}))};for(var s in t)o(s)}else;return n}function Se(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||je(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ce(n,e,t){return je(n,"__once__"+e+(t?"_"+t:""),!0),n}function je(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Ie(n[r],e+"_"+r,t);else Ie(n,e,t)}function Ie(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ze(n,e){if(e)if(d(e)){var t=n.on=n.on?I({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function Pe(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];Array.isArray(i)?Pe(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Oe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Me(n,e){return"string"==typeof n?e+n:n}function Be(n){n._o=Ce,n._n=g,n._s=m,n._l=_e,n._t=ke,n._q=B,n._i=R,n._m=Se,n._f=we,n._k=Ae,n._b=Te,n._v=yn,n._e=bn,n._u=Pe,n._g=ze,n._d=Oe,n._p=Me}function Re(n,e,t,r,i){var o,l=this,c=i.options;_(r,"_uid")?(o=Object.create(r))._original=r:(o=r,r=r._original);var u=s(c._compiled),d=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||a,this.injections=fe(c.inject,r),this.slots=function(){return l.$slots||be(n.scopedSlots,l.$slots=me(t,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,a){var i=Fe(o,n,e,t,a,d);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return Fe(o,n,e,t,r,d)}}function Le(n,e,t,r,a){var i=xn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function qe(n,e){for(var t in e)n[E(t)]=e[t]}Be(Re.prototype);var De={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;De.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;o(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Xe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){0;var o=r.data.scopedSlots,s=n.$scopedSlots,l=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||a,n.$listeners=t||a,e&&n.$options.props){An(!1);for(var u=n._props,d=n.$options._propKeys||[],p=0;p<d.length;p++){var h=d[p],f=n.$options.props;u[h]=$n(h,f,e,n)}An(!0),n.$options.propsData=e}t=t||a;var m=n.$options._parentListeners;n.$options._parentListeners=t,Ze(n,t,m),c&&(n.$slots=me(i,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,at.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},$e=Object.keys(De);function Ne(n,e,t,r,l){if(!i(n)){var u=t.$options._base;if(c(n)&&(n=u.extend(n)),"function"==typeof n){var d;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var t=Ve;t&&o(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(t&&!o(n.owners)){var r=n.owners=[t],a=!0,l=null,u=null;t.$on("hook:destroyed",(function(){return y(r,t)}));var d=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},p=L((function(t){n.resolved=He(t,e),a?r.length=0:d(!0)})),h=L((function(e){o(n.errorComp)&&(n.error=!0,d(!0))})),m=n(p,h);return c(m)&&(f(m)?i(n.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),o(m.error)&&(n.errorComp=He(m.error,e)),o(m.loading)&&(n.loadingComp=He(m.loading,e),0===m.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,d(!1))}),m.delay||200)),o(m.timeout)&&(u=setTimeout((function(){u=null,i(n.resolved)&&h(null)}),m.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(d=n,u)))return function(n,e,t,r,a){var i=bn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(d,e,t,r,l);e=e||{},Et(n),o(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),i=a[r],s=e.model.callback;o(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(a[r]=[s].concat(i)):a[r]=s}(n.options,e);var p=function(n,e,t){var r=e.options.props;if(!i(r)){var a={},s=n.attrs,l=n.props;if(o(s)||o(l))for(var c in r){var u=S(c);de(a,l,c,u,!0)||de(a,s,c,u,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,r,i){var s=n.options,l={},c=s.props;if(o(c))for(var u in c)l[u]=$n(u,c,e||a);else o(t.attrs)&&qe(l,t.attrs),o(t.props)&&qe(l,t.props);var d=new Re(t,l,i,r,n),p=s.render.call(null,d._c,d);if(p instanceof gn)return Le(p,t,d.parent,s,d);if(Array.isArray(p)){for(var h=pe(p)||[],f=new Array(h.length),m=0;m<h.length;m++)f[m]=Le(h[m],t,d.parent,s,d);return f}}(n,p,e,t,r);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var m=e.slot;e={},m&&(e.slot=m)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<$e.length;t++){var r=$e[t],a=e[r],i=De[r];a===i||a&&a._merged||(e[r]=a?Ue(i,a):i)}}(e);var g=n.options.name||l;return new gn("vue-component-"+n.cid+(g?"-"+g:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:p,listeners:h,tag:l,children:r},d)}}}function Ue(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Fe(n,e,t,r,a,u){return(Array.isArray(t)||l(t))&&(a=r,r=t,t=void 0),s(u)&&(a=2),function(n,e,t,r,a){if(o(t)&&o(t.__ob__))return bn();o(t)&&o(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===a?r=pe(r):1===a&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var l,u;if("string"==typeof e){var d;u=n.$vnode&&n.$vnode.ns||$.getTagNamespace(e),l=$.isReservedTag(e)?new gn($.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!o(d=Dn(n.$options,"components",e))?new gn(e,t,r,void 0,void 0,n):Ne(d,t,n,r,e)}else l=Ne(e,t,n,r);return Array.isArray(l)?l:o(l)?(o(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(o(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];o(c.tag)&&(i(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(l,u),o(t)&&function(n){c(n.style)&&oe(n.style);c(n.class)&&oe(n.class)}(t),l):bn()}(n,e,t,r,a)}var Ge,Ve=null;function He(n,e){return(n.__esModule||cn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function Je(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(o(t)&&(o(t.componentOptions)||ve(t)))return t}}function Qe(n,e){Ge.$on(n,e)}function Ke(n,e){Ge.$off(n,e)}function We(n,e){var t=Ge;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Ze(n,e,t){Ge=n,ce(e,t||{},Qe,Ke,We,n),Ge=void 0}var Xe=null;function Ye(n){var e=Xe;return Xe=n,function(){Xe=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){fn();var t=n.$options[e],r=e+" hook";if(t)for(var a=0,i=t.length;a<i;a++)Hn(t[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),mn()}var rt=[],at=[],it={},ot=!1,st=!1,lt=0;var ct=0,ut=Date.now;if(H&&!W){var dt=window.performance;dt&&"function"==typeof dt.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return dt.now()})}function pt(){var n,e;for(ct=ut(),st=!0,rt.sort((function(n,e){return n.id-e.id})),lt=0;lt<rt.length;lt++)(n=rt[lt]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=at.slice(),r=rt.slice();lt=rt.length=at.length=0,it={},ot=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),on&&$.devtools&&on.emit("flush")}var ht=0,ft=function(n,e,t,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ht,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!F.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};ft.prototype.get=function(){var n;fn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Vn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&oe(n),mn(),this.cleanupDeps()}return n},ft.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},ft.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},ft.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==it[e]){if(it[e]=!0,st){for(var t=rt.length-1;t>lt&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);ot||(ot=!0,ae(pt))}}(this)},ft.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Hn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},ft.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ft.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},ft.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var mt={enumerable:!0,configurable:!0,get:P,set:P};function gt(n,e,t){mt.get=function(){return this[e][t]},mt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,mt)}function vt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&An(!1);var i=function(i){a.push(i);var o=$n(i,e,t,n);Cn(r,i,o),i in n||gt(n,"_props",i)};for(var o in e)i(o);An(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?P:C(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;d(e=n._data="function"==typeof e?function(n,e){fn();try{return n.call(e,e)}catch(n){return Vn(n,e,"data()"),{}}finally{mn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&_(r,i)||(o=void 0,36!==(o=(i+"").charCodeAt(0))&&95!==o&&gt(n,"_data",i))}var o;Sn(e,!0)}(n):Sn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var a in e){var i=e[a],o="function"==typeof i?i:i.get;0,r||(t[a]=new ft(n,o||P,P,bt)),a in n||yt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var a=0;a<r.length;a++)kt(n,t,r[a]);else kt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function yt(n,e,t){var r=!an();"function"==typeof t?(mt.get=r?xt(e):_t(t),mt.set=P):(mt.get=t.get?r&&!1!==t.cache?xt(e):_t(t.get):P,mt.set=t.set||P),Object.defineProperty(n,e,mt)}function xt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),pn.target&&e.depend(),e.value}}function _t(n){return function(){return n.call(this,this)}}function kt(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var wt=0;function Et(n){var e=n.options;if(n.super){var t=Et(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&I(n.extendOptions,r),(e=n.options=qn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function At(n){this._init(n)}function Tt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=n.name||t.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=qn(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)gt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)yt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,q.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=I({},o.options),a[r]=o,o}}function St(n){return n&&(n.Ctor.options.name||n.tag)}function Ct(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!p(n)&&n.test(e)}function jt(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&It(t,i,r,a)}}}function It(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,y(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=wt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=qn(Et(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ze(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=me(e._renderChildren,r),n.$scopedSlots=a,n._c=function(e,t,r,a){return Fe(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Fe(n,e,t,r,a,!0)};var i=t&&t.data;Cn(n,"$attrs",i&&i.attrs||a,null,!0),Cn(n,"$listeners",e._parentListeners||a,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=fe(n.$options.inject,n);e&&(An(!1),Object.keys(e).forEach((function(t){Cn(n,t,e[t])})),An(!0))}(e),vt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(At),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=jn,n.prototype.$delete=In,n.prototype.$watch=function(n,e,t){if(d(e))return kt(this,n,e,t);(t=t||{}).user=!0;var r=new ft(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'+r.expression+'"';fn(),Hn(e,this,[r.value],this,a),mn()}return function(){r.teardown()}}}(At),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,o=t._events[n];if(!o)return t;if(!e)return t._events[n]=null,t;for(var s=o.length;s--;)if((i=o[s])===e||i.fn===e){o.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?j(t):t;for(var r=j(arguments,1),a='event handler for "'+n+'"',i=0,o=t.length;i<o;i++)Hn(t[i],e,r,e,a)}return e}}(At),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Ye(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(At),function(n){Be(n.prototype),n.prototype.$nextTick=function(n){return ae(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&(e.$scopedSlots=be(a.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=a;try{Ve=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Vn(t,e,"render"),n=e._vnode}finally{Ve=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof gn||(n=bn()),n.parent=a,n}}(At);var zt=[String,RegExp,Array],Pt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:zt,exclude:zt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,o=t.componentOptions;n[r]={name:St(o),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&It(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)It(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){jt(n,(function(n){return Ct(e,n)}))})),this.$watch("exclude",(function(e){jt(n,(function(n){return!Ct(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Je(n),t=e&&e.componentOptions;if(t){var r=St(t),a=this.include,i=this.exclude;if(a&&(!r||!Ct(a,r))||i&&r&&Ct(i,r))return e;var o=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,y(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return $}};Object.defineProperty(n,"config",e),n.util={warn:un,extend:I,mergeOptions:qn,defineReactive:Cn},n.set=jn,n.delete=In,n.nextTick=ae,n.observable=function(n){return Sn(n),n},n.options=Object.create(null),q.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,Pt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=j(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=qn(this.options,n),this}}(n),Tt(n),function(n){q.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(At),Object.defineProperty(At.prototype,"$isServer",{get:an}),Object.defineProperty(At.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(At,"FunctionalRenderContext",{value:Re}),At.version="2.6.14";var Ot=v("style,class"),Mt=v("input,textarea,option,select,progress"),Bt=v("contenteditable,draggable,spellcheck"),Rt=v("events,caret,typing,plaintext-only"),Lt=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),qt="http://www.w3.org/1999/xlink",Dt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},$t=function(n){return Dt(n)?n.slice(6,n.length):""},Nt=function(n){return null==n||!1===n};function Ut(n){for(var e=n.data,t=n,r=n;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ft(r.data,e));for(;o(t=t.parent);)t&&t.data&&(e=Ft(e,t.data));return function(n,e){if(o(n)||o(e))return Gt(n,Vt(e));return""}(e.staticClass,e.class)}function Ft(n,e){return{staticClass:Gt(n.staticClass,e.staticClass),class:o(n.class)?[n.class,e.class]:e.class}}function Gt(n,e){return n?e?n+" "+e:n:e||""}function Vt(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)o(e=Vt(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Ht={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Jt=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Qt=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Kt=function(n){return Jt(n)||Qt(n)};var Wt=Object.create(null);var Zt=v("text,number,password,search,email,tel,url");var Xt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Ht[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Yt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(o(t)){var r=n.context,a=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?y(i[t],a):i[t]===a&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(a)<0&&i[t].push(a):i[t]=[a]:i[t]=a}}var er=new gn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&o(n.data)===o(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=o(t=n.data)&&o(t=t.attrs)&&t.type,a=o(t=e.data)&&o(t=t.attrs)&&t.type;return r===a||Zt(r)&&Zt(a)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function ar(n,e,t){var r,a,i={};for(r=e;r<=t;++r)o(a=n[r].key)&&(i[a]=r);return i}var ir={create:or,update:or,destroy:function(n){or(n,er)}};function or(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===er,o=e===er,s=lr(n.data.directives,n.context),l=lr(e.data.directives,e.context),c=[],u=[];for(t in l)r=s[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,ur(a,"update",e,n),a.def&&a.def.componentUpdated&&u.push(a)):(ur(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var d=function(){for(var t=0;t<c.length;t++)ur(c[t],"inserted",e,n)};i?ue(e,"insert",d):d()}u.length&&ue(e,"postpatch",(function(){for(var t=0;t<u.length;t++)ur(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)l[t]||ur(s[t],"unbind",n,n,o)}(n,e)}var sr=Object.create(null);function lr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),a[cr(r)]=r,r.def=Dn(e.$options,"directives",r.name);return a}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){Vn(r,t.context,"directive "+n.name+" "+e+" hook")}}var dr=[Yt,ir];function pr(n,e){var t=e.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,a,s=e.elm,l=n.data.attrs||{},c=e.data.attrs||{};for(r in o(c.__ob__)&&(c=e.data.attrs=I({},c)),c)a=c[r],l[r]!==a&&hr(s,r,a,e.data.pre);for(r in(W||X)&&c.value!==l.value&&hr(s,"value",c.value),l)i(c[r])&&(Dt(r)?s.removeAttributeNS(qt,$t(r)):Bt(r)||s.removeAttribute(r))}}function hr(n,e,t,r){r||n.tagName.indexOf("-")>-1?fr(n,e,t):Lt(e)?Nt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Bt(e)?n.setAttribute(e,function(n,e){return Nt(e)||"false"===e?"false":"contenteditable"===n&&Rt(e)?e:"true"}(e,t)):Dt(e)?Nt(t)?n.removeAttributeNS(qt,$t(e)):n.setAttributeNS(qt,e,t):fr(n,e,t)}function fr(n,e,t){if(Nt(t))n.removeAttribute(e);else{if(W&&!Z&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var mr={create:pr,update:pr};function gr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=Ut(e),l=t._transitionClasses;o(l)&&(s=Gt(s,Vt(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var vr,br={create:gr,update:gr};function yr(n,e,t){var r=vr;return function a(){var i=e.apply(null,arguments);null!==i&&kr(n,a,t,r)}}var xr=Wn&&!(nn&&Number(nn[1])<=53);function _r(n,e,t,r){if(xr){var a=ct,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}vr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function kr(n,e,t,r){(r||vr).removeEventListener(n,e._wrapper||e,t)}function wr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};vr=e.elm,function(n){if(o(n.__r)){var e=W?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ce(t,r,_r,kr,yr,e.context),vr=void 0}}var Er,Ar={create:wr,update:wr};function Tr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,a=e.elm,s=n.data.domProps||{},l=e.data.domProps||{};for(t in o(l.__ob__)&&(l=e.data.domProps=I({},l)),s)t in l||(a[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var c=i(r)?"":String(r);Sr(a,c)&&(a.value=c)}else if("innerHTML"===t&&Qt(a.tagName)&&i(a.innerHTML)){(Er=Er||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=Er.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(r!==s[t])try{a[t]=r}catch(n){}}}}function Sr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(o(r)){if(r.number)return g(t)!==g(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Cr={create:Tr,update:Tr},jr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Ir(n){var e=zr(n.style);return n.staticStyle?I(n.staticStyle,e):e}function zr(n){return Array.isArray(n)?z(n):"string"==typeof n?jr(n):n}var Pr,Or=/^--/,Mr=/\s*!important$/,Br=function(n,e,t){if(Or.test(e))n.style.setProperty(e,t);else if(Mr.test(t))n.style.setProperty(S(e),t.replace(Mr,""),"important");else{var r=Lr(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},Rr=["Webkit","Moz","ms"],Lr=k((function(n){if(Pr=Pr||document.createElement("div").style,"filter"!==(n=E(n))&&n in Pr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Rr.length;t++){var r=Rr[t]+e;if(r in Pr)return r}}));function qr(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var a,s,l=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},d=c||u,p=zr(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?I({},p):p;var h=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Ir(a.data))&&I(r,t);(t=Ir(n.data))&&I(r,t);for(var i=n;i=i.parent;)i.data&&(t=Ir(i.data))&&I(r,t);return r}(e,!0);for(s in d)i(h[s])&&Br(l,s,"");for(s in h)(a=h[s])!==d[s]&&Br(l,s,null==a?"":a)}}var Dr={create:qr,update:qr},$r=/\s+/;function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split($r).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Ur(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split($r).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Fr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,Gr(n.name||"v")),I(e,n),e}return"string"==typeof n?Gr(n):void 0}}var Gr=k((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Vr=H&&!Z,Hr="transition",Jr="transitionend",Qr="animation",Kr="animationend";Vr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Hr="WebkitTransition",Jr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Qr="WebkitAnimation",Kr="webkitAnimationEnd"));var Wr=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Zr(n){Wr((function(){Wr(n)}))}function Xr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Nr(n,e))}function Yr(n,e){n._transitionClasses&&y(n._transitionClasses,e),Ur(n,e)}function na(n,e,t){var r=ta(n,e),a=r.type,i=r.timeout,o=r.propCount;if(!a)return t();var s="transition"===a?Jr:Kr,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),i+1),n.addEventListener(s,u)}var ea=/\b(transform|all)(,|$)/;function ta(n,e){var t,r=window.getComputedStyle(n),a=(r[Hr+"Delay"]||"").split(", "),i=(r[Hr+"Duration"]||"").split(", "),o=ra(a,i),s=(r[Qr+"Delay"]||"").split(", "),l=(r[Qr+"Duration"]||"").split(", "),c=ra(s,l),u=0,d=0;return"transition"===e?o>0&&(t="transition",u=o,d=i.length):"animation"===e?c>0&&(t="animation",u=c,d=l.length):d=(t=(u=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:u,propCount:d,hasTransform:"transition"===t&&ea.test(r[Hr+"Property"])}}function ra(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return aa(e)+aa(n[t])})))}function aa(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ia(n,e){var t=n.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Fr(n.data.transition);if(!i(r)&&!o(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,p=r.appearClass,h=r.appearToClass,f=r.appearActiveClass,m=r.beforeEnter,v=r.enter,b=r.afterEnter,y=r.enterCancelled,x=r.beforeAppear,_=r.appear,k=r.afterAppear,w=r.appearCancelled,E=r.duration,A=Xe,T=Xe.$vnode;T&&T.parent;)A=T.context,T=T.parent;var S=!A._isMounted||!n.isRootInsert;if(!S||_||""===_){var C=S&&p?p:l,j=S&&f?f:d,I=S&&h?h:u,z=S&&x||m,P=S&&"function"==typeof _?_:v,O=S&&k||b,M=S&&w||y,B=g(c(E)?E.enter:E);0;var R=!1!==a&&!Z,q=la(P),D=t._enterCb=L((function(){R&&(Yr(t,I),Yr(t,j)),D.cancelled?(R&&Yr(t,C),M&&M(t)):O&&O(t),t._enterCb=null}));n.data.show||ue(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(t,D)})),z&&z(t),R&&(Xr(t,C),Xr(t,j),Zr((function(){Yr(t,C),D.cancelled||(Xr(t,I),q||(sa(B)?setTimeout(D,B):na(t,s,D)))}))),n.data.show&&(e&&e(),P&&P(t,D)),R||q||D()}}}function oa(n,e){var t=n.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Fr(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!o(t._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,h=r.leave,f=r.afterLeave,m=r.leaveCancelled,v=r.delayLeave,b=r.duration,y=!1!==a&&!Z,x=la(h),_=g(c(b)?b.leave:b);0;var k=t._leaveCb=L((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Yr(t,u),Yr(t,d)),k.cancelled?(y&&Yr(t,l),m&&m(t)):(e(),f&&f(t)),t._leaveCb=null}));v?v(w):w()}function w(){k.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),y&&(Xr(t,l),Xr(t,d),Zr((function(){Yr(t,l),k.cancelled||(Xr(t,u),x||(sa(_)?setTimeout(k,_):na(t,s,k)))}))),h&&h(t,k),y||x||k())}}function sa(n){return"number"==typeof n&&!isNaN(n)}function la(n){if(i(n))return!1;var e=n.fns;return o(e)?la(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function ca(n,e){!0!==e.data.show&&ia(e)}var ua=function(n){var e,t,r={},a=n.modules,c=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<a.length;++t)o(a[t][tr[e]])&&r[tr[e]].push(a[t][tr[e]]);function u(n){var e=c.parentNode(n);o(e)&&c.removeChild(e,n)}function d(n,e,t,a,i,l,u){if(o(n.elm)&&o(l)&&(n=l[u]=xn(n)),n.isRootInsert=!i,!function(n,e,t,a){var i=n.data;if(o(i)){var l=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return p(n,e),h(t,n.elm,a),s(l)&&function(n,e,t,a){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](er,s);e.push(s);break}h(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var d=n.data,m=n.children,v=n.tag;o(v)?(n.elm=n.ns?c.createElementNS(n.ns,v):c.createElement(v,n),b(n),f(n,m,e),o(d)&&g(n,e),h(t,n.elm,a)):s(n.isComment)?(n.elm=c.createComment(n.text),h(t,n.elm,a)):(n.elm=c.createTextNode(n.text),h(t,n.elm,a))}}function p(n,e){o(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,m(n)?(g(n,e),b(n)):(nr(n),e.push(n))}function h(n,e,t){o(n)&&(o(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function f(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function m(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function g(n,t){for(var a=0;a<r.create.length;++a)r.create[a](er,n);o(e=n.data.hook)&&(o(e.create)&&e.create(er,n),o(e.insert)&&t.push(n))}function b(n){var e;if(o(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)o(e=t.context)&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;o(e=Xe)&&e!==n.context&&e!==n.fnContext&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function y(n,e,t,r,a,i){for(;r<=a;++r)d(t[r],i,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(o(a))for(o(e=a.hook)&&o(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(o(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function _(n,e,t){for(;e<=t;++e){var r=n[e];o(r)&&(o(r.tag)?(k(r),x(r)):u(r.elm))}}function k(n,e){if(o(e)||o(n.data)){var t,a=r.remove.length+1;for(o(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,a),o(t=n.componentInstance)&&o(t=t._vnode)&&o(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);o(t=n.data.hook)&&o(t=t.remove)?t(n,e):e()}else u(n.elm)}function w(n,e,t,r){for(var a=t;a<r;a++){var i=e[a];if(o(i)&&rr(n,i))return a}}function E(n,e,t,a,l,u){if(n!==e){o(e.elm)&&o(a)&&(e=a[l]=xn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))o(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,f=e.data;o(f)&&o(h=f.hook)&&o(h=h.prepatch)&&h(n,e);var g=n.children,v=e.children;if(o(f)&&m(e)){for(h=0;h<r.update.length;++h)r.update[h](n,e);o(h=f.hook)&&o(h=h.update)&&h(n,e)}i(e.text)?o(g)&&o(v)?g!==v&&function(n,e,t,r,a){var s,l,u,p=0,h=0,f=e.length-1,m=e[0],g=e[f],v=t.length-1,b=t[0],x=t[v],k=!a;for(0;p<=f&&h<=v;)i(m)?m=e[++p]:i(g)?g=e[--f]:rr(m,b)?(E(m,b,r,t,h),m=e[++p],b=t[++h]):rr(g,x)?(E(g,x,r,t,v),g=e[--f],x=t[--v]):rr(m,x)?(E(m,x,r,t,v),k&&c.insertBefore(n,m.elm,c.nextSibling(g.elm)),m=e[++p],x=t[--v]):rr(g,b)?(E(g,b,r,t,h),k&&c.insertBefore(n,g.elm,m.elm),g=e[--f],b=t[++h]):(i(s)&&(s=ar(e,p,f)),i(l=o(b.key)?s[b.key]:w(b,e,p,f))?d(b,r,n,m.elm,!1,t,h):rr(u=e[l],b)?(E(u,b,r,t,h),e[l]=void 0,k&&c.insertBefore(n,u.elm,m.elm)):d(b,r,n,m.elm,!1,t,h),b=t[++h]);p>f?y(n,i(t[v+1])?null:t[v+1].elm,t,h,v,r):h>v&&_(e,p,f)}(p,g,v,t,u):o(v)?(o(n.text)&&c.setTextContent(p,""),y(p,null,v,0,v.length-1,t)):o(g)?_(g,0,g.length-1):o(n.text)&&c.setTextContent(p,""):n.text!==e.text&&c.setTextContent(p,e.text),o(f)&&o(h=f.hook)&&o(h=h.postpatch)&&h(n,e)}}}function A(n,e,t){if(s(t)&&o(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=v("attrs,class,staticClass,staticStyle,key");function S(n,e,t,r){var a,i=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(a=l.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return p(e,t),!0;if(o(i)){if(o(c))if(n.hasChildNodes())if(o(a=l)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var u=!0,d=n.firstChild,h=0;h<c.length;h++){if(!d||!S(d,c[h],t,r)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else f(e,c,t);if(o(l)){var m=!1;for(var v in l)if(!T(v)){m=!0,g(e,t);break}!m&&l.class&&oe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!i(e)){var l,u=!1,p=[];if(i(n))u=!0,d(e,p);else{var h=o(n.nodeType);if(!h&&rr(n,e))E(n,e,p,null,null,a);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&S(n,e,p))return A(e,p,!0),n;l=n,n=new gn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=n.elm,g=c.parentNode(f);if(d(e,p,f._leaveCb?null:g,c.nextSibling(f)),o(e.parent))for(var v=e.parent,b=m(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var k=0;k<r.create.length;++k)r.create[k](er,v);var w=v.data.hook.insert;if(w.merged)for(var T=1;T<w.fns.length;T++)w.fns[T]()}else nr(v);v=v.parent}o(g)?_([n],0,0):o(n.tag)&&x(n)}}return A(e,p,u),e.elm}o(n)&&x(n)}}({nodeOps:Xt,modules:[mr,br,Ar,Cr,Dr,H?{create:ca,activate:ca,remove:function(n,e){!0!==n.data.show?oa(n,e):e()}}:{}].concat(dr)});Z&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&ba(n,"input")}));var da={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ue(t,"postpatch",(function(){da.componentUpdated(n,e,t)})):pa(n,e,t.context),n._vOptions=[].map.call(n.options,ma)):("textarea"===t.tag||Zt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",ga),n.addEventListener("compositionend",va),n.addEventListener("change",va),Z&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){pa(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,ma);if(a.some((function(n,e){return!B(n,r[e])})))(n.multiple?e.value.some((function(n){return fa(n,a)})):e.value!==e.oldValue&&fa(e.value,a))&&ba(n,"change")}}};function pa(n,e,t){ha(n,e,t),(W||X)&&setTimeout((function(){ha(n,e,t)}),0)}function ha(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,l=n.options.length;s<l;s++)if(o=n.options[s],a)i=R(r,ma(o))>-1,o.selected!==i&&(o.selected=i);else if(B(ma(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function fa(n,e){return e.every((function(e){return!B(e,n)}))}function ma(n){return"_value"in n?n._value:n.value}function ga(n){n.target.composing=!0}function va(n){n.target.composing&&(n.target.composing=!1,ba(n.target,"input"))}function ba(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ya(n){return!n.componentInstance||n.data&&n.data.transition?n:ya(n.componentInstance._vnode)}var xa={model:da,show:{bind:function(n,e,t){var r=e.value,a=(t=ya(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,ia(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ya(t)).data&&t.data.transition?(t.data.show=!0,r?ia(t,(function(){n.style.display=n.__vOriginalDisplay})):oa(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},_a={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ka(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?ka(Je(e.children)):n}function wa(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var i in a)e[E(i)]=a[i];return e}function Ea(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Aa=function(n){return n.tag||ve(n)},Ta=function(n){return"show"===n.name},Sa={name:"transition",props:_a,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Aa)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=ka(a);if(!i)return a;if(this._leaving)return Ea(n,a);var o="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=wa(this),c=this._vnode,u=ka(c);if(i.data.directives&&i.data.directives.some(Ta)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!ve(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=I({},s);if("out-in"===r)return this._leaving=!0,ue(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ea(n,a);if("in-out"===r){if(ve(i))return c;var p,h=function(){p()};ue(s,"afterEnter",h),ue(s,"enterCancelled",h),ue(d,"delayLeave",(function(n){p=n}))}}return a}}},Ca=I({tag:String,moveClass:String},_a);function ja(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ia(n){n.data.newPos=n.elm.getBoundingClientRect()}function za(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+a+"px)",i.transitionDuration="0s"}}delete Ca.mode;var Pa={Transition:Sa,TransitionGroup:{props:Ca,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Ye(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=wa(this),s=0;s<a.length;s++){var l=a[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),t[l.key]=l,(l.data||(l.data={})).transition=o;else;}if(r){for(var c=[],u=[],d=0;d<r.length;d++){var p=r[d];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):u.push(p)}this.kept=n(e,null,c),this.removed=u}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(ja),n.forEach(Ia),n.forEach(za),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Xr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Jr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Jr,n),t._moveCb=null,Yr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Vr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Ur(t,n)})),Nr(t,e),t.style.display="none",this.$el.appendChild(t);var r=ta(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};At.config.mustUseProp=function(n,e,t){return"value"===t&&Mt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},At.config.isReservedTag=Kt,At.config.isReservedAttr=Ot,At.config.getTagNamespace=function(n){return Qt(n)?"svg":"math"===n?"math":void 0},At.config.isUnknownElement=function(n){if(!H)return!0;if(Kt(n))return!1;if(n=n.toLowerCase(),null!=Wt[n])return Wt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Wt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Wt[n]=/HTMLUnknownElement/.test(e.toString())},I(At.options.directives,xa),I(At.options.components,Pa),At.prototype.__patch__=H?ua:P,At.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new ft(n,r,P,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&H?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},H&&setTimeout((function(){$.devtools&&on&&on.emit("init",At)}),0);var Oa=At;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Ma(n,e){for(var t in e)n[t]=e[t];return n}var Ba=/[!'()*]/g,Ra=function(n){return"%"+n.charCodeAt(0).toString(16)},La=/%2C/g,qa=function(n){return encodeURIComponent(n).replace(Ba,Ra).replace(La,",")};function Da(n){try{return decodeURIComponent(n)}catch(n){0}return n}var $a=function(n){return null==n||"object"==typeof n?n:String(n)};function Na(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Da(t.shift()),a=t.length>0?Da(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function Ua(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return qa(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(qa(e)):r.push(qa(e)+"="+qa(n)))})),r.join("&")}return qa(e)+"="+qa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Fa=/\/?$/;function Ga(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=Va(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Qa(e,a),matched:n?Ja(n):[]};return t&&(o.redirectedFrom=Qa(t,a)),Object.freeze(o)}function Va(n){if(Array.isArray(n))return n.map(Va);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Va(n[t]);return e}return n}var Ha=Ga(null,{path:"/"});function Ja(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Qa(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||Ua)(r)+a}function Ka(n,e,t){return e===Ha?n===e:!!e&&(n.path&&e.path?n.path.replace(Fa,"")===e.path.replace(Fa,"")&&(t||n.hash===e.hash&&Wa(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Wa(n.query,e.query)&&Wa(n.params,e.params))))}function Wa(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?Wa(i,o):String(i)===String(o)}))}function Za(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var Xa={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,i=e.data;i.routerView=!0;for(var o=a.$createElement,s=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),u=0,d=!1;a&&a._routerRoot!==a;){var p=a.$vnode?a.$vnode.data:{};p.routerView&&u++,p.keepAlive&&a._directInactive&&a._inactive&&(d=!0),a=a.$parent}if(i.routerViewDepth=u,d){var h=c[s],f=h&&h.component;return f?(h.configProps&&Ya(f,i,h.route,h.configProps),o(f,i,r)):o()}var m=l.matched[u],g=m&&m.components[s];if(!m||!g)return c[s]=null,o();c[s]={component:g},i.registerRouteInstance=function(n,e){var t=m.instances[s];(e&&t!==n||!e&&t===n)&&(m.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){m.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[s]&&(m.instances[s]=n.componentInstance),Za(l)};var v=m.props&&m.props[s];return v&&(Ma(c[s],{route:l,configProps:v}),Ya(g,i,l,v)),o(g,i,r)}};function Ya(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=Ma({},a);var i=e.attrs=e.attrs||{};for(var o in a)n.props&&o in n.props||(i[o]=a[o],delete a[o])}}function ni(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function ei(n){return n.replace(/\/+/g,"/")}var ti=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ri=vi,ai=ci,ii=function(n,e){return di(ci(n,e),e)},oi=di,si=gi,li=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ci(n,e){for(var t,r=[],a=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=li.exec(n));){var l=t[0],c=t[1],u=t.index;if(o+=n.slice(i,u),i=u+l.length,c)o+=c[1];else{var d=n[i],p=t[2],h=t[3],f=t[4],m=t[5],g=t[6],v=t[7];o&&(r.push(o),o="");var b=null!=p&&null!=d&&d!==p,y="+"===g||"*"===g,x="?"===g||"*"===g,_=t[2]||s,k=f||m;r.push({name:h||a++,prefix:p||"",delimiter:_,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:k?hi(k):v?".*":"[^"+pi(_)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function ui(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function di(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",mi(e)));return function(e,r){for(var a="",i=e||{},o=(r||{}).pretty?ui:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=i[l.name];if(null==u){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ti(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<u.length;d++){if(c=o(u[d]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function pi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function hi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function fi(n,e){return n.keys=e,n}function mi(n){return n&&n.sensitive?"":"i"}function gi(n,e,t){ti(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=pi(s);else{var l=pi(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=pi(t.delimiter||"/"),d=i.slice(-u.length)===u;return r||(i=(d?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=a?"$":r&&d?"":"(?="+u+"|$)",fi(new RegExp("^"+i,mi(t)),e)}function vi(n,e,t){return ti(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return fi(n,e)}(n,e):ti(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(vi(n[a],e,t).source);return fi(new RegExp("(?:"+r.join("|")+")",mi(t)),e)}(n,e,t):function(n,e,t){return gi(ci(n,t),e,t)}(n,e,t)}ri.parse=ai,ri.compile=ii,ri.tokensToFunction=oi,ri.tokensToRegExp=si;var bi=Object.create(null);function yi(n,e,t){e=e||{};try{var r=bi[n]||(bi[n]=ri.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function xi(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=Ma({},n)).params;return i&&"object"==typeof i&&(a.params=Ma({},i)),a}if(!a.path&&a.params&&e){(a=Ma({},a))._normalized=!0;var o=Ma(Ma({},e.params),a.params);if(e.name)a.name=e.name,a.params=o;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=yi(s,o,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",u=l.path?ni(l.path,c,t||a.append):c,d=function(n,e,t){void 0===e&&(e={});var r,a=t||Na;try{r=a(n||"")}catch(n){r={}}for(var i in e){var o=e[i];r[i]=Array.isArray(o)?o.map($a):$a(o)}return r}(l.query,a.query,r&&r.options.parseQuery),p=a.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:u,query:d,hash:p}}var _i,ki=function(){},wi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),i=a.location,o=a.route,s=a.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,d=null==c?"router-link-active":c,p=null==u?"router-link-exact-active":u,h=null==this.activeClass?d:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,m=o.redirectedFrom?Ga(null,xi(o.redirectedFrom),null,t):o;l[f]=Ka(r,m,this.exactPath),l[h]=this.exact||this.exactPath?l[f]:function(n,e){return 0===n.path.replace(Fa,"/").indexOf(e.path.replace(Fa,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,m);var g=l[f]?this.ariaCurrentValue:null,v=function(n){Ei(n)&&(e.replace?t.replace(i,ki):t.push(i,ki))},b={click:Ei};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:v,isActive:l[h],isExactActive:l[f]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":g};else{var _=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var k=_.data=Ma({},_.data);for(var w in k.on=k.on||{},k.on){var E=k.on[w];w in b&&(k.on[w]=Array.isArray(E)?E:[E])}for(var A in b)A in k.on?k.on[A].push(b[A]):k.on[A]=v;var T=_.data.attrs=Ma({},_.data.attrs);T.href=s,T["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Ei(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ai="undefined"!=typeof window;function Ti(n,e,t,r,a){var i=e||[],o=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,o){var s=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ei(e.path+"/"+n)}(s,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var d={path:u,regex:Si(u,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?ei(o+"/"+a.path):void 0;n(e,t,r,a,d,i)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],h=0;h<p.length;++h){0;var f={path:p[h],children:a.children};n(e,t,r,f,i,d.path||"/")}l&&(r[l]||(r[l]=d))}(i,o,s,n,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:o,nameMap:s}}function Si(n,e){return ri(n,[],e)}function Ci(n,e){var t=Ti(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function o(n,t,o){var s=xi(n,t,!1,e),c=s.name;if(c){var u=i[c];if(!u)return l(null,s);var d=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&d.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=yi(u.path,s.params),l(u,s,o)}if(s.path){s.params={};for(var h=0;h<r.length;h++){var f=r[h],m=a[f];if(ji(m.regex,s.path,s.params))return l(m,s,o)}}return l(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(Ga(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var s=a,c=s.name,u=s.path,d=t.query,p=t.hash,h=t.params;if(d=s.hasOwnProperty("query")?s.query:d,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return o({_normalized:!0,name:c,query:d,hash:p,params:h},void 0,t)}if(u){var f=function(n,e){return ni(n,e.parent?e.parent.path:"/",!0)}(u,n);return o({_normalized:!0,path:yi(f,h),query:d,hash:p},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=o({_normalized:!0,path:yi(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):Ga(n,t,r,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ti([e||n],r,a,i,t),t&&t.alias.length&&Ti(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ti(n,r,a,i)}}}function ji(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(t[o.name||"pathMatch"]="string"==typeof r[a]?Da(r[a]):r[a])}return!0}var Ii=Ai&&window.performance&&window.performance.now?window.performance:Date;function zi(){return Ii.now().toFixed(3)}var Pi=zi();function Oi(){return Pi}function Mi(n){return Pi=n}var Bi=Object.create(null);function Ri(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Ma({},window.history.state);return t.key=Oi(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Di),function(){window.removeEventListener("popstate",Di)}}function Li(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=Oi();if(n)return Bi[n]}(),o=a.call(n,e,t,r?i:null);o&&("function"==typeof o.then?o.then((function(n){Gi(n,i)})).catch((function(n){0})):Gi(o,i))}))}}function qi(){var n=Oi();n&&(Bi[n]={x:window.pageXOffset,y:window.pageYOffset})}function Di(n){qi(),n.state&&n.state.key&&Mi(n.state.key)}function $i(n){return Ui(n.x)||Ui(n.y)}function Ni(n){return{x:Ui(n.x)?n.x:window.pageXOffset,y:Ui(n.y)?n.y:window.pageYOffset}}function Ui(n){return"number"==typeof n}var Fi=/^#\d/;function Gi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=Fi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:Ui((t=i).x)?t.x:0,y:Ui(t.y)?t.y:0})}else $i(n)&&(e=Ni(n))}else r&&$i(n)&&(e=Ni(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Vi,Hi=Ai&&((-1===(Vi=window.navigator.userAgent).indexOf("Android 2.")&&-1===Vi.indexOf("Android 4.0")||-1===Vi.indexOf("Mobile Safari")||-1!==Vi.indexOf("Chrome")||-1!==Vi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Ji(n,e){qi();var t=window.history;try{if(e){var r=Ma({},t.state);r.key=Oi(),t.replaceState(r,"",n)}else t.pushState({key:Mi(zi())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Qi(n){Ji(n,!0)}function Ki(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var Wi={redirected:2,aborted:4,cancelled:8,duplicated:16};function Zi(n,e){return Yi(n,e,Wi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return no.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Xi(n,e){return Yi(n,e,Wi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function Yi(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var no=["params","query","hash"];function eo(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function to(n,e){return eo(n)&&n._isRouter&&(null==e||n.type===e)}function ro(n){return function(e,t,r){var a=!1,i=0,o=null;ao(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var l,c=so((function(e){var a;((a=e).__esModule||oo&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:_i.extend(e),t.components[s]=e,--i<=0&&r()})),u=so((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=eo(n)?n:new Error(e),r(o))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,u)}}})),a||r()}}function ao(n,e){return io(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function io(n){return Array.prototype.concat.apply([],n)}var oo="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function so(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var lo=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ai){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Ha,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function co(n,e,t,r){var a=ao(n,(function(n,r,a,i){var o=function(n,e){"function"!=typeof n&&(n=_i.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,r,a,i)})):t(o,r,a,i)}));return io(r?a.reverse():a)}function uo(n,e){if(e)return function(){return n.apply(e,arguments)}}lo.prototype.listen=function(n){this.cb=n},lo.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},lo.prototype.onError=function(n){this.errorCbs.push(n)},lo.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(to(n,Wi.redirected)&&i===Ha||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},lo.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!to(n)&&eo(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(Ka(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&Li(this.router,a,n,!1),s(((o=Yi(i=a,n,Wi.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),d=u.updated,p=u.deactivated,h=u.activated,f=[].concat(function(n){return co(n,"beforeRouteLeave",uo,!0)}(p),this.router.beforeHooks,function(n){return co(n,"beforeRouteUpdate",uo)}(d),h.map((function(n){return n.beforeEnter})),ro(h)),m=function(e,t){if(r.pending!==n)return s(Xi(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return Yi(n,e,Wi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):eo(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Zi(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ki(f,m,(function(){Ki(function(n){return co(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(h).concat(r.router.resolveHooks),m,(function(){if(r.pending!==n)return s(Xi(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Za(n)}))}))}))},lo.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},lo.prototype.setupListeners=function(){},lo.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Ha,this.pending=null};var po=function(n){function e(e,t){n.call(this,e,t),this._startLocation=ho(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Hi&&t;r&&this.listeners.push(Ri());var a=function(){var t=n.current,a=ho(n.base);n.current===Ha&&a===n._startLocation||n.transitionTo(a,(function(n){r&&Li(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ji(ei(r.base+n.fullPath)),Li(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Qi(ei(r.base+n.fullPath)),Li(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(ho(this.base)!==this.current.fullPath){var e=ei(this.base+this.current.fullPath);n?Ji(e):Qi(e)}},e.prototype.getCurrentLocation=function(){return ho(this.base)},e}(lo);function ho(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ei(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var fo=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=ho(n);if(!/^\/#/.test(e))return window.location.replace(ei(n+"/#"+e)),!0}(this.base)||mo()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Hi&&e;t&&this.listeners.push(Ri());var r=function(){var e=n.current;mo()&&n.transitionTo(go(),(function(r){t&&Li(n.router,r,e,!0),Hi||yo(r.fullPath)}))},a=Hi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){bo(n.fullPath),Li(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){yo(n.fullPath),Li(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;go()!==e&&(n?bo(e):yo(e))},e.prototype.getCurrentLocation=function(){return go()},e}(lo);function mo(){var n=go();return"/"===n.charAt(0)||(yo("/"+n),!1)}function go(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function vo(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function bo(n){Hi?Ji(vo(n)):window.location.hash=n}function yo(n){Hi?Qi(vo(n)):window.location.replace(vo(n))}var xo=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){to(n,Wi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(lo),_o=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ci(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Hi&&!1!==n.fallback,this.fallback&&(e="hash"),Ai||(e="abstract"),this.mode=e,e){case"history":this.history=new po(this,n.base);break;case"hash":this.history=new fo(this,n.base,this.fallback);break;case"abstract":this.history=new xo(this,n.base);break;default:0}},ko={currentRoute:{configurable:!0}};function wo(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}_o.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},ko.currentRoute.get=function(){return this.history&&this.history.current},_o.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof po||t instanceof fo){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;Hi&&a&&"fullPath"in n&&Li(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},_o.prototype.beforeEach=function(n){return wo(this.beforeHooks,n)},_o.prototype.beforeResolve=function(n){return wo(this.resolveHooks,n)},_o.prototype.afterEach=function(n){return wo(this.afterHooks,n)},_o.prototype.onReady=function(n,e){this.history.onReady(n,e)},_o.prototype.onError=function(n){this.history.onError(n)},_o.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},_o.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},_o.prototype.go=function(n){this.history.go(n)},_o.prototype.back=function(){this.go(-1)},_o.prototype.forward=function(){this.go(1)},_o.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},_o.prototype.resolve=function(n,e,t){var r=xi(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ei(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},_o.prototype.getRoutes=function(){return this.matcher.getRoutes()},_o.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Ha&&this.history.transitionTo(this.history.getCurrentLocation())},_o.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Ha&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(_o.prototype,ko),_o.install=function n(e){if(!n.installed||_i!==e){n.installed=!0,_i=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Xa),e.component("RouterLink",wi);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},_o.version="3.5.3",_o.isNavigationFailure=to,_o.NavigationFailureType=Wi,_o.START_LOCATION=Ha,Ai&&window.Vue&&window.Vue.use(_o);var Eo=_o;t(234),t(181),t(267),t(110),t(269),t(36),t(37),t(270);function Ao(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}var To=t(42),So=t(81),Co=(t(193),t(17),t(46),t(237),t(238),t(40),t(22),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,498))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,497))}}),jo={"v-33d41dc8":function(){return t.e(5).then(t.bind(null,499))},"v-4a329adb":function(){return t.e(6).then(t.bind(null,500))},"v-3627498e":function(){return t.e(7).then(t.bind(null,501))},"v-6b80e628":function(){return t.e(8).then(t.bind(null,502))},"v-9f7495e6":function(){return t.e(9).then(t.bind(null,503))},"v-6d7fe766":function(){return t.e(10).then(t.bind(null,504))},"v-12a76ac5":function(){return t.e(11).then(t.bind(null,505))},"v-5e7d1eae":function(){return t.e(12).then(t.bind(null,506))},"v-7fecede3":function(){return t.e(13).then(t.bind(null,507))},"v-6fa5aec8":function(){return t.e(14).then(t.bind(null,508))},"v-a7964952":function(){return t.e(15).then(t.bind(null,509))},"v-8c35a806":function(){return t.e(16).then(t.bind(null,510))},"v-31dd3304":function(){return t.e(17).then(t.bind(null,511))},"v-60f202ee":function(){return t.e(18).then(t.bind(null,512))},"v-1ac0f3f3":function(){return t.e(19).then(t.bind(null,513))},"v-40830164":function(){return t.e(20).then(t.bind(null,514))},"v-c69e6f38":function(){return t.e(21).then(t.bind(null,515))},"v-6901ab76":function(){return t.e(22).then(t.bind(null,516))},"v-67b11051":function(){return t.e(24).then(t.bind(null,517))},"v-e20a2f9c":function(){return t.e(25).then(t.bind(null,518))},"v-0b408b65":function(){return t.e(26).then(t.bind(null,519))},"v-3a10b989":function(){return t.e(27).then(t.bind(null,520))},"v-87435aee":function(){return t.e(28).then(t.bind(null,521))},"v-1166401c":function(){return t.e(23).then(t.bind(null,522))},"v-1f7222d7":function(){return t.e(29).then(t.bind(null,523))},"v-aed71ebe":function(){return t.e(30).then(t.bind(null,524))},"v-0557ab18":function(){return t.e(31).then(t.bind(null,525))},"v-46e06398":function(){return t.e(32).then(t.bind(null,526))},"v-1c172bbb":function(){return t.e(33).then(t.bind(null,527))},"v-7e44e81b":function(){return t.e(34).then(t.bind(null,528))},"v-b1f1e048":function(){return t.e(35).then(t.bind(null,529))},"v-6488d07c":function(){return t.e(36).then(t.bind(null,530))},"v-4a18d7fc":function(){return t.e(37).then(t.bind(null,531))},"v-02156f86":function(){return t.e(38).then(t.bind(null,532))},"v-d42d859a":function(){return t.e(39).then(t.bind(null,533))},"v-28118ddf":function(){return t.e(40).then(t.bind(null,534))},"v-aa824af0":function(){return t.e(41).then(t.bind(null,535))},"v-53e2808a":function(){return t.e(42).then(t.bind(null,536))},"v-37b14583":function(){return t.e(43).then(t.bind(null,537))},"v-3eaebf16":function(){return t.e(44).then(t.bind(null,538))},"v-62f31d68":function(){return t.e(45).then(t.bind(null,539))},"v-03b93eb2":function(){return t.e(46).then(t.bind(null,540))},"v-2eb0b0ea":function(){return t.e(47).then(t.bind(null,541))},"v-e6b0d9dc":function(){return t.e(49).then(t.bind(null,542))},"v-e6126e6e":function(){return t.e(50).then(t.bind(null,543))},"v-5ed32899":function(){return t.e(48).then(t.bind(null,544))},"v-695a399e":function(){return t.e(51).then(t.bind(null,545))},"v-e618cdc6":function(){return t.e(52).then(t.bind(null,546))},"v-4b5192a6":function(){return t.e(53).then(t.bind(null,547))},"v-a3bcbd24":function(){return t.e(54).then(t.bind(null,548))},"v-15f02c2b":function(){return t.e(55).then(t.bind(null,549))},"v-6b29efa8":function(){return t.e(56).then(t.bind(null,550))},"v-e32e9ca0":function(){return t.e(57).then(t.bind(null,551))},"v-eb618af4":function(){return t.e(58).then(t.bind(null,552))},"v-522398cf":function(){return t.e(59).then(t.bind(null,553))},"v-182434ca":function(){return t.e(60).then(t.bind(null,554))},"v-d8432bb6":function(){return t.e(61).then(t.bind(null,555))},"v-71af77ce":function(){return t.e(62).then(t.bind(null,556))},"v-1cc965f3":function(){return t.e(63).then(t.bind(null,557))},"v-46df2ec5":function(){return t.e(64).then(t.bind(null,558))},"v-c2b6ac38":function(){return t.e(65).then(t.bind(null,559))},"v-7f5d7911":function(){return t.e(66).then(t.bind(null,560))},"v-29813f1e":function(){return t.e(67).then(t.bind(null,561))},"v-2be6fdcc":function(){return t.e(68).then(t.bind(null,562))},"v-569bd8d0":function(){return t.e(69).then(t.bind(null,563))},"v-24deae09":function(){return t.e(70).then(t.bind(null,564))},"v-64e6777b":function(){return t.e(71).then(t.bind(null,565))},"v-26bc51ec":function(){return t.e(72).then(t.bind(null,566))},"v-9cb1d18a":function(){return t.e(73).then(t.bind(null,567))},"v-53104ef6":function(){return t.e(74).then(t.bind(null,568))},"v-1a9d53e5":function(){return t.e(75).then(t.bind(null,569))},"v-150b83f6":function(){return t.e(76).then(t.bind(null,570))},"v-a113e2c4":function(){return t.e(77).then(t.bind(null,571))}};function Io(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var zo=/-(\w)/g,Po=Io((function(n){return n.replace(zo,(function(n,e){return e?e.toUpperCase():""}))})),Oo=/\B([A-Z])/g,Mo=Io((function(n){return n.replace(Oo,"-$1").toLowerCase()})),Bo=Io((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Ro(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Bo(Po(e))):n(Bo(e))||n(Mo(e))}var Lo=Object.assign({},Co,jo),qo=function(n){return Lo[n]},Do=function(n){return jo[n]},$o=function(n){return Co[n]},No=function(n){return Oa.component(n)};function Uo(n){return Ro(Do,n)}function Fo(n){return Ro($o,n)}function Go(n){return Ro(qo,n)}function Vo(n){return Ro(No,n)}function Ho(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Vo(e)||!Go(e)){n.next=5;break}return n.next=3,Go(e)();case 3:t=n.sent,Oa.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Jo(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Qo=t(143),Ko=(t(130),t(118),t(83),t(225)),Wo=t.n(Ko),Zo=t(226),Xo=t.n(Zo),Yo={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Qo.a)(n,1)[0]})).map((function(n){var e=Object(Qo.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Xo()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(So.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Wo()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(So.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(144);var as=t(155),is={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(as)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,o=0;o<t.length;o++){var s=t[o],l=t[o+1],c=0===o&&0===r||r>=s.parentElement.offsetTop+10&&(!l||r<l.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(c&&u!==decodeURIComponent(s.hash)){var d=s;if(i===a)for(var p=o+1;p<t.length;p++)if(u===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(d.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},os=(t(87),t(107)),ss=t.n(os),ls={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Oa.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(45),t(59),t(65),t(384);function cs(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(147);function us(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ds(n,e,t){return e&&us(n.prototype,e),t&&us(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(385);var ps=function(){function n(){cs(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ds(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,a=n.duration,i=void 0===a?3e3:a,o=document.createElement("div");o.className="message move-in",o.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(o),i>0&&setTimeout((function(){e.close(o)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),hs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ps).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};t(240),t(108),t(109),t(145),t(215);!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var fs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},ms={},gs=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},vs=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:fs[n]},bs=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},ys=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},xs=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=gs(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(s.js,s.html);var l=vs("vue");return s.jsLib.unshift(l),s},_s=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},ks=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function ws(){var n=ys(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=ys(n,"vuepress-plugin-demo-block__code"),t=ys(n,"vuepress-plugin-demo-block__display"),r=ys(n,"vuepress-plugin-demo-block__footer"),a=ys(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:ks(n),htmlTpl:gs("")},o=vs("react"),s=vs("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?_s(i,o):xs(i,o),u=bs("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(u),u.addEventListener("click",Es.bind(null,u,l,e,r)),vs("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=a.concat(i).concat(vs("cssLib")).concat(vs("jsLib")).join(",");return bs("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),vs("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(vs("jsLib")).join(";"),css_external:i.concat(vs("cssLib")).join(";"),layout:vs("codepenLayout"),js_pre_processor:vs("codepenJsProcessor"),editors:vs("codepenEditors")});return bs("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==o.horizontal?o.horizontal:vs("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var d=e.firstChild.cloneNode(!0);d.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(d)}if(c.css&&function(n){if(!ms[n]){var e=bs("style",{innerHTML:n});document.body.appendChild(e),ms[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),a);else if("vue"===s){var p=(new(Vue.extend(c.script))).$mount();a.appendChild(p.$el)}else"vanilla"===s&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){ws()}),300)}function Es(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var As={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},ws()},updated:function(){ws()}},Ts=(t(229),"auto"),Ss="zoom-in",Cs="zoom-out",js="grab",Is="move";function zs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Ps(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Os(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ms(n,e,t){!function(n){var e=Bs,t=Rs;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Bs="transition",Rs="transform",Ls="transform",qs="transitionend";var Ds=function(){},$s={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ds,onClose:Ds,onGrab:Ds,onMove:Ds,onRelease:Ds,onBeforeOpen:Ds,onBeforeClose:Ds,onBeforeGrab:Ds,onBeforeRelease:Ds,onImageLoading:Ds,onImageLoaded:Ds},Ns={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Fs(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Us(n)&&!Fs(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Us(n)&&!Fs(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Us(n){return 0===n.button}function Fs(n){return n.metaKey||n.ctrlKey}var Gs={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ms(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),zs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ms(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Vs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Hs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Js=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Qs={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Os(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?js:Cs,transition:Ls+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ms(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ms(this.el,{transform:"none"})},grab:function(n,e,t){var r=Ks(),a=r.x-n,i=r.y-e;Ms(this.el,{cursor:Is,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Ks(),a=r.x-n,i=r.y-e;Ms(this.el,{transition:Ls,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ms(this.el,this.styleClose)},restoreOpenStyle:function(){Ms(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Ks(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Vs(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,l=Ks(),c={x:l.x-o,y:l.y-s},u=c.x/o,d=c.y/s,p=i+Math.min(u,d);if(a&&"string"==typeof a){var h=t||this.el.naturalWidth,f=e||this.el.naturalHeight,m=parseFloat(a)*h/(100*this.rect.width),g=parseFloat(a)*f/(100*this.rect.height);if(p>m||p>g)return{x:m,y:g}}return{x:p,y:p}}};function Ks(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ws(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){zs(n,r,e[r],t)}))}var Zs=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Qs),this.overlay=Object.create(Gs),this.handler=Object.create(Ns),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Js({},$s,e),this.overlay.init(this),this.handler.init(this)}return Hs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ss,zs(n,"click",this.handler.click),this.options.preloadImage&&Ps(Os(n)));return this}},{key:"config",value:function(n){return n?(Js(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Ps(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),zs(document,"scroll",this.handler.scroll),zs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&zs(window,"resize",this.handler.resizeWindow);var i=function n(){zs(r,qs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ws(document,e.handler,!0),t(r)};return zs(r,qs,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ts,this.overlay.fadeOut(),this.target.zoomOut(),zs(document,"scroll",this.handler.scroll,!1),zs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&zs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){zs(t,qs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ws(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return zs(t,qs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){zs(a,qs,n,!1),r(a)};return zs(a,qs,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Is,this.target.move(n,e,t);var a=this.target.el,i=function n(){zs(a,qs,n,!1),r(a)};return zs(a,qs,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ts,this.target.restoreOpenStyle();var r=function r(){zs(t,qs,r,!1),n.lock=!1,n.released=!0,e(t)};return zs(t,qs,r),this}}}]),n}(),Xs=".theme-vdoing-content img:not(.no-zoom)",Ys=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),nl=Number("500"),el=function(){function n(){cs(this,n),this.instance=new Zs(Ys)}return ds(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Xs;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Xs,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:nl;setTimeout((function(){return n.update(e)}),t)}}]),n}(),tl=[Yo,is,ls,hs,As,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new el,this.$vuepress.zooming.updateDelay()}}],rl={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Jo("layout",n),Oa.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},al=t(18),il=Object(al.a)(rl,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(So.a)(t));break;default:throw new Error("Unknown option name.")}}(il,"mixins",tl);var ol=[{name:"v-33d41dc8",path:"/pages/8611ff/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-33d41dc8").then(t)}},{path:"/pages/8611ff/index.html",redirect:"/pages/8611ff/"},{path:"/01.学习笔记/01.基础/03.概念.html",redirect:"/pages/8611ff/"},{name:"v-4a329adb",path:"/pages/e76e64/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-4a329adb").then(t)}},{path:"/pages/e76e64/index.html",redirect:"/pages/e76e64/"},{path:"/01.学习笔记/01.基础/100.常见基础问题.html",redirect:"/pages/e76e64/"},{name:"v-3627498e",path:"/pages/fbe426/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-3627498e").then(t)}},{path:"/pages/fbe426/index.html",redirect:"/pages/fbe426/"},{path:"/01.学习笔记/01.基础/101.常见系统问题.html",redirect:"/pages/fbe426/"},{name:"v-6b80e628",path:"/pages/b356cc/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6b80e628").then(t)}},{path:"/pages/b356cc/index.html",redirect:"/pages/b356cc/"},{path:"/01.学习笔记/01.基础/12.ThreadLocal.html",redirect:"/pages/b356cc/"},{name:"v-9f7495e6",path:"/pages/61751f/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-9f7495e6").then(t)}},{path:"/pages/61751f/index.html",redirect:"/pages/61751f/"},{path:"/01.学习笔记/01.基础/15.volatile关键字.html",redirect:"/pages/61751f/"},{name:"v-6d7fe766",path:"/pages/a27f33/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6d7fe766").then(t)}},{path:"/pages/a27f33/index.html",redirect:"/pages/a27f33/"},{path:"/01.学习笔记/01.基础/18.数据结构.html",redirect:"/pages/a27f33/"},{name:"v-12a76ac5",path:"/pages/745032/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-12a76ac5").then(t)}},{path:"/pages/745032/index.html",redirect:"/pages/745032/"},{path:"/01.学习笔记/01.基础/21.并发加锁.html",redirect:"/pages/745032/"},{name:"v-5e7d1eae",path:"/pages/136ae8/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-5e7d1eae").then(t)}},{path:"/pages/136ae8/index.html",redirect:"/pages/136ae8/"},{path:"/01.学习笔记/01.基础/24.多线程.html",redirect:"/pages/136ae8/"},{name:"v-7fecede3",path:"/pages/f8ee2e/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-7fecede3").then(t)}},{path:"/pages/f8ee2e/index.html",redirect:"/pages/f8ee2e/"},{path:"/01.学习笔记/01.基础/70.设计模式.html",redirect:"/pages/f8ee2e/"},{name:"v-6fa5aec8",path:"/pages/ed0ace/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6fa5aec8").then(t)}},{path:"/pages/ed0ace/index.html",redirect:"/pages/ed0ace/"},{path:"/01.学习笔记/05.JVM/30.内存模型.html",redirect:"/pages/ed0ace/"},{name:"v-a7964952",path:"/pages/d8d213/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-a7964952").then(t)}},{path:"/pages/d8d213/index.html",redirect:"/pages/d8d213/"},{path:"/01.学习笔记/05.JVM/33.类加载.html",redirect:"/pages/d8d213/"},{name:"v-8c35a806",path:"/pages/16dbc6/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-8c35a806").then(t)}},{path:"/pages/16dbc6/index.html",redirect:"/pages/16dbc6/"},{path:"/01.学习笔记/05.JVM/36.虚拟机对象.html",redirect:"/pages/16dbc6/"},{name:"v-31dd3304",path:"/pages/c026dc/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-31dd3304").then(t)}},{path:"/pages/c026dc/index.html",redirect:"/pages/c026dc/"},{path:"/01.学习笔记/05.JVM/39.垃圾回收.html",redirect:"/pages/c026dc/"},{name:"v-60f202ee",path:"/pages/cc9ed4/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-60f202ee").then(t)}},{path:"/pages/cc9ed4/index.html",redirect:"/pages/cc9ed4/"},{path:"/01.学习笔记/05.JVM/42.工具命令.html",redirect:"/pages/cc9ed4/"},{name:"v-1ac0f3f3",path:"/pages/445465/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1ac0f3f3").then(t)}},{path:"/pages/445465/index.html",redirect:"/pages/445465/"},{path:"/01.学习笔记/05.JVM/45.配置示例.html",redirect:"/pages/445465/"},{name:"v-40830164",path:"/pages/f3f573/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-40830164").then(t)}},{path:"/pages/f3f573/index.html",redirect:"/pages/f3f573/"},{path:"/01.学习笔记/07.Spring/73.SpringMVC.html",redirect:"/pages/f3f573/"},{name:"v-c69e6f38",path:"/pages/d4c31c/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-c69e6f38").then(t)}},{path:"/pages/d4c31c/index.html",redirect:"/pages/d4c31c/"},{path:"/01.学习笔记/07.Spring/76.Spring.html",redirect:"/pages/d4c31c/"},{name:"v-6901ab76",path:"/pages/fb83f0/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6901ab76").then(t)}},{path:"/pages/fb83f0/index.html",redirect:"/pages/fb83f0/"},{path:"/01.学习笔记/07.Spring/79.Mybatis.html",redirect:"/pages/fb83f0/"},{name:"v-67b11051",path:"/pages/ce06ac/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-67b11051").then(t)}},{path:"/pages/ce06ac/index.html",redirect:"/pages/ce06ac/"},{path:"/01.学习笔记/10.Redis/103.位图|布隆.html",redirect:"/pages/ce06ac/"},{name:"v-e20a2f9c",path:"/pages/83dde6/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-e20a2f9c").then(t)}},{path:"/pages/83dde6/index.html",redirect:"/pages/83dde6/"},{path:"/01.学习笔记/10.Redis/106.过期删除.html",redirect:"/pages/83dde6/"},{name:"v-0b408b65",path:"/pages/55dced/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-0b408b65").then(t)}},{path:"/pages/55dced/index.html",redirect:"/pages/55dced/"},{path:"/01.学习笔记/10.Redis/109.持久化.html",redirect:"/pages/55dced/"},{name:"v-3a10b989",path:"/pages/64119e/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-3a10b989").then(t)}},{path:"/pages/64119e/index.html",redirect:"/pages/64119e/"},{path:"/01.学习笔记/10.Redis/112.缓存雪崩|击穿|穿透.html",redirect:"/pages/64119e/"},{name:"v-87435aee",path:"/pages/aa0d2f/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-87435aee").then(t)}},{path:"/pages/aa0d2f/index.html",redirect:"/pages/aa0d2f/"},{path:"/01.学习笔记/10.Redis/115.集群.html",redirect:"/pages/aa0d2f/"},{name:"v-1166401c",path:"/pages/6ff65b/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1166401c").then(t)}},{path:"/pages/6ff65b/index.html",redirect:"/pages/6ff65b/"},{path:"/01.学习笔记/10.Redis/100.基础.html",redirect:"/pages/6ff65b/"},{name:"v-1f7222d7",path:"/pages/b2f2fe/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1f7222d7").then(t)}},{path:"/pages/b2f2fe/index.html",redirect:"/pages/b2f2fe/"},{path:"/01.学习笔记/10.Redis/118.Redisson分布式锁.html",redirect:"/pages/b2f2fe/"},{name:"v-aed71ebe",path:"/pages/8f7c47/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-aed71ebe").then(t)}},{path:"/pages/8f7c47/index.html",redirect:"/pages/8f7c47/"},{path:"/01.学习笔记/15.消息中间件/153.理论概念.html",redirect:"/pages/8f7c47/"},{name:"v-0557ab18",path:"/pages/9eb6ed/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-0557ab18").then(t)}},{path:"/pages/9eb6ed/index.html",redirect:"/pages/9eb6ed/"},{path:"/01.学习笔记/15.消息中间件/156.Kafka.html",redirect:"/pages/9eb6ed/"},{name:"v-46e06398",path:"/pages/c1ac33/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-46e06398").then(t)}},{path:"/pages/c1ac33/index.html",redirect:"/pages/c1ac33/"},{path:"/01.学习笔记/15.消息中间件/159.RabbitMQ.html",redirect:"/pages/c1ac33/"},{name:"v-1c172bbb",path:"/pages/b7bb53/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1c172bbb").then(t)}},{path:"/pages/b7bb53/index.html",redirect:"/pages/b7bb53/"},{path:"/01.学习笔记/20.持久化/203.数据库设计三大范式.html",redirect:"/pages/b7bb53/"},{name:"v-7e44e81b",path:"/pages/a37446/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-7e44e81b").then(t)}},{path:"/pages/a37446/index.html",redirect:"/pages/a37446/"},{path:"/01.学习笔记/20.持久化/206.执行计划Explain.html",redirect:"/pages/a37446/"},{name:"v-b1f1e048",path:"/pages/391bcd/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-b1f1e048").then(t)}},{path:"/pages/391bcd/index.html",redirect:"/pages/391bcd/"},{path:"/01.学习笔记/20.持久化/209.索引.html",redirect:"/pages/391bcd/"},{name:"v-6488d07c",path:"/pages/904632/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6488d07c").then(t)}},{path:"/pages/904632/index.html",redirect:"/pages/904632/"},{path:"/01.学习笔记/20.持久化/212.事务.html",redirect:"/pages/904632/"},{name:"v-4a18d7fc",path:"/pages/d9091c/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-4a18d7fc").then(t)}},{path:"/pages/d9091c/index.html",redirect:"/pages/d9091c/"},{path:"/01.学习笔记/20.持久化/215.数据库锁.html",redirect:"/pages/d9091c/"},{name:"v-02156f86",path:"/pages/649d86/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-02156f86").then(t)}},{path:"/pages/649d86/index.html",redirect:"/pages/649d86/"},{path:"/01.学习笔记/20.持久化/250.Elasticsearch.html",redirect:"/pages/649d86/"},{name:"v-d42d859a",path:"/pages/86f5d7/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-d42d859a").then(t)}},{path:"/pages/86f5d7/index.html",redirect:"/pages/86f5d7/"},{path:"/01.学习笔记/40.算法/403.排序算法.html",redirect:"/pages/86f5d7/"},{name:"v-28118ddf",path:"/pages/4245a9/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-28118ddf").then(t)}},{path:"/pages/4245a9/index.html",redirect:"/pages/4245a9/"},{path:"/01.学习笔记/40.算法/406.场景题.html",redirect:"/pages/4245a9/"},{name:"v-aa824af0",path:"/pages/86a1eb/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-aa824af0").then(t)}},{path:"/pages/86a1eb/index.html",redirect:"/pages/86a1eb/"},{path:"/01.学习笔记/50.网络/503.网络模型.html",redirect:"/pages/86a1eb/"},{name:"v-53e2808a",path:"/pages/dcc15b/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-53e2808a").then(t)}},{path:"/pages/dcc15b/index.html",redirect:"/pages/dcc15b/"},{path:"/01.学习笔记/50.网络/506.HTTPS.html",redirect:"/pages/dcc15b/"},{name:"v-37b14583",path:"/pages/73d39c/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-37b14583").then(t)}},{path:"/pages/73d39c/index.html",redirect:"/pages/73d39c/"},{path:"/01.学习笔记/50.网络/509.TCP交互.html",redirect:"/pages/73d39c/"},{name:"v-3eaebf16",path:"/pages/97f034/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-3eaebf16").then(t)}},{path:"/pages/97f034/index.html",redirect:"/pages/97f034/"},{path:"/01.学习笔记/50.网络/512.代理.html",redirect:"/pages/97f034/"},{name:"v-62f31d68",path:"/pages/427643/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-62f31d68").then(t)}},{path:"/pages/427643/index.html",redirect:"/pages/427643/"},{path:"/01.学习笔记/60.系统架构/02.架构设计.html",redirect:"/pages/427643/"},{name:"v-03b93eb2",path:"/pages/c0fe60/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-03b93eb2").then(t)}},{path:"/pages/c0fe60/index.html",redirect:"/pages/c0fe60/"},{path:"/01.学习笔记/60.系统架构/603.分布式.html",redirect:"/pages/c0fe60/"},{name:"v-2eb0b0ea",path:"/pages/68d51a/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-2eb0b0ea").then(t)}},{path:"/pages/68d51a/index.html",redirect:"/pages/68d51a/"},{path:"/01.学习笔记/60.系统架构/606.机器评估.html",redirect:"/pages/68d51a/"},{name:"v-e6b0d9dc",path:"/pages/6e6e98/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-e6b0d9dc").then(t)}},{path:"/pages/6e6e98/index.html",redirect:"/pages/6e6e98/"},{path:"/02.技术应用/01.工作杂货/02.ES查询压测.html",redirect:"/pages/6e6e98/"},{name:"v-e6126e6e",path:"/pages/41333d/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-e6126e6e").then(t)}},{path:"/pages/41333d/index.html",redirect:"/pages/41333d/"},{path:"/02.技术应用/01.工作杂货/03.阿尔萨斯(Arthas).html",redirect:"/pages/41333d/"},{name:"v-5ed32899",path:"/pages/f811c1/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-5ed32899").then(t)}},{path:"/pages/f811c1/index.html",redirect:"/pages/f811c1/"},{path:"/02.技术应用/01.工作杂货/01.Jprofiler排查.html",redirect:"/pages/f811c1/"},{name:"v-695a399e",path:"/pages/67b177/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-695a399e").then(t)}},{path:"/pages/67b177/index.html",redirect:"/pages/67b177/"},{path:"/02.技术应用/01.工作杂货/07.定时任务.html",redirect:"/pages/67b177/"},{name:"v-e618cdc6",path:"/pages/165fe3/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-e618cdc6").then(t)}},{path:"/pages/165fe3/index.html",redirect:"/pages/165fe3/"},{path:"/02.技术应用/01.工作杂货/09.DruidDataSource配置.html",redirect:"/pages/165fe3/"},{name:"v-4b5192a6",path:"/pages/c3ec16/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-4b5192a6").then(t)}},{path:"/pages/c3ec16/index.html",redirect:"/pages/c3ec16/"},{path:"/02.技术应用/01.工作杂货/11.Spring Cloud Stream.html",redirect:"/pages/c3ec16/"},{name:"v-a3bcbd24",path:"/pages/a2ebd4/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-a3bcbd24").then(t)}},{path:"/pages/a2ebd4/index.html",redirect:"/pages/a2ebd4/"},{path:"/02.技术应用/01.工作杂货/13.线上Tomcat配置参考.html",redirect:"/pages/a2ebd4/"},{name:"v-15f02c2b",path:"/pages/b3856c/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-15f02c2b").then(t)}},{path:"/pages/b3856c/index.html",redirect:"/pages/b3856c/"},{path:"/02.技术应用/01.工作杂货/30.Java代码杂记.html",redirect:"/pages/b3856c/"},{name:"v-6b29efa8",path:"/pages/94c02c/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-6b29efa8").then(t)}},{path:"/pages/94c02c/index.html",redirect:"/pages/94c02c/"},{path:"/02.技术应用/01.工作杂货/33.SQL脚本杂记.html",redirect:"/pages/94c02c/"},{name:"v-e32e9ca0",path:"/pages/1cacdd/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-e32e9ca0").then(t)}},{path:"/pages/1cacdd/index.html",redirect:"/pages/1cacdd/"},{path:"/02.技术应用/01.工作杂货/50.批量算费本地工具类.html",redirect:"/pages/1cacdd/"},{name:"v-eb618af4",path:"/pages/87ba0f/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-eb618af4").then(t)}},{path:"/pages/87ba0f/index.html",redirect:"/pages/87ba0f/"},{path:"/02.技术应用/01.工作杂货/53.Apollo配置模糊查询.html",redirect:"/pages/87ba0f/"},{name:"v-522398cf",path:"/pages/8fe4ca/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-522398cf").then(t)}},{path:"/pages/8fe4ca/index.html",redirect:"/pages/8fe4ca/"},{path:"/02.技术应用/01.工作杂货/70.开发问题记录.html",redirect:"/pages/8fe4ca/"},{name:"v-182434ca",path:"/pages/4a8a37/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-182434ca").then(t)}},{path:"/pages/4a8a37/index.html",redirect:"/pages/4a8a37/"},{path:"/02.技术应用/01.工作杂货/99.机器配置参考.html",redirect:"/pages/4a8a37/"},{name:"v-d8432bb6",path:"/pages/43b3b2/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-d8432bb6").then(t)}},{path:"/pages/43b3b2/index.html",redirect:"/pages/43b3b2/"},{path:"/02.技术应用/03.技巧备忘/00.IntelliJ IDEA.html",redirect:"/pages/43b3b2/"},{name:"v-71af77ce",path:"/pages/82c18a/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-71af77ce").then(t)}},{path:"/pages/82c18a/index.html",redirect:"/pages/82c18a/"},{path:"/02.技术应用/03.技巧备忘/06.Git其他仓库分支合并.html",redirect:"/pages/82c18a/"},{name:"v-1cc965f3",path:"/pages/f739c1/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1cc965f3").then(t)}},{path:"/pages/f739c1/index.html",redirect:"/pages/f739c1/"},{path:"/02.技术应用/03.技巧备忘/09.Mac新建软连接.html",redirect:"/pages/f739c1/"},{name:"v-46df2ec5",path:"/pages/31c6f3/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-46df2ec5").then(t)}},{path:"/pages/31c6f3/index.html",redirect:"/pages/31c6f3/"},{path:"/02.技术应用/03.技巧备忘/12.Nginx安装.html",redirect:"/pages/31c6f3/"},{name:"v-c2b6ac38",path:"/pages/b6ebf4/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-c2b6ac38").then(t)}},{path:"/pages/b6ebf4/index.html",redirect:"/pages/b6ebf4/"},{path:"/02.技术应用/03.技巧备忘/15.SSH连接Github仓库.html",redirect:"/pages/b6ebf4/"},{name:"v-7f5d7911",path:"/pages/685cf3/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-7f5d7911").then(t)}},{path:"/pages/685cf3/index.html",redirect:"/pages/685cf3/"},{path:"/02.技术应用/03.技巧备忘/60.博客构建.html",redirect:"/pages/685cf3/"},{name:"v-29813f1e",path:"/pages/8292d8/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-29813f1e").then(t)}},{path:"/pages/8292d8/index.html",redirect:"/pages/8292d8/"},{path:"/02.技术应用/07.手册教程/00.常用Git命令清单.html",redirect:"/pages/8292d8/"},{name:"v-2be6fdcc",path:"/pages/4e8444e2d534d14f/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-2be6fdcc").then(t)}},{path:"/pages/4e8444e2d534d14f/index.html",redirect:"/pages/4e8444e2d534d14f/"},{path:"/02.技术应用/07.手册教程/02.Yaml语言教程.html",redirect:"/pages/4e8444e2d534d14f/"},{name:"v-569bd8d0",path:"/pages/035670/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-569bd8d0").then(t)}},{path:"/pages/035670/index.html",redirect:"/pages/035670/"},{path:"/02.技术应用/07.手册教程/04.Jenkins教程.html",redirect:"/pages/035670/"},{name:"v-24deae09",path:"/pages/bcce0d/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-24deae09").then(t)}},{path:"/pages/bcce0d/index.html",redirect:"/pages/bcce0d/"},{path:"/03.流程规范/01.工作协同/03.代码版本管理.html",redirect:"/pages/bcce0d/"},{name:"v-64e6777b",path:"/pages/aaac48/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-64e6777b").then(t)}},{path:"/pages/aaac48/index.html",redirect:"/pages/aaac48/"},{path:"/03.流程规范/01.工作协同/06.工作流程.html",redirect:"/pages/aaac48/"},{name:"v-26bc51ec",path:"/pages/35e7ea/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-26bc51ec").then(t)}},{path:"/pages/35e7ea/index.html",redirect:"/pages/35e7ea/"},{path:"/03.流程规范/01.工作协同/09.发版流程.html",redirect:"/pages/35e7ea/"},{name:"v-9cb1d18a",path:"/friends/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-9cb1d18a").then(t)}},{path:"/friends/index.html",redirect:"/friends/"},{path:"/04.更多/99.更多.html",redirect:"/friends/"},{name:"v-53104ef6",path:"/archives/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-53104ef6").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-1a9d53e5",path:"/categories/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-1a9d53e5").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-150b83f6",path:"/tags/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-150b83f6").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-a113e2c4",path:"/",component:il,beforeEnter:function(n,e,t){Ho("Layout","v-a113e2c4").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:il}],sl={title:"",description:"",base:"/",headTags:[["link",{rel:"icon",href:"/img/star.png"}],["meta",{name:"keywords",content:"后端博客,个人技术博客,技术文档,学习,Java,mysql,ES,Oracle,K8S,jenkins,docker,jvm,spring cloud,git,github,markdown"}],["meta",{name:"baidu-site-verification",content:"7F55weZDDc"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"理论概念",frontmatter:{title:"理论概念",date:"2022-05-06T21:19:13.000Z",permalink:"/pages/8611ff/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/03.%E6%A6%82%E5%BF%B5.html",relativePath:"01.学习笔记/01.基础/03.概念.md",key:"v-33d41dc8",path:"/pages/8611ff/",headers:[{level:2,title:"面向对象设计原则",slug:"面向对象设计原则",normalizedTitle:"面向对象设计原则",charIndex:2},{level:3,title:"开闭原则",slug:"开闭原则",normalizedTitle:"开闭原则",charIndex:15},{level:3,title:"依赖导致原则",slug:"依赖导致原则",normalizedTitle:"依赖导致原则",charIndex:76},{level:3,title:"单一职责原则",slug:"单一职责原则",normalizedTitle:"单一职责原则",charIndex:171},{level:3,title:"接口隔离原则",slug:"接口隔离原则",normalizedTitle:"接口隔离原则",charIndex:207},{level:3,title:"最少知道原则",slug:"最少知道原则",normalizedTitle:"最少知道原则",charIndex:245},{level:3,title:"合成复用原则",slug:"合成复用原则",normalizedTitle:"合成复用原则",charIndex:295},{level:3,title:"里氏替换原则",slug:"里氏替换原则",normalizedTitle:"里氏替换原则",charIndex:332}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"面向对象设计原则 开闭原则 依赖导致原则 单一职责原则 接口隔离原则 最少知道原则 合成复用原则 里氏替换原则",content:"# 面向对象设计原则\n\n\n# 开闭原则\n\n对扩展开放，对修改关闭。 极端要求就是：程序完成后，除非是修改错误，不然不能修改代码，只能扩展代码。\n\n\n# 依赖导致原则\n\n调用者（客户代码）不依赖于被调用者（实现代码）的实现细节，而是依赖其抽象 调用者不依赖被调用者的具体实现，而是依赖被调用者的抽象，这样被调用者后续可以被无感替换掉。\n\n\n# 单一职责原则\n\n一个类，最好只做一件事，只有一个引起它的变化。\n\n\n# 接口隔离原则\n\n使用多个小的专门的接口，而不要使用一个大的总接口。\n\n\n# 最少知道原则\n\n一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n\n# 合成复用原则\n\n原则是尽量使用合成/聚合的方式，而不是使用继承。\n\n\n# 里氏替换原则\n\n子类必须能够替换其基类。 类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。",normalizedContent:"# 面向对象设计原则\n\n\n# 开闭原则\n\n对扩展开放，对修改关闭。 极端要求就是：程序完成后，除非是修改错误，不然不能修改代码，只能扩展代码。\n\n\n# 依赖导致原则\n\n调用者（客户代码）不依赖于被调用者（实现代码）的实现细节，而是依赖其抽象 调用者不依赖被调用者的具体实现，而是依赖被调用者的抽象，这样被调用者后续可以被无感替换掉。\n\n\n# 单一职责原则\n\n一个类，最好只做一件事，只有一个引起它的变化。\n\n\n# 接口隔离原则\n\n使用多个小的专门的接口，而不要使用一个大的总接口。\n\n\n# 最少知道原则\n\n一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n\n# 合成复用原则\n\n原则是尽量使用合成/聚合的方式，而不是使用继承。\n\n\n# 里氏替换原则\n\n子类必须能够替换其基类。 类b继承类a时，除添加新的方法完成新增功能p2外，尽量不要重写父类a的方法，也尽量不要重载父类a的方法。",charsets:{cjk:!0}},{title:"常见基础问题",frontmatter:{title:"常见基础问题",date:"2022-05-06T21:42:50.000Z",permalink:"/pages/e76e64/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/100.%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98.html",relativePath:"01.学习笔记/01.基础/100.常见基础问题.md",key:"v-4a329adb",path:"/pages/e76e64/",headers:[{level:2,title:"equals和==区别？",slug:"equals和-区别",normalizedTitle:"equals和==区别？",charIndex:2},{level:2,title:"java抽象类？",slug:"java抽象类",normalizedTitle:"java抽象类？",charIndex:312},{level:2,title:"深拷贝和浅拷贝的区别？",slug:"深拷贝和浅拷贝的区别",normalizedTitle:"深拷贝和浅拷贝的区别？",charIndex:464},{level:2,title:"java是值传递还是引用传递？",slug:"java是值传递还是引用传递",normalizedTitle:"java是值传递还是引用传递？",charIndex:567},{level:2,title:"为什么重写equals还要重写hashcode？",slug:"为什么重写equals还要重写hashcode",normalizedTitle:"为什么重写equals还要重写hashcode？",charIndex:661},{level:2,title:"wait()等函数定义在Object中，而不是Thread中？",slug:"wait-等函数定义在object中-而不是thread中",normalizedTitle:"wait()等函数定义在object中，而不是thread中？",charIndex:820},{level:2,title:"Java中的object九大方法？",slug:"java中的object九大方法",normalizedTitle:"java中的object九大方法？",charIndex:891},{level:2,title:"AOP比较？",slug:"aop比较",normalizedTitle:"aop比较？",charIndex:1437},{level:2,title:"sleep()方法和wait()方法区别和共同点?",slug:"sleep-方法和wait-方法区别和共同点",normalizedTitle:"sleep()方法和wait()方法区别和共同点?",charIndex:1723}],excerpt:'<h2 id="equals和-区别"><a class="header-anchor" href="#equals和-区别">#</a> equals和==区别？</h2>\n<p>首先明确一点，equals是方法，==是操作符。</p>\n<p><strong>1. 如果比较的是基本数据类型：</strong></p>\n<p>只讨论==，因为equals是不存在的，因为java中基本数据类型不能调用method的。</p>\n<p><strong>2. 如果比较的是引用类型：</strong></p>\n<p>**==：**比较两个引用是不是指向同一个对象实例，即相同的地址。</p>\n<p>**equals：**equals方法是Object类的方法，默认是直接调用==来实现。如果没有被重写，那么调用equals与==没有区别。但是，在一些类库中这个方法被覆盖了，比如八大基本数据类型的包装类和String类，它们的equals方法比较的是值是否相同，此时equals就与==有区别了。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"equals和==区别？ java抽象类？ 深拷贝和浅拷贝的区别？ java是值传递还是引用传递？ 为什么重写equals还要重写hashcode？ wait()等函数定义在Object中，而不是Thread中？ Java中的object九大方法？ AOP比较？ sleep()方法和wait()方法区别和共同点?",content:"# equals和==区别？\n\n首先明确一点，equals是方法，==是操作符。\n\n1. 如果比较的是基本数据类型：\n\n只讨论==，因为equals是不存在的，因为java中基本数据类型不能调用method的。\n\n2. 如果比较的是引用类型：\n\n**==：**比较两个引用是不是指向同一个对象实例，即相同的地址。\n\n**equals：**equals方法是Object类的方法，默认是直接调用==来实现。如果没有被重写，那么调用equals与==没有区别。但是，在一些类库中这个方法被覆盖了，比如八大基本数据类型的包装类和String类，它们的equals方法比较的是值是否相同，此时equals就与==有区别了。\n\n\n# java抽象类？\n\n1.抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。\n\n2.由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。\n\n3.在Java中抽象类表示的是继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\n\n# 深拷贝和浅拷贝的区别？\n\n拷贝针对的是引用对象的拷贝。\n\n浅拷贝只复制指向某个对象的引用，不复制内存本身，新旧对象还是共享同一块内存。\n\n深拷贝会复制一个一模一样的对象，新对象跟原对象不共享内存。\n\n\n# java是值传递还是引用传递？\n\n形式参数为基本数据类型的，就是值传递，如果为引用数据类型就是引用传递。\n\nJava中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。\n\n\n# 为什么重写equals还要重写hashcode？\n\n如：重写一个自定义类的equals可以实现我们的意图，即这两个类判断为相等，但它们的hashcode是不同的。\n\n如果我们用hashset去add的时候，由于底层是通过hashcode判断是不是同一对象，这个时候不重写hashcode就会被判断成不同对象。\n\n\n# wait()等函数定义在Object中，而不是Thread中？\n\n锁可以是任意对象，所以任意对象调用方法一定定义在Object类中。\n\n\n# Java中的object九大方法？\n\nprotected Object clone() 创建并返回此对象的一个副本。\n\nboolean equals(Object obj) 指示某个其他对象是否与此对象“相等”。\n\nprotected void finalize() 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。\n\nClass<? extendsObject> getClass() 返回一个对象的运行时类。\n\nint hashCode() 返回该对象的哈希码值。\n\nvoid notify() 唤醒在此对象监视器上等待的单个线程。\n\nvoid notifyAll() 唤醒在此对象监视器上等待的所有线程。\n\nString toString() 返回该对象的字符串表示。\n\nvoid wait() 导致当前的线程等待，直到其他线程调用此对象的notify()方法或notifyAll() 方法。\n\nvoid wait(long timeout) 导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或\n\nvoid wait(long timeout, int nanos) 导致当前的线程等待，直到其他线程调用此对象的 notify()\n\n\n# AOP比较？\n\n1.AspectJ使用编译时和class文件加载时织入时，Spring AOP利用运行时织入。\n\n2.Spring aop是基于代理的aop框架。这意味着, 要实现目标对象的各个方面, 它将创建该对象的代理。\n\n使用以下两种方法之一实现:\n\n1）JDK 动态代理 —— Spring AOP 的首选方式。只要目标对象实现甚至一个接口, 就会使用 JDK 动态代理；\n\n2）CGLIB 代理 —— 如果目标对象没有实现接口, 则可以使用 CGLIB 代理。\n\n3. AspectJ在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的。\n\n\n# sleep()方法和wait()方法区别和共同点?\n\n1.两者最主要的区别在于：**sleep() 方法没有释放锁，而 wait() 方法释放了锁** 。\n\n2.两者都可以暂停线程的执行。\n\n3.wait() 通常被用于线程间交互/通信，sleep() 通常被用于暂停执行。\n\n4.wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。sleep() 方法执行完成后，线程会自动苏醒。或者可以使用 wait(long timeout) 超时后线程会自动苏醒。",normalizedContent:"# equals和==区别？\n\n首先明确一点，equals是方法，==是操作符。\n\n1. 如果比较的是基本数据类型：\n\n只讨论==，因为equals是不存在的，因为java中基本数据类型不能调用method的。\n\n2. 如果比较的是引用类型：\n\n**==：**比较两个引用是不是指向同一个对象实例，即相同的地址。\n\n**equals：**equals方法是object类的方法，默认是直接调用==来实现。如果没有被重写，那么调用equals与==没有区别。但是，在一些类库中这个方法被覆盖了，比如八大基本数据类型的包装类和string类，它们的equals方法比较的是值是否相同，此时equals就与==有区别了。\n\n\n# java抽象类？\n\n1.抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。\n\n2.由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。\n\n3.在java中抽象类表示的是继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\n\n# 深拷贝和浅拷贝的区别？\n\n拷贝针对的是引用对象的拷贝。\n\n浅拷贝只复制指向某个对象的引用，不复制内存本身，新旧对象还是共享同一块内存。\n\n深拷贝会复制一个一模一样的对象，新对象跟原对象不共享内存。\n\n\n# java是值传递还是引用传递？\n\n形式参数为基本数据类型的，就是值传递，如果为引用数据类型就是引用传递。\n\njava中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。\n\n\n# 为什么重写equals还要重写hashcode？\n\n如：重写一个自定义类的equals可以实现我们的意图，即这两个类判断为相等，但它们的hashcode是不同的。\n\n如果我们用hashset去add的时候，由于底层是通过hashcode判断是不是同一对象，这个时候不重写hashcode就会被判断成不同对象。\n\n\n# wait()等函数定义在object中，而不是thread中？\n\n锁可以是任意对象，所以任意对象调用方法一定定义在object类中。\n\n\n# java中的object九大方法？\n\nprotected object clone() 创建并返回此对象的一个副本。\n\nboolean equals(object obj) 指示某个其他对象是否与此对象“相等”。\n\nprotected void finalize() 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。\n\nclass<? extendsobject> getclass() 返回一个对象的运行时类。\n\nint hashcode() 返回该对象的哈希码值。\n\nvoid notify() 唤醒在此对象监视器上等待的单个线程。\n\nvoid notifyall() 唤醒在此对象监视器上等待的所有线程。\n\nstring tostring() 返回该对象的字符串表示。\n\nvoid wait() 导致当前的线程等待，直到其他线程调用此对象的notify()方法或notifyall() 方法。\n\nvoid wait(long timeout) 导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或\n\nvoid wait(long timeout, int nanos) 导致当前的线程等待，直到其他线程调用此对象的 notify()\n\n\n# aop比较？\n\n1.aspectj使用编译时和class文件加载时织入时，spring aop利用运行时织入。\n\n2.spring aop是基于代理的aop框架。这意味着, 要实现目标对象的各个方面, 它将创建该对象的代理。\n\n使用以下两种方法之一实现:\n\n1）jdk 动态代理 —— spring aop 的首选方式。只要目标对象实现甚至一个接口, 就会使用 jdk 动态代理；\n\n2）cglib 代理 —— 如果目标对象没有实现接口, 则可以使用 cglib 代理。\n\n3. aspectj在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的。\n\n\n# sleep()方法和wait()方法区别和共同点?\n\n1.两者最主要的区别在于：**sleep() 方法没有释放锁，而 wait() 方法释放了锁** 。\n\n2.两者都可以暂停线程的执行。\n\n3.wait() 通常被用于线程间交互/通信，sleep() 通常被用于暂停执行。\n\n4.wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyall() 方法。sleep() 方法执行完成后，线程会自动苏醒。或者可以使用 wait(long timeout) 超时后线程会自动苏醒。",charsets:{cjk:!0}},{title:"常见系统问题",frontmatter:{title:"常见系统问题",date:"2022-05-06T22:05:26.000Z",permalink:"/pages/fbe426/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/101.%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98.html",relativePath:"01.学习笔记/01.基础/101.常见系统问题.md",key:"v-3627498e",path:"/pages/fbe426/",headers:[{level:2,title:"Linux服务器(Java应用)CPU100%，不借助可视化工具怎么定位问题?",slug:"linux服务器-java应用-cpu100-不借助可视化工具怎么定位问题",normalizedTitle:"linux服务器(java应用)cpu100%，不借助可视化工具怎么定位问题?",charIndex:2}],excerpt:'<h2 id="linux服务器-java应用-cpu100-不借助可视化工具怎么定位问题"><a class="header-anchor" href="#linux服务器-java应用-cpu100-不借助可视化工具怎么定位问题">#</a> Linux服务器(Java应用)CPU100%，不借助可视化工具怎么定位问题?</h2>\n<p>1.top 找出进程 CPU 比较高 PID</p>\n<p>2.top -Hp PID 打印 该 PID 进程下哪条线程的 CPU 占用比较高 tid</p>\n<p>3.printf “%x\\n” tid 将该 id 进行 16 进制转换 tidhex</p>\n<p>4.jstack PID |grep tidhex 打印线程的堆栈信息</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"Linux服务器(Java应用)CPU100%，不借助可视化工具怎么定位问题?",content:"# Linux服务器(Java应用)CPU100%，不借助可视化工具怎么定位问题?\n\n1.top 找出进程 CPU 比较高 PID\n\n2.top -Hp PID 打印 该 PID 进程下哪条线程的 CPU 占用比较高 tid\n\n3.printf “%x\\n” tid 将该 id 进行 16 进制转换 tidhex\n\n4.jstack PID |grep tidhex 打印线程的堆栈信息",normalizedContent:"# linux服务器(java应用)cpu100%，不借助可视化工具怎么定位问题?\n\n1.top 找出进程 cpu 比较高 pid\n\n2.top -hp pid 打印 该 pid 进程下哪条线程的 cpu 占用比较高 tid\n\n3.printf “%x\\n” tid 将该 id 进行 16 进制转换 tidhex\n\n4.jstack pid |grep tidhex 打印线程的堆栈信息",charsets:{cjk:!0}},{title:"ThreadLocal",frontmatter:{title:"ThreadLocal",date:"2022-05-06T21:52:43.000Z",permalink:"/pages/b356cc/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/12.ThreadLocal.html",relativePath:"01.学习笔记/01.基础/12.ThreadLocal.md",key:"v-6b80e628",path:"/pages/b356cc/",headers:[{level:2,title:"1 弱引用",slug:"_1-弱引用",normalizedTitle:"1 弱引用",charIndex:2},{level:3,title:"1.1 为什么使用弱引用？",slug:"_1-1-为什么使用弱引用",normalizedTitle:"1.1 为什么使用弱引用？",charIndex:12},{level:3,title:"1.2 如何使用弱引用？",slug:"_1-2-如何使用弱引用",normalizedTitle:"1.2 如何使用弱引用？",charIndex:515},{level:3,title:"1.3 什么是弱引用？",slug:"_1-3-什么是弱引用",normalizedTitle:"1.3 什么是弱引用？",charIndex:842},{level:3,title:"1.4 强引用、软引用、虚引用",slug:"_1-4-强引用、软引用、虚引用",normalizedTitle:"1.4 强引用、软引用、虚引用",charIndex:1192},{level:2,title:"2 什么是ThreadLocal？",slug:"_2-什么是threadlocal",normalizedTitle:"2 什么是threadlocal？",charIndex:1625},{level:2,title:"3 Spring如何处理bean多线程下的并发问题？",slug:"_3-spring如何处理bean多线程下的并发问题",normalizedTitle:"3 spring如何处理bean多线程下的并发问题？",charIndex:1892},{level:2,title:"4 Spring如何保证数据库事务在同一个连接下执行？",slug:"_4-spring如何保证数据库事务在同一个连接下执行",normalizedTitle:"4 spring如何保证数据库事务在同一个连接下执行？",charIndex:2038},{level:2,title:"5 Thread,ThreadLocalMap,ThreadLocal三者的逻辑关系？",slug:"_5-thread-threadlocalmap-threadlocal三者的逻辑关系",normalizedTitle:"5 thread,threadlocalmap,threadlocal三者的逻辑关系？",charIndex:2214},{level:2,title:"6 ThreadLocalMap底层结构是什么？",slug:"_6-threadlocalmap底层结构是什么",normalizedTitle:"6 threadlocalmap底层结构是什么？",charIndex:2340},{level:2,title:"7 ThreadLocal为什么可能发生内存泄漏？",slug:"_7-threadlocal为什么可能发生内存泄漏",normalizedTitle:"7 threadlocal为什么可能发生内存泄漏？",charIndex:2673},{level:2,title:"8 ThreadLocal如何避免内存泄露？",slug:"_8-threadlocal如何避免内存泄露",normalizedTitle:"8 threadlocal如何避免内存泄露？",charIndex:2980}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 弱引用 1.1 为什么使用弱引用？ 1.2 如何使用弱引用？ 1.3 什么是弱引用？ 1.4 强引用、软引用、虚引用 2 什么是ThreadLocal？ 3 Spring如何处理bean多线程下的并发问题？ 4 Spring如何保证数据库事务在同一个连接下执行？ 5 Thread,ThreadLocalMap,ThreadLocal三者的逻辑关系？ 6 ThreadLocalMap底层结构是什么？ 7 ThreadLocal为什么可能发生内存泄漏？ 8 ThreadLocal如何避免内存泄露？",content:"# 1 弱引用\n\n\n# 1.1 为什么使用弱引用？\n\n考虑下面的场景：\n\n有一个Product类代表一种产品，这个类被设计为不可扩展的，此时我们想要为每个产品增加一个编号。\n\n一种解决方案是使用HashMap<Product, Integer>。\n\n于是问题来了，如果我们已经不再需要一个Product对象存在于内存中（比如已经卖出了这件产品），假设指向它的引用为productA，我们这时会给productA赋值为null，然而这时productA过去指向的Product对象并不会被回收，因为它显然还被HashMap引用着。\n\n所以这种情况下，我们想要真正的回收一个Product对象，仅仅把它的强引用赋值为null是不够的，还要把相应的条目从HashMap中移除。\n\n显然“从HashMap中移除不再需要的条目”这个工作我们不想自己完成，我们希望告诉垃圾收集器：在只有HashMap中的key在引用着Product对象的情况下，就可以回收相应Product对象了。\n\n根据前面弱引用的定义，使用弱引用能帮助我们达成这个目的。我们只需要用一个指向Product对象的弱引用对象来作为HashMap中的key就可以了。\n\n\n# 1.2 如何使用弱引用？\n\n拿上面介绍的场景举例，我们使用一个指向Product对象的弱引用对象来作为HashMap的key，只需这样定义这个弱引用对象：\n\nProduct productA = new Product(...);\n\nWeakReference<Product> weakProductA = new WeakReference<>(productA);\n\n若引用对象weakProductA就指向了Product对象productA。我们怎么通过weakProduct获取它所指向的Product对象productA呢？很简单，只需要下面这句代码：\n\nProduct product = weakProductA.get();\n\n\n# 1.3 什么是弱引用？\n\nJava中的弱引用具体指的是java.lang.ref.WeakReference<T>类，我们首先来看一下官方文档对它做的说明：\n\n弱引用对象的存在不会阻止它所指向的对象被垃圾回收器回收。弱引用最常见的用途是实现规范映射(canonicalizing mappings，比如哈希表）。\n\n假设垃圾收集器在某个时间点决定一个对象是弱可达的(weakly reachable)（也就是说当前指向它的全都是弱引用），这时垃圾收集器会清除所有指向该对象的弱引用，然后把这个弱可达对象标记为可终结(finalizable)的，这样它随后就会被回收。与此同时或稍后，垃圾收集器会把那些刚清除的弱引用放入创建弱引用对象时所指定的 引用队列(Reference Queue)中。\n\n\n# 1.4 强引用、软引用、虚引用\n\n实际上，Java中存在四种引用，它们由强到弱依次是：强引用、软引用、弱引用、虚引用。下面我们简单介绍下除弱引用外的其他三种引用：\n\n强引用（Strong Reference）：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收。\n\n软引用（Soft Reference）：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些。\n\n虚引用（Phantom Reference）：虚引用是Java中最弱的引用，那么它弱到什么程度呢？它是如此脆弱以至于我们通过虚引用甚至无法获取到被引用的对象，虚引用存在的唯一作用就是当它指向的对象被回收后，虚引用本身会被加入到引用队列中，用作记录它指向的对象已被回收。\n\n\n# 2 什么是ThreadLocal？\n\nThreadLocal是线程局部变量。这种变量在多线程的情况下访问时能保证各个线程变量相对独立于其他线程中的变量。ThreadLocal实例通常来说是private static类型的，用于关联线程和线程上下文。\n\nThread跟ThreadLocal什么关系：\n\nThread和ThreadLocal是绑定的， ThreadLocal依赖于Thread去执行， Thread将需要隔离的数据存放到ThreadLocal(准确的讲是ThreadLocalMap)中, 来实现多线程处理。\n\n\n# 3 Spring如何处理bean多线程下的并发问题？\n\nThreadLocal天生为解决相同变量的访问冲突问题， 所以这个对于spring的默认单例bean的多线程访问是一个完美的解决方案。\n\nSpring也确实是用了ThreadLocal来处理多线程下相同变量并发的线程安全问题。\n\n\n# 4 Spring如何保证数据库事务在同一个连接下执行？\n\nDataSourceTransactionManager 是spring的数据源事务管理器， 它会在你调用getConnection()的时候从数据库连接池中获取一个connection， 然后将其与ThreadLocal绑定， 事务完成后解除绑定。这样就保证了事务在同一连接下完成。\n\n\n# 5 Thread,ThreadLocalMap,ThreadLocal三者的逻辑关系？\n\n1.Thread实例和ThreadLocalMap实例是一对一的关系\n\n2.ThreadLocalMap实例和ThreadLocal实例是一对多的关系。\n\n\n# 6 ThreadLocalMap底层结构是什么？\n\nThreadLocal中的map数据结构和HashMap不同，它并没有实现Map接口，也不像HashMap一样通过链表来解决hash冲突！\n\n进阶问题：那么ThreadLocal是如何解决hash冲突呢？\n\n答：采用的开放地址法，不是hashmap的链地址法！\n\n**ThreadLocal是采用数组来存储的。**ThreadLocalMap在存储的时候会给每一个ThreadLocal对象一个threadLocalHashCode，在插入过程中，根据ThreadLocal对象的hash值，定位到table中的位置i，int i = key.threadLocalHashCode & (len-1)。\n\n\n# 7 ThreadLocal为什么可能发生内存泄漏？\n\n当使用ThreadLocal保存一个value时，会在ThreadLocalMap中的数组插入一个Entry对象，按理说key-value都应该以强引用保存在Entry对象中，但在ThreadLocalMap的实现中，key被保存到了WeakReference对象中（弱引用对象）。\n\n这就导致了一个问题：ThreadLocal在没有外部强引用时，发生GC时key会被回收，如果创建ThreadLocal的线程一直持续运行（线程池的情况，线程跑完后会回到线程池，并不会销毁），那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露。\n\n\n# 8 ThreadLocal如何避免内存泄露？\n\n使用完ThreadLocal之后，调用remove方法。",normalizedContent:"# 1 弱引用\n\n\n# 1.1 为什么使用弱引用？\n\n考虑下面的场景：\n\n有一个product类代表一种产品，这个类被设计为不可扩展的，此时我们想要为每个产品增加一个编号。\n\n一种解决方案是使用hashmap<product, integer>。\n\n于是问题来了，如果我们已经不再需要一个product对象存在于内存中（比如已经卖出了这件产品），假设指向它的引用为producta，我们这时会给producta赋值为null，然而这时producta过去指向的product对象并不会被回收，因为它显然还被hashmap引用着。\n\n所以这种情况下，我们想要真正的回收一个product对象，仅仅把它的强引用赋值为null是不够的，还要把相应的条目从hashmap中移除。\n\n显然“从hashmap中移除不再需要的条目”这个工作我们不想自己完成，我们希望告诉垃圾收集器：在只有hashmap中的key在引用着product对象的情况下，就可以回收相应product对象了。\n\n根据前面弱引用的定义，使用弱引用能帮助我们达成这个目的。我们只需要用一个指向product对象的弱引用对象来作为hashmap中的key就可以了。\n\n\n# 1.2 如何使用弱引用？\n\n拿上面介绍的场景举例，我们使用一个指向product对象的弱引用对象来作为hashmap的key，只需这样定义这个弱引用对象：\n\nproduct producta = new product(...);\n\nweakreference<product> weakproducta = new weakreference<>(producta);\n\n若引用对象weakproducta就指向了product对象producta。我们怎么通过weakproduct获取它所指向的product对象producta呢？很简单，只需要下面这句代码：\n\nproduct product = weakproducta.get();\n\n\n# 1.3 什么是弱引用？\n\njava中的弱引用具体指的是java.lang.ref.weakreference<t>类，我们首先来看一下官方文档对它做的说明：\n\n弱引用对象的存在不会阻止它所指向的对象被垃圾回收器回收。弱引用最常见的用途是实现规范映射(canonicalizing mappings，比如哈希表）。\n\n假设垃圾收集器在某个时间点决定一个对象是弱可达的(weakly reachable)（也就是说当前指向它的全都是弱引用），这时垃圾收集器会清除所有指向该对象的弱引用，然后把这个弱可达对象标记为可终结(finalizable)的，这样它随后就会被回收。与此同时或稍后，垃圾收集器会把那些刚清除的弱引用放入创建弱引用对象时所指定的 引用队列(reference queue)中。\n\n\n# 1.4 强引用、软引用、虚引用\n\n实际上，java中存在四种引用，它们由强到弱依次是：强引用、软引用、弱引用、虚引用。下面我们简单介绍下除弱引用外的其他三种引用：\n\n强引用（strong reference）：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收。\n\n软引用（soft reference）：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些。\n\n虚引用（phantom reference）：虚引用是java中最弱的引用，那么它弱到什么程度呢？它是如此脆弱以至于我们通过虚引用甚至无法获取到被引用的对象，虚引用存在的唯一作用就是当它指向的对象被回收后，虚引用本身会被加入到引用队列中，用作记录它指向的对象已被回收。\n\n\n# 2 什么是threadlocal？\n\nthreadlocal是线程局部变量。这种变量在多线程的情况下访问时能保证各个线程变量相对独立于其他线程中的变量。threadlocal实例通常来说是private static类型的，用于关联线程和线程上下文。\n\nthread跟threadlocal什么关系：\n\nthread和threadlocal是绑定的， threadlocal依赖于thread去执行， thread将需要隔离的数据存放到threadlocal(准确的讲是threadlocalmap)中, 来实现多线程处理。\n\n\n# 3 spring如何处理bean多线程下的并发问题？\n\nthreadlocal天生为解决相同变量的访问冲突问题， 所以这个对于spring的默认单例bean的多线程访问是一个完美的解决方案。\n\nspring也确实是用了threadlocal来处理多线程下相同变量并发的线程安全问题。\n\n\n# 4 spring如何保证数据库事务在同一个连接下执行？\n\ndatasourcetransactionmanager 是spring的数据源事务管理器， 它会在你调用getconnection()的时候从数据库连接池中获取一个connection， 然后将其与threadlocal绑定， 事务完成后解除绑定。这样就保证了事务在同一连接下完成。\n\n\n# 5 thread,threadlocalmap,threadlocal三者的逻辑关系？\n\n1.thread实例和threadlocalmap实例是一对一的关系\n\n2.threadlocalmap实例和threadlocal实例是一对多的关系。\n\n\n# 6 threadlocalmap底层结构是什么？\n\nthreadlocal中的map数据结构和hashmap不同，它并没有实现map接口，也不像hashmap一样通过链表来解决hash冲突！\n\n进阶问题：那么threadlocal是如何解决hash冲突呢？\n\n答：采用的开放地址法，不是hashmap的链地址法！\n\n**threadlocal是采用数组来存储的。**threadlocalmap在存储的时候会给每一个threadlocal对象一个threadlocalhashcode，在插入过程中，根据threadlocal对象的hash值，定位到table中的位置i，int i = key.threadlocalhashcode & (len-1)。\n\n\n# 7 threadlocal为什么可能发生内存泄漏？\n\n当使用threadlocal保存一个value时，会在threadlocalmap中的数组插入一个entry对象，按理说key-value都应该以强引用保存在entry对象中，但在threadlocalmap的实现中，key被保存到了weakreference对象中（弱引用对象）。\n\n这就导致了一个问题：threadlocal在没有外部强引用时，发生gc时key会被回收，如果创建threadlocal的线程一直持续运行（线程池的情况，线程跑完后会回到线程池，并不会销毁），那么这个entry对象中的value就有可能一直得不到回收，发生内存泄露。\n\n\n# 8 threadlocal如何避免内存泄露？\n\n使用完threadlocal之后，调用remove方法。",charsets:{cjk:!0}},{title:"volatile关键字",frontmatter:{title:"volatile关键字",date:"2022-05-06T22:12:50.000Z",permalink:"/pages/61751f/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/15.volatile%E5%85%B3%E9%94%AE%E5%AD%97.html",relativePath:"01.学习笔记/01.基础/15.volatile关键字.md",key:"v-9f7495e6",path:"/pages/61751f/",headers:[{level:2,title:"1 volatile关键字的理解？",slug:"_1-volatile关键字的理解",normalizedTitle:"1 volatile关键字的理解？",charIndex:2},{level:2,title:"2 什么是内存可见性？",slug:"_2-什么是内存可见性",normalizedTitle:"2 什么是内存可见性？",charIndex:87},{level:3,title:"2.1 Java内存模型",slug:"_2-1-java内存模型",normalizedTitle:"2.1 java内存模型",charIndex:103},{level:3,title:"2.2 jvm和jmm之间的关系",slug:"_2-2-jvm和jmm之间的关系",normalizedTitle:"2.2 jvm和jmm之间的关系",charIndex:372},{level:3,title:"2.3 内存可见性",slug:"_2-3-内存可见性",normalizedTitle:"2.3 内存可见性",charIndex:603},{level:2,title:"3 什么是指令重排序？",slug:"_3-什么是指令重排序",normalizedTitle:"3 什么是指令重排序？",charIndex:755},{level:3,title:"3.1 指令重排序",slug:"_3-1-指令重排序",normalizedTitle:"3.1 指令重排序",charIndex:771},{level:3,title:"3.2 happens-before（先行发生原则）",slug:"_3-2-happens-before-先行发生原则",normalizedTitle:"3.2 happens-before（先行发生原则）",charIndex:861}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 volatile关键字的理解？ 2 什么是内存可见性？ 2.1 Java内存模型 2.2 jvm和jmm之间的关系 2.3 内存可见性 3 什么是指令重排序？ 3.1 指令重排序 3.2 happens-before（先行发生原则）",content:"# 1 volatile关键字的理解？\n\n被volatile修饰的共享变量具有2个特性。\n\n1.保证了不同线程之间操作该共享变量的内存可见性。\n\n2.禁止指令重排序\n\n\n# 2 什么是内存可见性？\n\n\n# 2.1 Java内存模型\n\n关于内存可见性的话，要先提一下Java内存模型（JMM），Java虚拟机里面定义的一种抽象模型。\n\n根据JMM的设计，系统存在一个主内存(Main Memory)，Java中所有变量都储存在主存中，对于所有线程都是共享的。\n\n每条线程都有自己的工作内存(Working Memory)，工作内存中保存的是主存中某些变量的拷贝，线程对所有变量的操作都是在工作内存中进行，线程之间无法相互直接访问，变量传递均需要通过主存完成。\n\n但是JMM这个主内存和工作内存跟JVM中的堆、栈内存实际上是没什么关系的。\n\n\n# 2.2 jvm和jmm之间的关系\n\njmm中的主内存、工作内存与jvm中的Java堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的。\n\n如果一定要勉强对应起来，jmm的主内存可以对应jvm堆中对象实例部分，jmm工作内存可以对应jvm虚拟机栈中的部分区域。\n\n从更低层次上说，主内存就直接对应于物理硬件的内存，\n\n而为了获取更好的运行速度，虚拟机可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时主要访问读写的是工作内存。\n\n\n# 2.3 内存可见性\n\nvolatile保证了变量的可见性主要是因为：\n\n1）线程更新volatile变量的时候，先去更新工作内存中这个变量的副本，然后再将改变后副本的值从工作内存刷新到主内存。\n\n2）线程读取volatile变量的时候，先去主内存中读取最新值到工作内存，然后再从工作内存中读取。\n\n\n# 3 什么是指令重排序？\n\n\n# 3.1 指令重排序\n\n重排序是指编译器和处理为了优化程序性能而对指令序列进行重新排序的一种手段。\n如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重新排序。\n\n\n# 3.2 happens-before（先行发生原则）\n\nJava内存模型中会默认保证一定的有序性，就是happens-before规则，指令重排序需要遵循这个规则。\n\n如果2个操作的执行顺序无法重happens-before规则中推导出来，就不能保证他们的有序性，jvm就可能对他们进行重排序。\n\nhappens-before主要有以下几条规则：\n\n1.程序次序规则： 一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作。（保证单线程的执行结果是正确的，对于无关紧要的重排序是允许的。）\n\n2.锁定规则： 一个unLock操作先行发生于后面对同一个锁的lock操作。\n\n3.volatile变量规则： 对一个变量的写操作先行发生与后面对这个变量的读操作。\n\n4.传递规则： 如果操作A先行发生于操作B，而操作B又先发生于操作C，则可以得出操作A先行发生于操作C。\n\n前四条规则是比较重要的，后四条是比较显而易见的。\n\n1.线程启动规则： Thread对象的start()方法先行发生于此线程的每一个动作\n\n2.线程中断规则： 对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。\n\n3.线程终结规则： 线程中所有的操作都先行发生于线程的终止检测,我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行。\n\n4.对象终结规则： 一个对象的初始化完成先行发生于他的finalize()方法的开始。",normalizedContent:"# 1 volatile关键字的理解？\n\n被volatile修饰的共享变量具有2个特性。\n\n1.保证了不同线程之间操作该共享变量的内存可见性。\n\n2.禁止指令重排序\n\n\n# 2 什么是内存可见性？\n\n\n# 2.1 java内存模型\n\n关于内存可见性的话，要先提一下java内存模型（jmm），java虚拟机里面定义的一种抽象模型。\n\n根据jmm的设计，系统存在一个主内存(main memory)，java中所有变量都储存在主存中，对于所有线程都是共享的。\n\n每条线程都有自己的工作内存(working memory)，工作内存中保存的是主存中某些变量的拷贝，线程对所有变量的操作都是在工作内存中进行，线程之间无法相互直接访问，变量传递均需要通过主存完成。\n\n但是jmm这个主内存和工作内存跟jvm中的堆、栈内存实际上是没什么关系的。\n\n\n# 2.2 jvm和jmm之间的关系\n\njmm中的主内存、工作内存与jvm中的java堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的。\n\n如果一定要勉强对应起来，jmm的主内存可以对应jvm堆中对象实例部分，jmm工作内存可以对应jvm虚拟机栈中的部分区域。\n\n从更低层次上说，主内存就直接对应于物理硬件的内存，\n\n而为了获取更好的运行速度，虚拟机可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时主要访问读写的是工作内存。\n\n\n# 2.3 内存可见性\n\nvolatile保证了变量的可见性主要是因为：\n\n1）线程更新volatile变量的时候，先去更新工作内存中这个变量的副本，然后再将改变后副本的值从工作内存刷新到主内存。\n\n2）线程读取volatile变量的时候，先去主内存中读取最新值到工作内存，然后再从工作内存中读取。\n\n\n# 3 什么是指令重排序？\n\n\n# 3.1 指令重排序\n\n重排序是指编译器和处理为了优化程序性能而对指令序列进行重新排序的一种手段。\n如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重新排序。\n\n\n# 3.2 happens-before（先行发生原则）\n\njava内存模型中会默认保证一定的有序性，就是happens-before规则，指令重排序需要遵循这个规则。\n\n如果2个操作的执行顺序无法重happens-before规则中推导出来，就不能保证他们的有序性，jvm就可能对他们进行重排序。\n\nhappens-before主要有以下几条规则：\n\n1.程序次序规则： 一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作。（保证单线程的执行结果是正确的，对于无关紧要的重排序是允许的。）\n\n2.锁定规则： 一个unlock操作先行发生于后面对同一个锁的lock操作。\n\n3.volatile变量规则： 对一个变量的写操作先行发生与后面对这个变量的读操作。\n\n4.传递规则： 如果操作a先行发生于操作b，而操作b又先发生于操作c，则可以得出操作a先行发生于操作c。\n\n前四条规则是比较重要的，后四条是比较显而易见的。\n\n1.线程启动规则： thread对象的start()方法先行发生于此线程的每一个动作\n\n2.线程中断规则： 对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。\n\n3.线程终结规则： 线程中所有的操作都先行发生于线程的终止检测,我们可以通过thread.join()方法结束、thread.isalive()的返回值手段检测到线程已经终止执行。\n\n4.对象终结规则： 一个对象的初始化完成先行发生于他的finalize()方法的开始。",charsets:{cjk:!0}},{title:"数据结构",frontmatter:{title:"数据结构",date:"2022-05-06T22:29:00.000Z",permalink:"/pages/a27f33/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/18.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",relativePath:"01.学习笔记/01.基础/18.数据结构.md",key:"v-6d7fe766",path:"/pages/a27f33/",headers:[{level:2,title:"1 数组和链表区别？",slug:"_1-数组和链表区别",normalizedTitle:"1 数组和链表区别？",charIndex:2},{level:2,title:"2 HashMap的数据结构？默认初试容量和负载因子是多少？",slug:"_2-hashmap的数据结构-默认初试容量和负载因子是多少",normalizedTitle:"2 hashmap的数据结构？默认初试容量和负载因子是多少？",charIndex:173},{level:2,title:"3 hashmap的数组长度为什么要保证是2的幂？",slug:"_3-hashmap的数组长度为什么要保证是2的幂",normalizedTitle:"3 hashmap的数组长度为什么要保证是2的幂？",charIndex:273},{level:2,title:"4 hashmap的扩容？",slug:"_4-hashmap的扩容",normalizedTitle:"4 hashmap的扩容？",charIndex:520},{level:2,title:"5 ConcurrentHashMap",slug:"_5-concurrenthashmap",normalizedTitle:"5 concurrenthashmap",charIndex:617},{level:2,title:"6 ConcurrentHashMap 1.7 与 1.8 区别?",slug:"_6-concurrenthashmap-1-7-与-1-8-区别",normalizedTitle:"6 concurrenthashmap 1.7 与 1.8 区别?",charIndex:755}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 数组和链表区别？ 2 HashMap的数据结构？默认初试容量和负载因子是多少？ 3 hashmap的数组长度为什么要保证是2的幂？ 4 hashmap的扩容？ 5 ConcurrentHashMap 6 ConcurrentHashMap 1.7 与 1.8 区别?",content:"# 1 数组和链表区别？\n\n1.链表通过指针来连接元素与元素，数组则是把所有元素按次序依次存储。\n\n链表的插入删除元素相对数组较为简单，不需要移动元素，且较为容易实现长度扩充，但是寻找某个元素较为困难。\n\n3.数组寻找某个元素较为简单，但插入与删除比较复杂，由于最大长度需要再编程一开始时指定，故当达到最大长度时，扩充长度不如链表方便。\n\n\n# 2 HashMap的数据结构？默认初试容量和负载因子是多少？\n\n1.数组+链表，链表长度大于8时接红黑树。\n\n初始容量（16）和负载因子（0.75）（负载因子就是指填充到多少开始扩大容量）。\n\n\n# 3 hashmap的数组长度为什么要保证是2的幂？\n\nHashMap添加元素时，主要通过 key的hashcode值 & （容器长度 - 1）来进行位置确定。\n\n公式:index = e.hash & (newCap - 1)\n\nlength - 1的值是所有二进制位全为1,这种情况下,index的结果等同于hashcode后几位的值。\n\n只要输入的hashcode本身分布均匀,hash算法的结果就是均匀的。\n\n所以,HashMap的默认长度为16,是为了降低hash碰撞的几率。\n\n\n# 4 hashmap的扩容？\n\nrehash：当Map中的元素大于数组长度的75%时，就会进行扩容，JDK1.7之前扩容时很有可能会造成环链，后续get时则可能会变成死循环，线程不安全。\n\n\n# 5 ConcurrentHashMap\n\nJDK1.7中ConcurrentHashMap采用分段锁，分成16个小的hashMap，锁定当前的小hashMap其他\n\nhashMap不受影响。JDK1.8之后不再采取分段锁，主要采用CAS原子指令实现无锁的高并发操作。\n\n\n# 6 ConcurrentHashMap 1.7 与 1.8 区别?\n\n1.JDK1.8 采用 synchronized 代替可重入锁 ReentrantLock。\n\n2.JDK1.8 取消了 Segment 分段锁的数据结构，使用数组+链表+红黑树的结构代替。\n\n3.JDK1.8 对每个数组元素加锁，1.7 对要操作的 Segment 数据段加锁。",normalizedContent:"# 1 数组和链表区别？\n\n1.链表通过指针来连接元素与元素，数组则是把所有元素按次序依次存储。\n\n链表的插入删除元素相对数组较为简单，不需要移动元素，且较为容易实现长度扩充，但是寻找某个元素较为困难。\n\n3.数组寻找某个元素较为简单，但插入与删除比较复杂，由于最大长度需要再编程一开始时指定，故当达到最大长度时，扩充长度不如链表方便。\n\n\n# 2 hashmap的数据结构？默认初试容量和负载因子是多少？\n\n1.数组+链表，链表长度大于8时接红黑树。\n\n初始容量（16）和负载因子（0.75）（负载因子就是指填充到多少开始扩大容量）。\n\n\n# 3 hashmap的数组长度为什么要保证是2的幂？\n\nhashmap添加元素时，主要通过 key的hashcode值 & （容器长度 - 1）来进行位置确定。\n\n公式:index = e.hash & (newcap - 1)\n\nlength - 1的值是所有二进制位全为1,这种情况下,index的结果等同于hashcode后几位的值。\n\n只要输入的hashcode本身分布均匀,hash算法的结果就是均匀的。\n\n所以,hashmap的默认长度为16,是为了降低hash碰撞的几率。\n\n\n# 4 hashmap的扩容？\n\nrehash：当map中的元素大于数组长度的75%时，就会进行扩容，jdk1.7之前扩容时很有可能会造成环链，后续get时则可能会变成死循环，线程不安全。\n\n\n# 5 concurrenthashmap\n\njdk1.7中concurrenthashmap采用分段锁，分成16个小的hashmap，锁定当前的小hashmap其他\n\nhashmap不受影响。jdk1.8之后不再采取分段锁，主要采用cas原子指令实现无锁的高并发操作。\n\n\n# 6 concurrenthashmap 1.7 与 1.8 区别?\n\n1.jdk1.8 采用 synchronized 代替可重入锁 reentrantlock。\n\n2.jdk1.8 取消了 segment 分段锁的数据结构，使用数组+链表+红黑树的结构代替。\n\n3.jdk1.8 对每个数组元素加锁，1.7 对要操作的 segment 数据段加锁。",charsets:{cjk:!0}},{title:"并发加锁",frontmatter:{title:"并发加锁",date:"2022-05-06T22:35:53.000Z",permalink:"/pages/745032/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/21.%E5%B9%B6%E5%8F%91%E5%8A%A0%E9%94%81.html",relativePath:"01.学习笔记/01.基础/21.并发加锁.md",key:"v-12a76ac5",path:"/pages/745032/",headers:[{level:2,title:"1 Synchronized",slug:"_1-synchronized",normalizedTitle:"1 synchronized",charIndex:2},{level:3,title:"1.1 CAS与Synchronized的区别？",slug:"_1-1-cas与synchronized的区别",normalizedTitle:"1.1 cas与synchronized的区别？",charIndex:21},{level:3,title:"1.2 synchronized的加锁方式",slug:"_1-2-synchronized的加锁方式",normalizedTitle:"1.2 synchronized的加锁方式",charIndex:1237},{level:3,title:"1.3 new Object(); 占多少字节？ 16",slug:"_1-3-new-object-占多少字节-16",normalizedTitle:"1.3 new object(); 占多少字节？ 16",charIndex:1263},{level:3,title:"1.4 关于无锁偏向锁轻量级锁重量级锁的理解误区",slug:"_1-4-关于无锁偏向锁轻量级锁重量级锁的理解误区",normalizedTitle:"1.4 关于无锁偏向锁轻量级锁重量级锁的理解误区",charIndex:1431},{level:3,title:"1.5 锁状态转换流程",slug:"_1-5-锁状态转换流程",normalizedTitle:"1.5 锁状态转换流程",charIndex:1574},{level:2,title:"2 AQS",slug:"_2-aqs",normalizedTitle:"2 aqs",charIndex:1590},{level:3,title:"2.1 聊聊你对AQS的理解？",slug:"_2-1-聊聊你对aqs的理解",normalizedTitle:"2.1 聊聊你对aqs的理解？",charIndex:1600},{level:3,title:"2.2 synchronized和ReentrantLock的区别？",slug:"_2-2-synchronized和reentrantlock的区别",normalizedTitle:"2.2 synchronized和reentrantlock的区别？",charIndex:2476},{level:3,title:"2.3 AQS定义的两种队列？",slug:"_2-3-aqs定义的两种队列",normalizedTitle:"2.3 aqs定义的两种队列？",charIndex:2867},{level:2,title:"3 死锁",slug:"_3-死锁",normalizedTitle:"3 死锁",charIndex:3001},{level:3,title:"3.1 什么是死锁？",slug:"_3-1-什么是死锁",normalizedTitle:"3.1 什么是死锁？",charIndex:3010},{level:3,title:"3.2 死锁产生的必要条件？",slug:"_3-2-死锁产生的必要条件",normalizedTitle:"3.2 死锁产生的必要条件？",charIndex:3082},{level:3,title:"3.3 怎么预防死锁？",slug:"_3-3-怎么预防死锁",normalizedTitle:"3.3 怎么预防死锁？",charIndex:3248}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Synchronized 1.1 CAS与Synchronized的区别？ 1.2 synchronized的加锁方式 1.3 new Object(); 占多少字节？ 16 1.4 关于无锁偏向锁轻量级锁重量级锁的理解误区 1.5 锁状态转换流程 2 AQS 2.1 聊聊你对AQS的理解？ 2.2 synchronized和ReentrantLock的区别？ 2.3 AQS定义的两种队列？ 3 死锁 3.1 什么是死锁？ 3.2 死锁产生的必要条件？ 3.3 怎么预防死锁？",content:"# 1 Synchronized\n\n\n# 1.1 CAS与Synchronized的区别？\n\n1）CAS 是 compare and swap 的缩写，即我们所说的比较交换。\n\ncas 是一种基于锁的操作，而且是乐观锁。在java中锁分为乐观锁和悲观锁。\n\n悲观锁是将资源锁住，等一个之前获得锁的线程释放锁之后，下一个线程才可以访问。\n\n而乐观锁采取了 一种宽泛的态度，通过某种方式不加锁来处理资源，比如通过给记录加 version 来获取数据， 性能较悲观锁有很大的提高。\n\nCAS 操作包含三个操作数：内存位置(V)、旧值(A)和新值(B)。如果内存地址里面的值和 A 的值是一样的，那么就将内存里面的值更新成 B。\n\nCAS 是通过无限循环来获取数据的，若果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能机会执行。\n\njava.util.concurrent.atomic 包下的类大多是使用 CAS 操作来实现的 (AtomicInteger,AtomicBoolean,AtomicLong)。\n\nCAS存在的问题：\n\n1.1）ABA问题：一个线程把值从A改为B再改回A，另一个线程不知道这个过程。\n\n解决方案：使用版本号，每次修改数据时带上一个版本号。\n\n1.2）循环开销大：CAS通过自旋获取锁，当一直获取不到锁时，会不断空循环。\n\n1.3）不能保证代码块的原子性\n\nCAS 机制所保证的知识一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。\n\n2）Synchronized：悲观锁。\n\nsynchronized主要解决的是多个线程之间的同步问题，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\n\njdk1.6之前性能较差，主要基于Monitor机制实现，依赖底层操作系统的互斥原语Mutex。线程之间的切换需要操作系统从用户态转换到内核态进行，时间成本很高。jdk1.6之后做了优化，锁分成了4种状态，分别是无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。\n\n偏向锁：针对没有锁竞争的场合。jvm启动之后默认有4s的延迟，对每个新建的对象都开启偏向锁模式，在这之前新建的都是无锁状态。（可通过配置调整）\n\n轻量级锁：出现的场景是线程交替执行同步块。通过CAS获取锁（没有自旋），失败膨胀成重量级锁。\n\nA线程执行完加锁模块，线程还没结束，此时B线程去加锁（发现加不了偏向锁：A线程还在执行），升级为轻量级锁。轻量级锁解锁后后直接到无锁状态。（同样，重量级锁解锁的时候也只会到无锁状态。重量级锁解锁时是GC的时候才清掉标识，较慢，可睡眠一两秒后再看。）\n\n重量级锁：出现场景：竞争激烈的情况（A线程的锁还没释放，B线程也去加锁）。去内核态操作前，会先尝试自旋CAS获取锁。\n\n\n# 1.2 synchronized的加锁方式\n\n\n# 1.3 new Object(); 占多少字节？ 16\n\n对象在内存中存储的布局可以分为三块区域:\n\n对象头(Header)\n\n实例数据 (Instance Data)\n\n对齐填充(Padding)\n\nMark Word：8字节\n\nMetaData：4字节\n\n数组长度：4字节\n\n长度必须是8的倍数，不够则用“对齐填充”补齐。\n\n\n# 1.4 关于无锁偏向锁轻量级锁重量级锁的理解误区\n\n1. 无锁 --\x3e 偏向锁 --\x3e 轻量级锁 --\x3e 重量级锁。 （不存在无锁 --\x3e 偏向锁）\n\n2. 轻量级锁自旋获取锁失败，会膨胀成重量级锁。 （轻量级锁不存在自旋）\n\n3. 重量级锁不存在自旋。 （重量级锁存在自旋）\n\n\n# 1.5 锁状态转换流程\n\n\n# 2 AQS\n\n\n# 2.1 聊聊你对AQS的理解？\n\nAbstractQueuedSynchronizer，抽象队列同步器\n\nAQS它是JUC（java.util.concurrent）包中多个组件的底层实现。比如像ReentrantLock、Semaphore、CountDownLatch都用到了AQS。\n\nAQS提供了2种锁机制，分别是独占锁和共享锁。\n\n所谓独占锁就是存在多个线程去竞争同一共享资源的时候，同一个时刻，只允许一个线程去访问这个共享资源。也就是多个线程，只有一个能获取锁。比如ReentrantLock就是独占锁。\n\n共享锁就是在同一时刻允许多个线程去获取锁。比如CountDownLatch、Semaphore。\n\n然后，关于AQS的设计，它有几个核心的东西：\n\nAQS对象里面有一个int类型变量：state，代表了加锁状态。独占锁初始状态下是0\n\n还有一个关键变量：加锁线程，用来记录当前加锁的是那个线程。初始状态下是null\n\n另外AQS内部还有一个等待队列，用来专门存放加锁失败的线程。\n\n关于独占锁加锁和释放锁过程：\n\n1.线程过来加锁，通过cas的方式把state从0变成1，同时把“加锁线程”设置成自己。\n\n2.如果加锁的时候发现state不是0，会判断一下“加锁线程”是不是自己，是自己的话state累加，不是的话则加锁失败。\n\n3.加锁失败的会将自己放入同步队列中等待，等其他线程释放锁之后，自己再重新尝试加锁。\n\n4.加锁的线程在执行完自己的业务逻辑代码后释放锁，释放锁会将state变量减1，当state变量为0，则会彻底释放锁，同时把“加锁线程”这个变量设置成null。\n\n5.彻底释放锁后，会从同步队列的队头唤醒线程尝试加锁。\n\n还有一个点：公平锁与非公平锁，AQS支持公平和非公平锁：\n\nAQS的处理方式是：在竞争锁资源的时候，公平锁需要去判断同步等待队列中时候有阻塞的线程，如果有则需要去排队等待。而非公平锁的处理方式是，不管同步等待队列中是否有阻塞线程，它都会直接去尝试更改互斥变量“state”去竞争锁。\n\n\n# 2.2 synchronized和ReentrantLock的区别？\n\n1.synchronized是JVM层次的锁实现，ReentrantLock是JDK层次的锁实现。\n\n2.synchronized的锁状态无法在代码中直接判断，但ReentrantLock可以通过#isLocked判断。\n\n3.synchronized是非公平锁，ReentrantLock是可以是公平也可以是非公平的。\n\n4.synchronized是不可以被中断的，而ReentrantLock#lockInterruptibly方法是可以被中断的。\n\n5.发生异常时synchronized会自动释放锁，而ReentrantLock需要开发者在finally块中显示释放锁。\n\n6.ReentrantLock获取锁的形式有多种:立即返回是否成功的tryLock(),等待指定时长的获取，更灵活;\n\n\n# 2.3 AQS定义的两种队列？\n\n同步等待队列:\n\n主要用于维护获取锁失败时入队的线程。\n\n条件等待队列:\n\n调用await()的时候会释放锁，然后线程会加入到条件队列，调用signal()唤醒的时候会把条件队列中的线程节点移动到同步队列中，等待再次获得锁。\n\n\n# 3 死锁\n\n\n# 3.1 什么是死锁？\n\n死锁是指两个或两个以上的线程在执行过程中，由于竞争资源而造成的一种阻塞现象，若无外力作用，它们将无法推进下去。\n\n\n# 3.2 死锁产生的必要条件？\n\n1.互斥条件：即在一段时间内某一资源仅能一个线程占用\n\n2.占有且等待条件：当线程因为请求资源而阻塞的时候，对已经获得的资源保持不放。\n\n3.不可剥夺条件：线程对获得的资源为使用完成之前，不能被剥夺，只能使用完时由自己释放。\n\n4.循环等待条件：发生死锁时，必然存在一个进程和资源的环形链。\n\n\n# 3.3 怎么预防死锁？\n\n互斥条件无法被破坏，锁本身就是通过互斥来解决线程安全问题。\n\n1.资源一次性分配（破坏占用且等待的条件）\n\n2.可剥夺资源：进程已经获得部分资源，但得不到其他资源，则释放已占有的资源（破坏不可剥夺条件）\n\n3.资源有序分配：按顺序请求资源（破坏循环等待条件）",normalizedContent:"# 1 synchronized\n\n\n# 1.1 cas与synchronized的区别？\n\n1）cas 是 compare and swap 的缩写，即我们所说的比较交换。\n\ncas 是一种基于锁的操作，而且是乐观锁。在java中锁分为乐观锁和悲观锁。\n\n悲观锁是将资源锁住，等一个之前获得锁的线程释放锁之后，下一个线程才可以访问。\n\n而乐观锁采取了 一种宽泛的态度，通过某种方式不加锁来处理资源，比如通过给记录加 version 来获取数据， 性能较悲观锁有很大的提高。\n\ncas 操作包含三个操作数：内存位置(v)、旧值(a)和新值(b)。如果内存地址里面的值和 a 的值是一样的，那么就将内存里面的值更新成 b。\n\ncas 是通过无限循环来获取数据的，若果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能机会执行。\n\njava.util.concurrent.atomic 包下的类大多是使用 cas 操作来实现的 (atomicinteger,atomicboolean,atomiclong)。\n\ncas存在的问题：\n\n1.1）aba问题：一个线程把值从a改为b再改回a，另一个线程不知道这个过程。\n\n解决方案：使用版本号，每次修改数据时带上一个版本号。\n\n1.2）循环开销大：cas通过自旋获取锁，当一直获取不到锁时，会不断空循环。\n\n1.3）不能保证代码块的原子性\n\ncas 机制所保证的知识一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。\n\n2）synchronized：悲观锁。\n\nsynchronized主要解决的是多个线程之间的同步问题，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\n\njdk1.6之前性能较差，主要基于monitor机制实现，依赖底层操作系统的互斥原语mutex。线程之间的切换需要操作系统从用户态转换到内核态进行，时间成本很高。jdk1.6之后做了优化，锁分成了4种状态，分别是无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。\n\n偏向锁：针对没有锁竞争的场合。jvm启动之后默认有4s的延迟，对每个新建的对象都开启偏向锁模式，在这之前新建的都是无锁状态。（可通过配置调整）\n\n轻量级锁：出现的场景是线程交替执行同步块。通过cas获取锁（没有自旋），失败膨胀成重量级锁。\n\na线程执行完加锁模块，线程还没结束，此时b线程去加锁（发现加不了偏向锁：a线程还在执行），升级为轻量级锁。轻量级锁解锁后后直接到无锁状态。（同样，重量级锁解锁的时候也只会到无锁状态。重量级锁解锁时是gc的时候才清掉标识，较慢，可睡眠一两秒后再看。）\n\n重量级锁：出现场景：竞争激烈的情况（a线程的锁还没释放，b线程也去加锁）。去内核态操作前，会先尝试自旋cas获取锁。\n\n\n# 1.2 synchronized的加锁方式\n\n\n# 1.3 new object(); 占多少字节？ 16\n\n对象在内存中存储的布局可以分为三块区域:\n\n对象头(header)\n\n实例数据 (instance data)\n\n对齐填充(padding)\n\nmark word：8字节\n\nmetadata：4字节\n\n数组长度：4字节\n\n长度必须是8的倍数，不够则用“对齐填充”补齐。\n\n\n# 1.4 关于无锁偏向锁轻量级锁重量级锁的理解误区\n\n1. 无锁 --\x3e 偏向锁 --\x3e 轻量级锁 --\x3e 重量级锁。 （不存在无锁 --\x3e 偏向锁）\n\n2. 轻量级锁自旋获取锁失败，会膨胀成重量级锁。 （轻量级锁不存在自旋）\n\n3. 重量级锁不存在自旋。 （重量级锁存在自旋）\n\n\n# 1.5 锁状态转换流程\n\n\n# 2 aqs\n\n\n# 2.1 聊聊你对aqs的理解？\n\nabstractqueuedsynchronizer，抽象队列同步器\n\naqs它是juc（java.util.concurrent）包中多个组件的底层实现。比如像reentrantlock、semaphore、countdownlatch都用到了aqs。\n\naqs提供了2种锁机制，分别是独占锁和共享锁。\n\n所谓独占锁就是存在多个线程去竞争同一共享资源的时候，同一个时刻，只允许一个线程去访问这个共享资源。也就是多个线程，只有一个能获取锁。比如reentrantlock就是独占锁。\n\n共享锁就是在同一时刻允许多个线程去获取锁。比如countdownlatch、semaphore。\n\n然后，关于aqs的设计，它有几个核心的东西：\n\naqs对象里面有一个int类型变量：state，代表了加锁状态。独占锁初始状态下是0\n\n还有一个关键变量：加锁线程，用来记录当前加锁的是那个线程。初始状态下是null\n\n另外aqs内部还有一个等待队列，用来专门存放加锁失败的线程。\n\n关于独占锁加锁和释放锁过程：\n\n1.线程过来加锁，通过cas的方式把state从0变成1，同时把“加锁线程”设置成自己。\n\n2.如果加锁的时候发现state不是0，会判断一下“加锁线程”是不是自己，是自己的话state累加，不是的话则加锁失败。\n\n3.加锁失败的会将自己放入同步队列中等待，等其他线程释放锁之后，自己再重新尝试加锁。\n\n4.加锁的线程在执行完自己的业务逻辑代码后释放锁，释放锁会将state变量减1，当state变量为0，则会彻底释放锁，同时把“加锁线程”这个变量设置成null。\n\n5.彻底释放锁后，会从同步队列的队头唤醒线程尝试加锁。\n\n还有一个点：公平锁与非公平锁，aqs支持公平和非公平锁：\n\naqs的处理方式是：在竞争锁资源的时候，公平锁需要去判断同步等待队列中时候有阻塞的线程，如果有则需要去排队等待。而非公平锁的处理方式是，不管同步等待队列中是否有阻塞线程，它都会直接去尝试更改互斥变量“state”去竞争锁。\n\n\n# 2.2 synchronized和reentrantlock的区别？\n\n1.synchronized是jvm层次的锁实现，reentrantlock是jdk层次的锁实现。\n\n2.synchronized的锁状态无法在代码中直接判断，但reentrantlock可以通过#islocked判断。\n\n3.synchronized是非公平锁，reentrantlock是可以是公平也可以是非公平的。\n\n4.synchronized是不可以被中断的，而reentrantlock#lockinterruptibly方法是可以被中断的。\n\n5.发生异常时synchronized会自动释放锁，而reentrantlock需要开发者在finally块中显示释放锁。\n\n6.reentrantlock获取锁的形式有多种:立即返回是否成功的trylock(),等待指定时长的获取，更灵活;\n\n\n# 2.3 aqs定义的两种队列？\n\n同步等待队列:\n\n主要用于维护获取锁失败时入队的线程。\n\n条件等待队列:\n\n调用await()的时候会释放锁，然后线程会加入到条件队列，调用signal()唤醒的时候会把条件队列中的线程节点移动到同步队列中，等待再次获得锁。\n\n\n# 3 死锁\n\n\n# 3.1 什么是死锁？\n\n死锁是指两个或两个以上的线程在执行过程中，由于竞争资源而造成的一种阻塞现象，若无外力作用，它们将无法推进下去。\n\n\n# 3.2 死锁产生的必要条件？\n\n1.互斥条件：即在一段时间内某一资源仅能一个线程占用\n\n2.占有且等待条件：当线程因为请求资源而阻塞的时候，对已经获得的资源保持不放。\n\n3.不可剥夺条件：线程对获得的资源为使用完成之前，不能被剥夺，只能使用完时由自己释放。\n\n4.循环等待条件：发生死锁时，必然存在一个进程和资源的环形链。\n\n\n# 3.3 怎么预防死锁？\n\n互斥条件无法被破坏，锁本身就是通过互斥来解决线程安全问题。\n\n1.资源一次性分配（破坏占用且等待的条件）\n\n2.可剥夺资源：进程已经获得部分资源，但得不到其他资源，则释放已占有的资源（破坏不可剥夺条件）\n\n3.资源有序分配：按顺序请求资源（破坏循环等待条件）",charsets:{cjk:!0}},{title:"多线程",frontmatter:{title:"多线程",date:"2022-05-06T22:43:06.000Z",permalink:"/pages/136ae8/",categories:["学习笔记","基础"],tags:["Java基础"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/24.%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",relativePath:"01.学习笔记/01.基础/24.多线程.md",key:"v-5e7d1eae",path:"/pages/136ae8/",headers:[{level:2,title:"1 线程的生命周期？",slug:"_1-线程的生命周期",normalizedTitle:"1 线程的生命周期？",charIndex:60},{level:2,title:"2 线程池有哪些核心参数？",slug:"_2-线程池有哪些核心参数",normalizedTitle:"2 线程池有哪些核心参数？",charIndex:554},{level:2,title:"3 线程池的执行流程？",slug:"_3-线程池的执行流程",normalizedTitle:"3 线程池的执行流程？",charIndex:1262},{level:2,title:"4 线程池的拒绝策略有哪几种？",slug:"_4-线程池的拒绝策略有哪几种",normalizedTitle:"4 线程池的拒绝策略有哪几种？",charIndex:1681},{level:2,title:"5 线程池的核心线程与最大线程数设置多少合适？",slug:"_5-线程池的核心线程与最大线程数设置多少合适",normalizedTitle:"5 线程池的核心线程与最大线程数设置多少合适？",charIndex:1968},{level:2,title:"6 多线程并行执行，汇总结果？",slug:"_6-多线程并行执行-汇总结果",normalizedTitle:"6 多线程并行执行，汇总结果？",charIndex:2127}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 线程的生命周期？ 2 线程池有哪些核心参数？ 3 线程池的执行流程？ 4 线程池的拒绝策略有哪几种？ 5 线程池的核心线程与最大线程数设置多少合适？ 6 多线程并行执行，汇总结果？",content:"提示\n\n线程（thread）是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。\n\n\n# 1 线程的生命周期？\n\n线程的生命周期主要包括了5种状态\n\nNEW新建、RUNNABLE就绪、RUNNING运行、BLOCKED阻塞、DEAD死亡。\n\nNEW：线程创建\n\nRUNNABLE：执行start方法\n\nRUNNING：分配到了CPU时间片，开始执行代码\n\nBLOCKED：\n\n• 等待阻塞：调用了o.wait()方法，该线程放入等待队列\n\n• 同步阻塞：获取对象锁时，锁被其他线程占用，该线程进入lock pool\n\n• 其他阻塞：sleep 或者 join方法时\n\n**DEAD：**线程执行完毕，或者抛出异常\n\n几个重要方法：\n\nsleep()：当前线程进入阻塞，但不释放对象锁。\n\nyield()：不会阻塞，让出cpu时间。\n\nt.join()：方法只会使主线程进入等待池并等待t线程执行完毕后才会被唤醒。并不影响同一时刻处在运行状态的其他线程。\n\nobj.wait()：当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。依靠notify()/notifyAll()唤醒。\n\nobj.notify()：唤醒任意在此对象监视器上等待的单个线程。\n\n\n# 2 线程池有哪些核心参数？\n\n1、int corePoolSize：核心池的大小。线程池的基本大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。\n\n这里需要注意的是：\n\n在创建ThreadPoolExecutor的时候，线程不会立即启动，要等到有任务提交时才启动，除非调用prestartCoreThread/prestartAllCoreThreads事先启动核心线程。\n\n再考虑到keepAliveTime和allowCoreThreadTimeOut超时参数的影响，所以没有任务需要执行的时候，线程池的大小不一定是corePoolSize。\n\n2、int maximumPoolSize：线程池最大线程数，它表示在线程池中最多能创建多少个线程。\n\n线程池中允许的最大线程数，线程池中的当前线程数目不会超过该值。\n\n如果队列中任务已满，并且当前线程个数小于maximumPoolSize，那么会创建新的线程来执行任务。\n\n3、long keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。\n\n4、TimeUnit unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性。\n\n5、BlockingQueue<Runnable> workQueue：一个阻塞队列，用来存储等待执行的任务。无界、有界、优先级、无缓冲区队列\n\n6、ThreadFactory threadFactory：线程工厂，主要用来创建线程。\n\n7、RejectedExecutionHandler handler：拒绝策略，表示当拒绝处理任务时的策略。\n\n\n# 3 线程池的执行流程？\n\n1、如果当前线程池中的线程数目小于corePoolSize，则来一个任务，就创建一个线程去执行这个任务。\n\n2、如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务队列当中。\n\n若添加成功，则该任务会等待空闲线程将其取出去执行。\n\n若添加失败（一般来说是任务缓存队列已满），则尝试创建新的线程去执行这个任务maximumPoolSize。\n\n3、如果当前线程池中的线程数目达到maximumPoolSize（此时线程池的任务缓存队列已满），则会采取任务拒绝策略进行处理；\n\n4、线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；\n\n如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。\n\n\n# 4 线程池的拒绝策略有哪几种？\n\n任务拒绝策略，通常有以下四种策略：\n\n1）ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。\n\n2）ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。\n\n3）ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务。\n\n4）ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务。\n\n\n# 5 线程池的核心线程与最大线程数设置多少合适？\n\n核心线程数：\n\nCPU密集型任务应配置尽可能小的线程，如配置NCPU+1个线程的线程池。\n\nIO密集型任务线程并不是一直在执行任务 ，则应配置尽可能多的线程，如2*NCPU 。\n\n最大线程数：\n\n最大线程数 = （最大任务数-队列容量）/每个线程每秒处理能力\n\n\n# 6 多线程并行执行，汇总结果？",normalizedContent:"提示\n\n线程（thread）是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。\n\n\n# 1 线程的生命周期？\n\n线程的生命周期主要包括了5种状态\n\nnew新建、runnable就绪、running运行、blocked阻塞、dead死亡。\n\nnew：线程创建\n\nrunnable：执行start方法\n\nrunning：分配到了cpu时间片，开始执行代码\n\nblocked：\n\n• 等待阻塞：调用了o.wait()方法，该线程放入等待队列\n\n• 同步阻塞：获取对象锁时，锁被其他线程占用，该线程进入lock pool\n\n• 其他阻塞：sleep 或者 join方法时\n\n**dead：**线程执行完毕，或者抛出异常\n\n几个重要方法：\n\nsleep()：当前线程进入阻塞，但不释放对象锁。\n\nyield()：不会阻塞，让出cpu时间。\n\nt.join()：方法只会使主线程进入等待池并等待t线程执行完毕后才会被唤醒。并不影响同一时刻处在运行状态的其他线程。\n\nobj.wait()：当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。依靠notify()/notifyall()唤醒。\n\nobj.notify()：唤醒任意在此对象监视器上等待的单个线程。\n\n\n# 2 线程池有哪些核心参数？\n\n1、int corepoolsize：核心池的大小。线程池的基本大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。\n\n这里需要注意的是：\n\n在创建threadpoolexecutor的时候，线程不会立即启动，要等到有任务提交时才启动，除非调用prestartcorethread/prestartallcorethreads事先启动核心线程。\n\n再考虑到keepalivetime和allowcorethreadtimeout超时参数的影响，所以没有任务需要执行的时候，线程池的大小不一定是corepoolsize。\n\n2、int maximumpoolsize：线程池最大线程数，它表示在线程池中最多能创建多少个线程。\n\n线程池中允许的最大线程数，线程池中的当前线程数目不会超过该值。\n\n如果队列中任务已满，并且当前线程个数小于maximumpoolsize，那么会创建新的线程来执行任务。\n\n3、long keepalivetime：表示线程没有任务执行时最多保持多久时间会终止。\n\n4、timeunit unit：参数keepalivetime的时间单位，有7种取值，在timeunit类中有7种静态属性。\n\n5、blockingqueue<runnable> workqueue：一个阻塞队列，用来存储等待执行的任务。无界、有界、优先级、无缓冲区队列\n\n6、threadfactory threadfactory：线程工厂，主要用来创建线程。\n\n7、rejectedexecutionhandler handler：拒绝策略，表示当拒绝处理任务时的策略。\n\n\n# 3 线程池的执行流程？\n\n1、如果当前线程池中的线程数目小于corepoolsize，则来一个任务，就创建一个线程去执行这个任务。\n\n2、如果当前线程池中的线程数目>=corepoolsize，则每来一个任务，会尝试将其添加到任务队列当中。\n\n若添加成功，则该任务会等待空闲线程将其取出去执行。\n\n若添加失败（一般来说是任务缓存队列已满），则尝试创建新的线程去执行这个任务maximumpoolsize。\n\n3、如果当前线程池中的线程数目达到maximumpoolsize（此时线程池的任务缓存队列已满），则会采取任务拒绝策略进行处理；\n\n4、线程池中的线程数量大于corepoolsize时，如果某线程空闲时间超过keepalivetime，线程将被终止，直至线程池中的线程数目不大于corepoolsize；\n\n如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepalivetime，线程也会被终止。\n\n\n# 4 线程池的拒绝策略有哪几种？\n\n任务拒绝策略，通常有以下四种策略：\n\n1）threadpoolexecutor.abortpolicy：丢弃任务并抛出rejectedexecutionexception异常。\n\n2）threadpoolexecutor.discardpolicy：也是丢弃任务，但是不抛出异常。\n\n3）threadpoolexecutor.discardoldestpolicy：丢弃队列最前面的任务，然后重新尝试执行任务。\n\n4）threadpoolexecutor.callerrunspolicy：由调用线程（提交任务的线程）处理该任务。\n\n\n# 5 线程池的核心线程与最大线程数设置多少合适？\n\n核心线程数：\n\ncpu密集型任务应配置尽可能小的线程，如配置ncpu+1个线程的线程池。\n\nio密集型任务线程并不是一直在执行任务 ，则应配置尽可能多的线程，如2*ncpu 。\n\n最大线程数：\n\n最大线程数 = （最大任务数-队列容量）/每个线程每秒处理能力\n\n\n# 6 多线程并行执行，汇总结果？",charsets:{cjk:!0}},{title:"设计模式",frontmatter:{title:"设计模式",date:"2022-04-28T18:05:42.000Z",permalink:"/pages/f8ee2e/",categories:["学习笔记"],tags:["Java基础"],author:{name:"luoxiaofeng"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/70.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",relativePath:"01.学习笔记/01.基础/70.设计模式.md",key:"v-7fecede3",path:"/pages/f8ee2e/",headers:[{level:2,title:"1、责任链模式",slug:"_1、责任链模式",normalizedTitle:"1、责任链模式",charIndex:11},{level:2,title:"2、建造者模式",slug:"_2、建造者模式",normalizedTitle:"2、建造者模式",charIndex:131},{level:2,title:"3、工厂模式（结合注解）",slug:"_3、工厂模式-结合注解",normalizedTitle:"3、工厂模式（结合注解）",charIndex:212},{level:2,title:"4、模版方法模式",slug:"_4、模版方法模式",normalizedTitle:"4、模版方法模式",charIndex:813},{level:2,title:"5、策略模式",slug:"_5、策略模式",normalizedTitle:"5、策略模式",charIndex:826}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1、责任链模式 2、建造者模式 3、工厂模式（结合注解） 4、模版方法模式 5、策略模式",content:"# 设计模式\n\n\n# 1、责任链模式\n\n为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。可以通过数据链表来实现职责链模式。\n\n\n# 2、建造者模式\n\n将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。\n\n\n# 3、工厂模式（结合注解）\n\n-----------------------------------------------------------------------\n\n@ConditionalOnBean:当IOC容器中有waybillOperationProcessor接口的实现类时，才会向容器中注入WaybillOperationProcessorFactory\n\n------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n\n# 4、模版方法模式\n\n\n# 5、策略模式",normalizedContent:"# 设计模式\n\n\n# 1、责任链模式\n\n为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。可以通过数据链表来实现职责链模式。\n\n\n# 2、建造者模式\n\n将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。\n\n\n# 3、工厂模式（结合注解）\n\n-----------------------------------------------------------------------\n\n@conditionalonbean:当ioc容器中有waybilloperationprocessor接口的实现类时，才会向容器中注入waybilloperationprocessorfactory\n\n------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n-----------------------------------------------------------------------\n\n\n# 4、模版方法模式\n\n\n# 5、策略模式",charsets:{cjk:!0}},{title:"内存模型",frontmatter:{title:"内存模型",date:"2022-05-07T13:47:30.000Z",permalink:"/pages/ed0ace/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/30.%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html",relativePath:"01.学习笔记/05.JVM/30.内存模型.md",key:"v-6fa5aec8",path:"/pages/ed0ace/",headers:[{level:2,title:"1 内存模型图",slug:"_1-内存模型图",normalizedTitle:"1 内存模型图",charIndex:2},{level:2,title:"2 JVM内存参数设置",slug:"_2-jvm内存参数设置",normalizedTitle:"2 jvm内存参数设置",charIndex:14},{level:2,title:"3 为什么要将永久代（PermGen）替换为元空间（MetaSpace）？",slug:"_3-为什么要将永久代-permgen-替换为元空间-metaspace",normalizedTitle:"3 为什么要将永久代（permgen）替换为元空间（metaspace）？",charIndex:86},{level:2,title:"4 JVM内存模型包括哪些数据区域？",slug:"_4-jvm内存模型包括哪些数据区域",normalizedTitle:"4 jvm内存模型包括哪些数据区域？",charIndex:176},{level:3,title:"4.1 方法区（元空间）",slug:"_4-1-方法区-元空间",normalizedTitle:"4.1 方法区（元空间）",charIndex:271},{level:3,title:"4.2 堆",slug:"_4-2-堆",normalizedTitle:"4.2 堆",charIndex:349},{level:3,title:"4.3 栈",slug:"_4-3-栈",normalizedTitle:"4.3 栈",charIndex:466},{level:3,title:"4.4 本地方法栈",slug:"_4-4-本地方法栈",normalizedTitle:"4.4 本地方法栈",charIndex:707},{level:3,title:"4.5 程序计数器",slug:"_4-5-程序计数器",normalizedTitle:"4.5 程序计数器",charIndex:860}],excerpt:'<h2 id="_1-内存模型图"><a class="header-anchor" href="#_1-内存模型图">#</a> 1 内存模型图</h2>\n<img src="/img/media/90c03b577608a9ec1503e8b44f6828dd.png" class="imgcss" width="70%">\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 内存模型图 2 JVM内存参数设置 3 为什么要将永久代（PermGen）替换为元空间（MetaSpace）？ 4 JVM内存模型包括哪些数据区域？ 4.1 方法区（元空间） 4.2 堆 4.3 栈 4.4 本地方法栈 4.5 程序计数器",content:"# 1 内存模型图\n\n\n# 2 JVM内存参数设置\n\n-Xss设越小count值越小，说明一个线程栈里能分配的栈帧就越少，但对JVM整体来说能开启的线程数会更多。\n\n\n# 3 为什么要将永久代（PermGen）替换为元空间（MetaSpace）？\n\n1.永久代受限于JVM本身设置的固定大小上限。元空间使用的是直接内存，只受本机可用内存限制。\n\n\n# 4 JVM内存模型包括哪些数据区域？\n\n主要包括5大块。\n\n1.方法区（元空间），堆都为数据共享区域，有线程安全问题。\n\n2.栈、本地方法栈、程序计数器为独享区域，不存在线程问题。\n\n\n# 4.1 方法区（元空间）\n\n存储已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码等数据。方法区还有一个别名叫Non-Heap（非堆）。\n\n\n# 4.2 堆\n\n此内存区域的唯一目的就是存放对象实例，几乎所有对象实例以及数组都在这里分配内存。\n\nJDK1.7之后开始默认开启逃逸分析：如果某些方法中的对象没有被返回或者未被外面引用（未逃逸），那么该对象可以在栈上分配内存。\n\n\n# 4.3 栈\n\n栈也就是Java虚拟机栈，由一个个栈帧组成，每个栈帧拥有：\n\n局部变量表、操作数栈、动态链接、方法出口信息。\n\n局部变量表主要存放编译期可知的各种数据类型（byte、short、int、long、float、double、boolean、char）、对象引用。\n\n每一次方法的调用都会有一个对应的栈帧被压入java栈，方法调用结束后，栈帧弹出。\n\nJava方法有2种返回方式：\n\n1.return语句。\n\n2.抛出异常。\n\n不管哪种返回方式都会导致栈帧弹出。\n\n\n# 4.4 本地方法栈\n\n和虚拟机栈发挥的作用非常相似，区别是：虚拟机栈执行的是Java方法服务，本地方法栈执行的是Native方法服务。\n\n本地方法执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n本地方法执行完毕后也会出栈并释放内存空间。\n\n\n# 4.5 程序计数器\n\n每条线程都有独立的程序计数器，各线程之间计数器互不影响。",normalizedContent:"# 1 内存模型图\n\n\n# 2 jvm内存参数设置\n\n-xss设越小count值越小，说明一个线程栈里能分配的栈帧就越少，但对jvm整体来说能开启的线程数会更多。\n\n\n# 3 为什么要将永久代（permgen）替换为元空间（metaspace）？\n\n1.永久代受限于jvm本身设置的固定大小上限。元空间使用的是直接内存，只受本机可用内存限制。\n\n\n# 4 jvm内存模型包括哪些数据区域？\n\n主要包括5大块。\n\n1.方法区（元空间），堆都为数据共享区域，有线程安全问题。\n\n2.栈、本地方法栈、程序计数器为独享区域，不存在线程问题。\n\n\n# 4.1 方法区（元空间）\n\n存储已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码等数据。方法区还有一个别名叫non-heap（非堆）。\n\n\n# 4.2 堆\n\n此内存区域的唯一目的就是存放对象实例，几乎所有对象实例以及数组都在这里分配内存。\n\njdk1.7之后开始默认开启逃逸分析：如果某些方法中的对象没有被返回或者未被外面引用（未逃逸），那么该对象可以在栈上分配内存。\n\n\n# 4.3 栈\n\n栈也就是java虚拟机栈，由一个个栈帧组成，每个栈帧拥有：\n\n局部变量表、操作数栈、动态链接、方法出口信息。\n\n局部变量表主要存放编译期可知的各种数据类型（byte、short、int、long、float、double、boolean、char）、对象引用。\n\n每一次方法的调用都会有一个对应的栈帧被压入java栈，方法调用结束后，栈帧弹出。\n\njava方法有2种返回方式：\n\n1.return语句。\n\n2.抛出异常。\n\n不管哪种返回方式都会导致栈帧弹出。\n\n\n# 4.4 本地方法栈\n\n和虚拟机栈发挥的作用非常相似，区别是：虚拟机栈执行的是java方法服务，本地方法栈执行的是native方法服务。\n\n本地方法执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n本地方法执行完毕后也会出栈并释放内存空间。\n\n\n# 4.5 程序计数器\n\n每条线程都有独立的程序计数器，各线程之间计数器互不影响。",charsets:{cjk:!0}},{title:"类加载",frontmatter:{title:"类加载",date:"2022-05-07T13:52:06.000Z",permalink:"/pages/d8d213/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/33.%E7%B1%BB%E5%8A%A0%E8%BD%BD.html",relativePath:"01.学习笔记/05.JVM/33.类加载.md",key:"v-a7964952",path:"/pages/d8d213/",headers:[{level:2,title:"1 类的加载流程？",slug:"_1-类的加载流程",normalizedTitle:"1 类的加载流程？",charIndex:2},{level:3,title:"1.1 加载",slug:"_1-1-加载",normalizedTitle:"1.1 加载",charIndex:31},{level:3,title:"1.2 验证",slug:"_1-2-验证",normalizedTitle:"1.2 验证",charIndex:156},{level:3,title:"1.3 准备",slug:"_1-3-准备",normalizedTitle:"1.3 准备",charIndex:197},{level:3,title:"1.4 解析",slug:"_1-4-解析",normalizedTitle:"1.4 解析",charIndex:229},{level:3,title:"1.5 初始化",slug:"_1-5-初始化",normalizedTitle:"1.5 初始化",charIndex:291},{level:3,title:"1.6 卸载",slug:"_1-6-卸载",normalizedTitle:"1.6 卸载",charIndex:326},{level:2,title:"2 双亲委派机制",slug:"_2-双亲委派机制",normalizedTitle:"2 双亲委派机制",charIndex:482},{level:3,title:"2.1 为什么要设计双亲委派机制?",slug:"_2-1-为什么要设计双亲委派机制",normalizedTitle:"2.1 为什么要设计双亲委派机制?",charIndex:495},{level:3,title:"2.2 双亲委派的加载顺序？",slug:"_2-2-双亲委派的加载顺序",normalizedTitle:"2.2 双亲委派的加载顺序？",charIndex:639},{level:3,title:"2.3 怎么实现自定义加载器？",slug:"_2-3-怎么实现自定义加载器",normalizedTitle:"2.3 怎么实现自定义加载器？",charIndex:918},{level:3,title:"2.4 怎么打破双亲委派机制？",slug:"_2-4-怎么打破双亲委派机制",normalizedTitle:"2.4 怎么打破双亲委派机制？",charIndex:1049}],excerpt:'<h2 id="_1-类的加载流程"><a class="header-anchor" href="#_1-类的加载流程">#</a> 1 类的加载流程？</h2>\n<p>一个类的完整生命周期如下：</p>\n<img src="/img/media/92be1cfff48e53610f6e5d74b71d15d4.png" class="imgcss" width="70%">\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 类的加载流程？ 1.1 加载 1.2 验证 1.3 准备 1.4 解析 1.5 初始化 1.6 卸载 2 双亲委派机制 2.1 为什么要设计双亲委派机制? 2.2 双亲委派的加载顺序？ 2.3 怎么实现自定义加载器？ 2.4 怎么打破双亲委派机制？",content:"# 1 类的加载流程？\n\n一个类的完整生命周期如下：\n\n\n# 1.1 加载\n\n类加载过程的第一步，主要完成3件事情：\n\n1.通过全类名获取定义此类的二进制字节流。\n\n2.将字节流信息转换成方法区的数据结构。\n\n3.在方法区（元空间）内存中生成一个代表该类的Class对象，作为方法区这些数据的访问入口。\n\n\n# 1.2 验证\n\n确保加载的类符合JVM规范和安全，其实就是一个安全检查。\n\n\n# 1.3 准备\n\n为静态变量分配内存并赋予默认值的阶段。\n\n\n# 1.4 解析\n\n虚拟机将常量池内的符号引用替换为直接引用。\n\n也就是得到类或者字段、方法在内存中的指针或者偏移量。\n\n\n# 1.5 初始化\n\n初始化静态变量为指定的值，执行静态代码块。\n\n\n# 1.6 卸载\n\n卸载类即该类的Class对象被GC。\n\n卸载需要满足3个条件：\n\n1.该类的所有实例对象已被GC。\n\n2.该类没有在其他任何地方被引用。\n\n3.该类的类加载器的实例已被GC。\n\n所以，在JVM生命周期内，由jvm自带的类加载器加载的类是不会被卸载的。自定义的类加载器加载的类可能被卸载。\n\n\n# 2 双亲委派机制\n\n\n# 2.1 为什么要设计双亲委派机制?\n\n1）沙箱安全机制:自己写的java.lang.String.class类不会被加载，这样便可以防止核心API库被随意篡改。\n\n2）避免类的重复加载:当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次，保证被加载类的唯一性。\n\n\n# 2.2 双亲委派的加载顺序？\n\n双亲委派加载顺序为什么要从:\n\nAppcClassLoader -> ExtClassLoader -> BootstrapClassLoader -> ExtClassLoader -> AppcClassLoader\n\n为什么不直接:\n\nBootstrapClassLoader -> ExtClassLoader -> AppcClassLoader\n\n答：开发的应用中大部分用到的是appclassloader，第一次加载会麻烦一点，但是第二次加载如果发现该类已经加载过（c++实现），则直接用该加载器加载。\n\n\n# 2.3 怎么实现自定义加载器？\n\n继承ClassLoader，重写ClassLoader类中的findClass方法。\n\n除了BootstrapClassLoader，其他类加载器均由Java实现且全部继承自java.lang.ClassLoader。\n\n\n# 2.4 怎么打破双亲委派机制？\n\n重写loadClass方法。",normalizedContent:"# 1 类的加载流程？\n\n一个类的完整生命周期如下：\n\n\n# 1.1 加载\n\n类加载过程的第一步，主要完成3件事情：\n\n1.通过全类名获取定义此类的二进制字节流。\n\n2.将字节流信息转换成方法区的数据结构。\n\n3.在方法区（元空间）内存中生成一个代表该类的class对象，作为方法区这些数据的访问入口。\n\n\n# 1.2 验证\n\n确保加载的类符合jvm规范和安全，其实就是一个安全检查。\n\n\n# 1.3 准备\n\n为静态变量分配内存并赋予默认值的阶段。\n\n\n# 1.4 解析\n\n虚拟机将常量池内的符号引用替换为直接引用。\n\n也就是得到类或者字段、方法在内存中的指针或者偏移量。\n\n\n# 1.5 初始化\n\n初始化静态变量为指定的值，执行静态代码块。\n\n\n# 1.6 卸载\n\n卸载类即该类的class对象被gc。\n\n卸载需要满足3个条件：\n\n1.该类的所有实例对象已被gc。\n\n2.该类没有在其他任何地方被引用。\n\n3.该类的类加载器的实例已被gc。\n\n所以，在jvm生命周期内，由jvm自带的类加载器加载的类是不会被卸载的。自定义的类加载器加载的类可能被卸载。\n\n\n# 2 双亲委派机制\n\n\n# 2.1 为什么要设计双亲委派机制?\n\n1）沙箱安全机制:自己写的java.lang.string.class类不会被加载，这样便可以防止核心api库被随意篡改。\n\n2）避免类的重复加载:当父亲已经加载了该类时，就没有必要子classloader再加载一次，保证被加载类的唯一性。\n\n\n# 2.2 双亲委派的加载顺序？\n\n双亲委派加载顺序为什么要从:\n\nappcclassloader -> extclassloader -> bootstrapclassloader -> extclassloader -> appcclassloader\n\n为什么不直接:\n\nbootstrapclassloader -> extclassloader -> appcclassloader\n\n答：开发的应用中大部分用到的是appclassloader，第一次加载会麻烦一点，但是第二次加载如果发现该类已经加载过（c++实现），则直接用该加载器加载。\n\n\n# 2.3 怎么实现自定义加载器？\n\n继承classloader，重写classloader类中的findclass方法。\n\n除了bootstrapclassloader，其他类加载器均由java实现且全部继承自java.lang.classloader。\n\n\n# 2.4 怎么打破双亲委派机制？\n\n重写loadclass方法。",charsets:{cjk:!0}},{title:"虚拟机对象",frontmatter:{title:"虚拟机对象",date:"2022-05-07T13:55:39.000Z",permalink:"/pages/16dbc6/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/36.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1.html",relativePath:"01.学习笔记/05.JVM/36.虚拟机对象.md",key:"v-8c35a806",path:"/pages/16dbc6/",headers:[{level:2,title:"1 对象的创建包含哪些步骤？",slug:"_1-对象的创建包含哪些步骤",normalizedTitle:"1 对象的创建包含哪些步骤？",charIndex:2},{level:3,title:"1.1 类加载检查",slug:"_1-1-类加载检查",normalizedTitle:"1.1 类加载检查",charIndex:21},{level:3,title:"1.2内存分配",slug:"_1-2内存分配",normalizedTitle:"1.2内存分配",charIndex:159},{level:5,title:"1.2.1 内存分配有哪些方式？",slug:"_1-2-1-内存分配有哪些方式",normalizedTitle:"1.2.1 内存分配有哪些方式？",charIndex:253},{level:6,title:"1 指针碰撞",slug:"_1-指针碰撞",normalizedTitle:"1 指针碰撞",charIndex:355},{level:6,title:"2 空闲列表",slug:"_2-空闲列表",normalizedTitle:"2 空闲列表",charIndex:494},{level:5,title:"1.2.2 内存分配的并发问题怎么解决？",slug:"_1-2-2-内存分配的并发问题怎么解决",normalizedTitle:"1.2.2 内存分配的并发问题怎么解决？",charIndex:610},{level:6,title:"1 CAS+失败重试",slug:"_1-cas-失败重试",normalizedTitle:"1 cas+失败重试",charIndex:677},{level:6,title:"2 TLAB",slug:"_2-tlab",normalizedTitle:"2 tlab",charIndex:722},{level:3,title:"1.3 初始化零值",slug:"_1-3-初始化零值",normalizedTitle:"1.3 初始化零值",charIndex:865},{level:3,title:"1.4 设置对象头",slug:"_1-4-设置对象头",normalizedTitle:"1.4 设置对象头",charIndex:937},{level:3,title:"1.5 执行init方法",slug:"_1-5-执行init方法",normalizedTitle:"1.5 执行init方法",charIndex:1066},{level:2,title:"2 对象栈上分配",slug:"_2-对象栈上分配",normalizedTitle:"2 对象栈上分配",charIndex:1132},{level:3,title:"2.1 对象逃逸分析",slug:"_2-1-对象逃逸分析",normalizedTitle:"2.1 对象逃逸分析",charIndex:1336},{level:3,title:"2.2 标量替换",slug:"_2-2-标量替换",normalizedTitle:"2.2 标量替换",charIndex:1408},{level:2,title:"3 对象的内存布局",slug:"_3-对象的内存布局",normalizedTitle:"3 对象的内存布局",charIndex:1557},{level:3,title:"3.1 对象头",slug:"_3-1-对象头",normalizedTitle:"3.1 对象头",charIndex:1605},{level:5,title:"1 Mark Word",slug:"_1-mark-word",normalizedTitle:"1 mark word",charIndex:1660},{level:5,title:"2 指向类的指针",slug:"_2-指向类的指针",normalizedTitle:"2 指向类的指针",charIndex:1745},{level:5,title:"3 数组长度（只有数组对象有）",slug:"_3-数组长度-只有数组对象有",normalizedTitle:"3 数组长度（只有数组对象有）",charIndex:1817},{level:3,title:"3.2 实例数据",slug:"_3-2-实例数据",normalizedTitle:"3.2 实例数据",charIndex:1865},{level:3,title:"3.3 对齐填充",slug:"_3-3-对齐填充",normalizedTitle:"3.3 对齐填充",charIndex:1911},{level:2,title:"4 对象的访问定位",slug:"_4-对象的访问定位",normalizedTitle:"4 对象的访问定位",charIndex:2013},{level:3,title:"4.1 句柄",slug:"_4-1-句柄",normalizedTitle:"4.1 句柄",charIndex:2164},{level:3,title:"4.2 直接指针",slug:"_4-2-直接指针",normalizedTitle:"4.2 直接指针",charIndex:2244},{level:3,title:"4.3 两种访问方式各有什么优势？",slug:"_4-3-两种访问方式各有什么优势",normalizedTitle:"4.3 两种访问方式各有什么优势？",charIndex:2301}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 对象的创建包含哪些步骤？ 1.1 类加载检查 1.2内存分配 1.2.1 内存分配有哪些方式？ 1 指针碰撞 2 空闲列表 1.2.2 内存分配的并发问题怎么解决？ 1 CAS+失败重试 2 TLAB 1.3 初始化零值 1.4 设置对象头 1.5 执行init方法 2 对象栈上分配 2.1 对象逃逸分析 2.2 标量替换 3 对象的内存布局 3.1 对象头 1 Mark Word 2 指向类的指针 3 数组长度（只有数组对象有） 3.2 实例数据 3.3 对齐填充 4 对象的访问定位 4.1 句柄 4.2 直接指针 4.3 两种访问方式各有什么优势？",content:"# 1 对象的创建包含哪些步骤？\n\n\n# 1.1 类加载检查\n\n虚拟机遇到一条new指令时，首先去检查这个指令的参数能否在Class常量池中定位到一个类的符号引用，且检查这个符号引用代表的类是否已加载、解析和初始化过。如果没有，先执行相应的类加载过程。\n\nnew指令指：new关键词、对象克隆、对象序列化等。\n\n\n# 1.2内存分配\n\n在类加载检查通过后，接下来虚拟机将为新生对象分配内存。\n\n对象所需的内存大小在类加载完成后便可确定，为对象分配内存等同把一块确定大小的内存从java堆中划分出来。\n\n# 1.2.1 内存分配有哪些方式？\n\n分配内存的方式有 指针碰撞 和 空闲列表 2种。\n\n选择哪种分配方式由java堆是否规整决定，而java堆是否规整又由所采用的垃圾收集器是否有压缩整理功能决定。\n\n# 1 指针碰撞\n\n适用场合：堆内存规整（即没有内存碎片）的情况下。\n\n原理：所有用过的内存全部整合到一边，没有用过的内存放在另外一边，中间有一个分界指针，只需要向着没用过的内存方向将指针移动对象内存大小位置即可。\n\n使用该分配方式的GC收集器：Serial，ParNew。\n\n# 2 空闲列表\n\n适用场合：堆内存不规整的情况下。\n\n原理：JVM维护一个列表，该列表会记录哪些内存块是可用的，在分配内存的时候，找到一块足够大的内存块划分给对象实例，最后更新列表记录。\n\n使用该分配方式的GC收集器：CMS。\n\n# 1.2.2 内存分配的并发问题怎么解决？\n\n创建对象是很频繁的问题，需保证线程安全。目前，虚拟机采用了2种方式来保证线程安全：\n\n# 1 CAS+失败重试\n\nCAS操作失败就重试，直到成功为止。保证更新操作的原子性。\n\n# 2 TLAB\n\n缓冲区（Thread Local Allocation Buffer）\n\nJVM为每一个线程预先在Eden区分配一块内存，给线程中的对象分配内存时，先在TLAB上分配，当对象大于TLAB的剩余内存或TLAB的内存用尽时，采用 CAS+失败重试 的方式分配内存。\n\n\n# 1.3 初始化零值\n\n内存分配完成后，JVM将分配到的内存空间都初始化为零值。\n\n这一步保证了对象的实例字段可以不赋初始值就直接使用。\n\n\n# 1.4 设置对象头\n\n初始化零值完成后，JVM开始设置对象头。\n\n对象头主要包括2部分信息（如果是数组对象，还有一个数组长度）：\n\n1.哈希码、GC分代年龄、锁状态标识等。\n\n2.指向类元数据的指针，JVM通过这个指针来确定这个对象是哪个类的实例。\n\n\n# 1.5 执行init方法\n\n执行innit方法，对应到语言层面上讲，就是为属性赋值（与上面的赋零值不同），和执行构造方法。\n\n\n# 2 对象栈上分配\n\n通过创建对象时的内存分配可以知道JAVA中的对象都是在堆上进行分配，需要依靠GC进行内存回收，如果对象数量较多的时候，会给GC带来较大压力，间接影响应用的性能。\n\nJVM通过逃逸分析来确定方法内的对象会不会被外部访问（即会不会“逃逸”），如果不会逃逸就可以在栈上给该对象分配内存，这样该对象所占用的内存空间就可以随着栈帧的出栈而销毁。\n\n栈上分配一般同时依赖逃逸分析和标量替换。\n\n\n# 2.1 对象逃逸分析\n\n就是分析方法内对象是否会被外部引用（是否逃逸），未逃逸的对象在栈上分配内存。\n\nJDK7之后默认开启逃逸分析。\n\n\n# 2.2 标量替换\n\n标量和聚合量：\n\n1.基础类型和对象的引用可以理解为标量，它们不能被进一步分解。\n\n2.能被进一步分解的就是聚合量，比如：对象。\n\n标量替换：将对象成员变量分解成分散的变量，这些分散的变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。\n\n\n# 3 对象的内存布局\n\n对象在内存中的布局可以分为3块区域：对象头、实例数据和对齐填充。\n\n\n# 3.1 对象头\n\n对象头主要由3部分组成：Mark Word、指向类的指针、数组长度（只有数组对象有）\n\n# 1 Mark Word\n\nMark Word记录了哈希码、GC分代年龄、锁标识等信息。\n\n在32位的JVM中长度是32bit，在64位的JVM中长度是64bit。\n\n# 2 指向类的指针\n\nJAVA对象的类数据保存在方法区。\n\n该指针在32位的JVM中长度是32bit，在64位的JVM中长度是64bit。\n\n# 3 数组长度（只有数组对象有）\n\n该对象在32位和64位的JVM中长度都是32bit。\n\n\n# 3.2 实例数据\n\n对象真正存储的有效信息，也就是程序中定义的各种类型的字段内容。\n\n\n# 3.3 对齐填充\n\n对齐填充不是必然存在的，只是因为Hotspot要求对象大小必须是8字节的整数倍。\n\n而对象头部分是8字节的倍数（1倍或2倍），所以实例数据部分没有对齐时，需要对齐填充来补全。\n\n\n# 4 对象的访问定位\n\nJAVA程序通过栈上的reference数据来操作堆上的具体对象。由于reference类型在JVM规范中只定义了一个指向对象的引用，没有说明这个引用通过何种方式去定位、访问堆中对象的具体位置，所以访问的方式取决于JVM的实现。目前主要的访问方式由2种：句柄和直接指针。\n\n\n# 4.1 句柄\n\nJAVA堆中会划分出一块内存来作为句柄池，reference存放的是对象的句柄地址，而句柄中包括对象实例的地址和对象Class的地址。\n\n\n# 4.2 直接指针\n\nreference存放的是对象实例地址。对象实例数据的对象头里包含Class的地址。\n\n\n# 4.3 两种访问方式各有什么优势？\n\n1.句柄访问最大的好处是reference中存储的是稳定的句柄地址，对象移动时只会改变句柄中的实例数据指针，reference不需要修改。\n\n2.直接指针访问的好处是速度快，减少了一次指针定位的时间开销。",normalizedContent:"# 1 对象的创建包含哪些步骤？\n\n\n# 1.1 类加载检查\n\n虚拟机遇到一条new指令时，首先去检查这个指令的参数能否在class常量池中定位到一个类的符号引用，且检查这个符号引用代表的类是否已加载、解析和初始化过。如果没有，先执行相应的类加载过程。\n\nnew指令指：new关键词、对象克隆、对象序列化等。\n\n\n# 1.2内存分配\n\n在类加载检查通过后，接下来虚拟机将为新生对象分配内存。\n\n对象所需的内存大小在类加载完成后便可确定，为对象分配内存等同把一块确定大小的内存从java堆中划分出来。\n\n# 1.2.1 内存分配有哪些方式？\n\n分配内存的方式有 指针碰撞 和 空闲列表 2种。\n\n选择哪种分配方式由java堆是否规整决定，而java堆是否规整又由所采用的垃圾收集器是否有压缩整理功能决定。\n\n# 1 指针碰撞\n\n适用场合：堆内存规整（即没有内存碎片）的情况下。\n\n原理：所有用过的内存全部整合到一边，没有用过的内存放在另外一边，中间有一个分界指针，只需要向着没用过的内存方向将指针移动对象内存大小位置即可。\n\n使用该分配方式的gc收集器：serial，parnew。\n\n# 2 空闲列表\n\n适用场合：堆内存不规整的情况下。\n\n原理：jvm维护一个列表，该列表会记录哪些内存块是可用的，在分配内存的时候，找到一块足够大的内存块划分给对象实例，最后更新列表记录。\n\n使用该分配方式的gc收集器：cms。\n\n# 1.2.2 内存分配的并发问题怎么解决？\n\n创建对象是很频繁的问题，需保证线程安全。目前，虚拟机采用了2种方式来保证线程安全：\n\n# 1 cas+失败重试\n\ncas操作失败就重试，直到成功为止。保证更新操作的原子性。\n\n# 2 tlab\n\n缓冲区（thread local allocation buffer）\n\njvm为每一个线程预先在eden区分配一块内存，给线程中的对象分配内存时，先在tlab上分配，当对象大于tlab的剩余内存或tlab的内存用尽时，采用 cas+失败重试 的方式分配内存。\n\n\n# 1.3 初始化零值\n\n内存分配完成后，jvm将分配到的内存空间都初始化为零值。\n\n这一步保证了对象的实例字段可以不赋初始值就直接使用。\n\n\n# 1.4 设置对象头\n\n初始化零值完成后，jvm开始设置对象头。\n\n对象头主要包括2部分信息（如果是数组对象，还有一个数组长度）：\n\n1.哈希码、gc分代年龄、锁状态标识等。\n\n2.指向类元数据的指针，jvm通过这个指针来确定这个对象是哪个类的实例。\n\n\n# 1.5 执行init方法\n\n执行innit方法，对应到语言层面上讲，就是为属性赋值（与上面的赋零值不同），和执行构造方法。\n\n\n# 2 对象栈上分配\n\n通过创建对象时的内存分配可以知道java中的对象都是在堆上进行分配，需要依靠gc进行内存回收，如果对象数量较多的时候，会给gc带来较大压力，间接影响应用的性能。\n\njvm通过逃逸分析来确定方法内的对象会不会被外部访问（即会不会“逃逸”），如果不会逃逸就可以在栈上给该对象分配内存，这样该对象所占用的内存空间就可以随着栈帧的出栈而销毁。\n\n栈上分配一般同时依赖逃逸分析和标量替换。\n\n\n# 2.1 对象逃逸分析\n\n就是分析方法内对象是否会被外部引用（是否逃逸），未逃逸的对象在栈上分配内存。\n\njdk7之后默认开启逃逸分析。\n\n\n# 2.2 标量替换\n\n标量和聚合量：\n\n1.基础类型和对象的引用可以理解为标量，它们不能被进一步分解。\n\n2.能被进一步分解的就是聚合量，比如：对象。\n\n标量替换：将对象成员变量分解成分散的变量，这些分散的变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。\n\n\n# 3 对象的内存布局\n\n对象在内存中的布局可以分为3块区域：对象头、实例数据和对齐填充。\n\n\n# 3.1 对象头\n\n对象头主要由3部分组成：mark word、指向类的指针、数组长度（只有数组对象有）\n\n# 1 mark word\n\nmark word记录了哈希码、gc分代年龄、锁标识等信息。\n\n在32位的jvm中长度是32bit，在64位的jvm中长度是64bit。\n\n# 2 指向类的指针\n\njava对象的类数据保存在方法区。\n\n该指针在32位的jvm中长度是32bit，在64位的jvm中长度是64bit。\n\n# 3 数组长度（只有数组对象有）\n\n该对象在32位和64位的jvm中长度都是32bit。\n\n\n# 3.2 实例数据\n\n对象真正存储的有效信息，也就是程序中定义的各种类型的字段内容。\n\n\n# 3.3 对齐填充\n\n对齐填充不是必然存在的，只是因为hotspot要求对象大小必须是8字节的整数倍。\n\n而对象头部分是8字节的倍数（1倍或2倍），所以实例数据部分没有对齐时，需要对齐填充来补全。\n\n\n# 4 对象的访问定位\n\njava程序通过栈上的reference数据来操作堆上的具体对象。由于reference类型在jvm规范中只定义了一个指向对象的引用，没有说明这个引用通过何种方式去定位、访问堆中对象的具体位置，所以访问的方式取决于jvm的实现。目前主要的访问方式由2种：句柄和直接指针。\n\n\n# 4.1 句柄\n\njava堆中会划分出一块内存来作为句柄池，reference存放的是对象的句柄地址，而句柄中包括对象实例的地址和对象class的地址。\n\n\n# 4.2 直接指针\n\nreference存放的是对象实例地址。对象实例数据的对象头里包含class的地址。\n\n\n# 4.3 两种访问方式各有什么优势？\n\n1.句柄访问最大的好处是reference中存储的是稳定的句柄地址，对象移动时只会改变句柄中的实例数据指针，reference不需要修改。\n\n2.直接指针访问的好处是速度快，减少了一次指针定位的时间开销。",charsets:{cjk:!0}},{title:"垃圾回收",frontmatter:{title:"垃圾回收",date:"2022-05-07T14:22:14.000Z",permalink:"/pages/c026dc/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/39.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html",relativePath:"01.学习笔记/05.JVM/39.垃圾回收.md",key:"v-31dd3304",path:"/pages/c026dc/",headers:[{level:2,title:"1 JAVA堆的内存分配与回收",slug:"_1-java堆的内存分配与回收",normalizedTitle:"1 java堆的内存分配与回收",charIndex:91},{level:2,title:"2 空间分配担保",slug:"_2-空间分配担保",normalizedTitle:"2 空间分配担保",charIndex:282},{level:2,title:"3 怎么判断对象已经死亡？",slug:"_3-怎么判断对象已经死亡",normalizedTitle:"3 怎么判断对象已经死亡？",charIndex:418},{level:3,title:"3.1 引用计数法",slug:"_3-1-引用计数法",normalizedTitle:"3.1 引用计数法",charIndex:436},{level:3,title:"3.2 可达性分析算法",slug:"_3-2-可达性分析算法",normalizedTitle:"3.2 可达性分析算法",charIndex:579},{level:5,title:"1 介绍",slug:"_1-介绍",normalizedTitle:"1 介绍",charIndex:594},{level:5,title:"2 哪些对象可以作为GC Roots呢？",slug:"_2-哪些对象可以作为gc-roots呢",normalizedTitle:"2 哪些对象可以作为gc roots呢？",charIndex:754},{level:2,title:"4 怎么判断一个类是无用的类？",slug:"_4-怎么判断一个类是无用的类",normalizedTitle:"4 怎么判断一个类是无用的类？",charIndex:856},{level:2,title:"5 垃圾收集算法",slug:"_5-垃圾收集算法",normalizedTitle:"5 垃圾收集算法",charIndex:1035},{level:3,title:"5.1 标记-清除算法",slug:"_5-1-标记-清除算法",normalizedTitle:"5.1 标记-清除算法",charIndex:1048},{level:3,title:"5.2 标记-复制算法",slug:"_5-2-标记-复制算法",normalizedTitle:"5.2 标记-复制算法",charIndex:1203},{level:3,title:"5.3 标记-整理算法",slug:"_5-3-标记-整理算法",normalizedTitle:"5.3 标记-整理算法",charIndex:1313},{level:3,title:"5.4 分代收集算法",slug:"_5-4-分代收集算法",normalizedTitle:"5.4 分代收集算法",charIndex:1400},{level:2,title:"6 垃圾收集器",slug:"_6-垃圾收集器",normalizedTitle:"6 垃圾收集器",charIndex:1654},{level:3,title:"6.1 Serial收集器",slug:"_6-1-serial收集器",normalizedTitle:"6.1 serial收集器",charIndex:1666},{level:3,title:"6.2 ParNew收集器(-XX:+UseParNewGC)",slug:"_6-2-parnew收集器-xx-useparnewgc",normalizedTitle:"6.2 parnew收集器(-xx:+useparnewgc)",charIndex:1830},{level:3,title:"6.3 Parallel Scanvenge 收集器",slug:"_6-3-parallel-scanvenge-收集器",normalizedTitle:"6.3 parallel scanvenge 收集器",charIndex:1949},{level:3,title:"6.4 CMS收集器（4-8G）",slug:"_6-4-cms收集器-4-8g",normalizedTitle:"6.4 cms收集器（4-8g）",charIndex:2073},{level:5,title:"6.4.1介绍",slug:"_6-4-1介绍",normalizedTitle:"6.4.1介绍",charIndex:2123},{level:5,title:"6.4.2 CMS优缺点",slug:"_6-4-2-cms优缺点",normalizedTitle:"6.4.2 cms优缺点",charIndex:2710},{level:3,title:"6.5 G1收集器",slug:"_6-5-g1收集器",normalizedTitle:"6.5 g1收集器",charIndex:3088},{level:3,title:"6.6 如何选择垃圾收集器？",slug:"_6-6-如何选择垃圾收集器",normalizedTitle:"6.6 如何选择垃圾收集器？",charIndex:3252},{level:2,title:"7 三色标记",slug:"_7-三色标记",normalizedTitle:"7 三色标记",charIndex:3491},{level:3,title:"7.1 介绍",slug:"_7-1-介绍",normalizedTitle:"7.1 介绍",charIndex:3502},{level:3,title:"7.2 浮动垃圾（多标）",slug:"_7-2-浮动垃圾-多标",normalizedTitle:"7.2 浮动垃圾（多标）",charIndex:3954},{level:3,title:"7.3 漏标",slug:"_7-3-漏标",normalizedTitle:"7.3 漏标",charIndex:4184},{level:2,title:"8 GC安全点与安全区域",slug:"_8-gc安全点与安全区域",normalizedTitle:"8 gc安全点与安全区域",charIndex:4455},{level:3,title:"8.1 GC安全点",slug:"_8-1-gc安全点",normalizedTitle:"8.1 gc安全点",charIndex:4472},{level:3,title:"8.2 安全区域",slug:"_8-2-安全区域",normalizedTitle:"8.2 安全区域",charIndex:4642}],excerpt:'<p><strong>内存回收很多优化无非就是让短期存活的对象尽量都留在survivor里，不要进入老年代，这样在minor gc的时候这些对象都会被回收，不会进到老年代从而导致full gc。</strong></p>\n<h2 id="_1-java堆的内存分配与回收"><a class="header-anchor" href="#_1-java堆的内存分配与回收">#</a> 1 JAVA堆的内存分配与回收</h2>\n<p><strong>堆空间的基本结构：</strong></p>\n<img src="/img/media/4ef035d9ff7a3cb9d3cde9664c732414.png" class="imgcss" width="70%">\n<p>1.大部分情况下，对象首先在Eden区域分配。</p>\n<p>2.在一次新生代垃圾回收后（Eden区和Survivor区回收），如果对象还存活，则进入s0或s1，并且年龄加1。</p>\n<p>3.当对象年龄增加到一定程度（默认大于15），就会被晋升到老年代。</p>\n<p>晋升到老年代的年龄设置可以通过指定参数配置，但这个值会在虚拟机运行过程中调整。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 JAVA堆的内存分配与回收 2 空间分配担保 3 怎么判断对象已经死亡？ 3.1 引用计数法 3.2 可达性分析算法 1 介绍 2 哪些对象可以作为GC Roots呢？ 4 怎么判断一个类是无用的类？ 5 垃圾收集算法 5.1 标记-清除算法 5.2 标记-复制算法 5.3 标记-整理算法 5.4 分代收集算法 6 垃圾收集器 6.1 Serial收集器 6.2 ParNew收集器(-XX:+UseParNewGC) 6.3 Parallel Scanvenge 收集器 6.4 CMS收集器（4-8G） 6.4.1介绍 6.4.2 CMS优缺点 6.5 G1收集器 6.6 如何选择垃圾收集器？ 7 三色标记 7.1 介绍 7.2 浮动垃圾（多标） 7.3 漏标 8 GC安全点与安全区域 8.1 GC安全点 8.2 安全区域",content:'内存回收很多优化无非就是让短期存活的对象尽量都留在survivor里，不要进入老年代，这样在minor gc的时候这些对象都会被回收，不会进到老年代从而导致full gc。\n\n\n# 1 JAVA堆的内存分配与回收\n\n堆空间的基本结构：\n\n1.大部分情况下，对象首先在Eden区域分配。\n\n2.在一次新生代垃圾回收后（Eden区和Survivor区回收），如果对象还存活，则进入s0或s1，并且年龄加1。\n\n3.当对象年龄增加到一定程度（默认大于15），就会被晋升到老年代。\n\n晋升到老年代的年龄设置可以通过指定参数配置，但这个值会在虚拟机运行过程中调整。\n\n\n# 2 空间分配担保\n\n空间分配担保是为了确保在Minor GC之前老年代本身还有容纳新生代所有对象的剩余空间。\n\n空间分配担保的规则为：\n\n只要老年代的连续空间大于新生代对象的总大小或者大于历次晋升的平均大小，就会进行Minor GC，\n\n否则进行Full GC。\n\n\n# 3 怎么判断对象已经死亡？\n\n\n# 3.1 引用计数法\n\n给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效时，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。\n\n这个方法使用简单，效率高，但是主流的虚拟机都没有用它来管理内存，主要原因是它很难解决对象之间相互循环引用的问题。\n\n\n# 3.2 可达性分析算法\n\n# 1 介绍\n\n将指定类型的对象作为GC Roots节点，从这些节点开始搜索，将有引用的节点串成一条引用链，当一个对象到GC Roots没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。\n\n下图中Object6 ~ Object10之间虽有引用关系，但他们到GC Roots不可达，因此为需要被回收的对象。\n\n# 2 哪些对象可以作为GC Roots呢？\n\n1.虚拟机栈中引用的对象\n\n2.本地方法栈中引用的对象\n\n3.方法区中类静态属性引用的对象\n\n4.方法区中常量引用的对象\n\n5.所有被同步锁持有的对象\n\n\n# 4 怎么判断一个类是无用的类？\n\n方法区主要回收的是无用的类，判断一个类无用，需要同时满足以下3个条件：\n\n1.该类的所有实例都已经被回收，也就是JVM堆中不存在该类的任何实例。\n\n2.加载该类的加载器ClassLoader已经被回收。\n\n3.该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射的方式访问该类。\n\n\n# 5 垃圾收集算法\n\n\n# 5.1 标记-清除算法\n\n该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：\n\n1.效率问题\n\n2.空间问题（标记清除后会产生大量不连续的碎片）\n\n\n# 5.2 标记-复制算法\n\n将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\n\n\n# 5.3 标记-整理算法\n\n标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\n\n\n# 5.4 分代收集算法\n\n当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。\n\n一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。\n\n而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。\n\n\n# 6 垃圾收集器\n\n\n# 6.1 Serial收集器\n\nSerial（串行）收集器：单线程收集器。仅用一条线程完成垃圾收集工作，且运行期间必须暂停其他所有工作线程（Stop The World），直到它收集结束。\n\n新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n缺点：暂停所有线程影响用户体验。\n\n优点：简单高效，没有线程交互的开销。\n\n\n# 6.2 ParNew收集器(-XX:+UseParNewGC)\n\nParNew收集器其实就是Serial收集器的多线程版本，除了多线程，其他行为一样。\n\n它可以和CMS收集器配合使用（新生代使用ParNew，老年代使用CMS）。\n\n\n# 6.3 Parallel Scanvenge 收集器\n\nJDK1.8的默认收集器，新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n看上去几乎和ParNew都一样。Parallel Scavenge收集器主要在于高效率的利用CPU。\n\n\n# 6.4 CMS收集器（4-8G）\n\n-XX:+UseConcMarkSweepGC(old)\n\n# 6.4.1介绍\n\nCMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。\n\n它非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程 (基本上)同时工作。\n\n从名字中的Mark Sweep这两个词可以看出，CMS收集器是一种 “标记-清除”算法实现的，它的运作过程相对复杂一些。整个过程分为四个步骤:\n\n1 初始标记\n\n暂停所有的其他线程(STW)，并记录下gc roots直接能引用的对象，速度很快。\n\n2 并发标记\n\n并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。因为用户程序继续运行，可能会有导致已经标记过的对象状态发生改变。\n\n3 重新标记\n\n重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。主要用到三色标记里的增量更新算法做重新标记。\n\n4 并发清理\n\n开启用户线程，同时GC线程开始对未标记的区域做清扫。这个阶段如果有新增对象会被标记为黑色不做任何处理。\n\n5 并发重置\n\n重置本次GC过程中的标记数据。\n\n# 6.4.2 CMS优缺点\n\n优点:\n\n并发收集、低停顿。\n\n缺点:\n\n1）对CPU资源敏感(会和服务抢资源)。\n\n2）无法处理浮动垃圾(在并发标记和并发清理阶段又产生垃圾，这种浮动垃圾要等到下一次gc再清理)。\n\n3）它使用的回收算法是“标记-清除”算法，会导致收集结束时会有大量空间碎片产生。当然通过参数- XX:+UseCMSCompactAtFullCollection可以让jvm在执行完标记清除后再做整理。\n\n4）执行过程中的不确定性，会存在上一次垃圾回收还没执行完，然后垃圾回收又被触发的情况，特别是在并 发标记和并发清理阶段会出现，一边回收，系统一边运行，也许没回收完就再次触发full gc，也就是"concurrent mode failure"，此时会进入stop the world，用serial old垃圾收集器来回收。\n\n\n# 6.5 G1收集器\n\nG1是一款面向服务器的垃圾收集器，主要针对配备多颗处理器及大容量内存的机器。具备高吞吐量性能特征。\n\nG1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的Region。\n\nG1收集器具备以下特点：\n\n1.并行与并发\n\n2.分代收集\n\n3.空间整合\n\n4.可预测的停顿\n\n\n# 6.6 如何选择垃圾收集器？\n\nJDK1.8默认使用Parallel。JDK1.9默认使用G1。\n\nES、KAFKA内存较大的可使用G1。\n\n1.如果内存小于100M，使用串行收集器。\n\n2.如果是单核，并且没有停顿时间要求，串行或者JVM自己选择。\n\n3.如果响应时间最重要，并且不能超过1秒，使用并发收集器。\n\n1.内存4G以下可以用Parallel。\n\n2.内存4-8G可以用ParNew+CMS。\n\n3.内存8G以上可以用G1。\n\n4.内存几百G以上用ZGC。\n\n\n# 7 三色标记\n\n\n# 7.1 介绍\n\nJVM中的垃圾回收是基于标记-复制、标记清除和标记-整理三种模式的，其中最重要的是如何标记。\n\n像Serial、ParNew这类回收器，本质是暂停用户线程进行全面标记的算法。缺点是标记时间长导致STW时间也长，影响体验。\n\n像CMS、G1这类回收器，使用的是并发标记，可以在不暂停用户线程的情况下进行标记，从而可以用极少的时间或者没有中断来进行GC。实现并发标记的算法就是三色标记法。\n\n标记过程：\n\n1.在GC标记刚开始的阶段，所有对象均为白色集合。\n\n2.将所有GC Roots直接引用的对象标记成灰色集合。\n\n3.判断若灰色集合中的对象不存在子引用，则将其放入黑色集合，若存在子引用对象，则将所有子引用对象放入灰色集合，当前对象放入黑色集合。\n\n4.按照步骤3，以此类推，直到灰色集合中所有对象变成黑色后，本轮标记完成。当前白色集合内所有对象称为不可达对象，即垃圾对象。\n\n问题：\n\n三色标记过程是跟用户线程并发运行的，对象引用处于随时可变的情况，可能出现多标或漏标问题。\n\n\n# 7.2 浮动垃圾（多标）\n\n本来应该是标记白色的对象，结果被标记成灰色或黑色，造成该对象不会被回收。\n\n比如E对象被D对象引用着，刚好GC在扫描，将E对象标记成灰色，此时，D对E的引用被置空，这时候E对象以及后续子引用应该被当成垃圾回收，但是因为E已经被标记为灰色，导致没有被及时清理掉，变成浮动垃圾。\n\n还有一种情况，并发标记开始后产生的新对象，通常做法是直接当成黑色，本轮不会进行清除。但是这部分对象也有可能变成垃圾，所以也算是浮动垃圾的一部分。\n\n\n# 7.3 漏标\n\n灰色对象指向白色对象的引用消失了，然后一个黑色对象重新引用了白色对象。\n\n按照三色标记算法，黑色对象是已完成状态，不会再去找子引用，这样会导致这个白色对象虽然正在被线程使用中，但是无法被标记为灰色或者黑色，造成一个正在使用的对象被错误回收。\n\n总结：漏标只有同时满足以下两个条件才会发生：\n\n1.灰色对象断开了白色对象的引用。\n\n2.黑色对象重新引用了该白色对象。\n\n解决方案：\n\nCMS：Incremental Update算法\n\n当一个白色对象被一个黑色对象引用，将黑色对象重新标记为灰色，让垃圾回收器重新扫描。\n\n\n# 8 GC安全点与安全区域\n\n\n# 8.1 GC安全点\n\n当垃圾收集需要回收线程时，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程中会去查询这个标志位，一旦发现标志位为true时就自己在最近的安全点上主动中断挂起。查询标志位的地方跟安全点是重合的。\n\n触发点：\n\n1.方法返回之前。\n\n2.调用某个方法之后。\n\n3.抛出异常的位置。\n\n4.循环的末尾。\n\n\n# 8.2 安全区域\n\n安全点是针对正在执行的线程设定的。\n\n如果一个线程处在Sleep或者中断状态，它就不能响应JVM的中断请求，再运行到安全点上。\n\n因此JVM引入了安全区域的概念。\n\n安全区域是指在一段代码中，引用关系不会发生变化。在这个区域内的任意地方开始GC都是安全的。',normalizedContent:'内存回收很多优化无非就是让短期存活的对象尽量都留在survivor里，不要进入老年代，这样在minor gc的时候这些对象都会被回收，不会进到老年代从而导致full gc。\n\n\n# 1 java堆的内存分配与回收\n\n堆空间的基本结构：\n\n1.大部分情况下，对象首先在eden区域分配。\n\n2.在一次新生代垃圾回收后（eden区和survivor区回收），如果对象还存活，则进入s0或s1，并且年龄加1。\n\n3.当对象年龄增加到一定程度（默认大于15），就会被晋升到老年代。\n\n晋升到老年代的年龄设置可以通过指定参数配置，但这个值会在虚拟机运行过程中调整。\n\n\n# 2 空间分配担保\n\n空间分配担保是为了确保在minor gc之前老年代本身还有容纳新生代所有对象的剩余空间。\n\n空间分配担保的规则为：\n\n只要老年代的连续空间大于新生代对象的总大小或者大于历次晋升的平均大小，就会进行minor gc，\n\n否则进行full gc。\n\n\n# 3 怎么判断对象已经死亡？\n\n\n# 3.1 引用计数法\n\n给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效时，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。\n\n这个方法使用简单，效率高，但是主流的虚拟机都没有用它来管理内存，主要原因是它很难解决对象之间相互循环引用的问题。\n\n\n# 3.2 可达性分析算法\n\n# 1 介绍\n\n将指定类型的对象作为gc roots节点，从这些节点开始搜索，将有引用的节点串成一条引用链，当一个对象到gc roots没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。\n\n下图中object6 ~ object10之间虽有引用关系，但他们到gc roots不可达，因此为需要被回收的对象。\n\n# 2 哪些对象可以作为gc roots呢？\n\n1.虚拟机栈中引用的对象\n\n2.本地方法栈中引用的对象\n\n3.方法区中类静态属性引用的对象\n\n4.方法区中常量引用的对象\n\n5.所有被同步锁持有的对象\n\n\n# 4 怎么判断一个类是无用的类？\n\n方法区主要回收的是无用的类，判断一个类无用，需要同时满足以下3个条件：\n\n1.该类的所有实例都已经被回收，也就是jvm堆中不存在该类的任何实例。\n\n2.加载该类的加载器classloader已经被回收。\n\n3.该类对应的java.lang.class对象没有在任何地方被引用，无法在任何地方通过反射的方式访问该类。\n\n\n# 5 垃圾收集算法\n\n\n# 5.1 标记-清除算法\n\n该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：\n\n1.效率问题\n\n2.空间问题（标记清除后会产生大量不连续的碎片）\n\n\n# 5.2 标记-复制算法\n\n将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\n\n\n# 5.3 标记-整理算法\n\n标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\n\n\n# 5.4 分代收集算法\n\n当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。\n\n一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。\n\n而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。\n\n\n# 6 垃圾收集器\n\n\n# 6.1 serial收集器\n\nserial（串行）收集器：单线程收集器。仅用一条线程完成垃圾收集工作，且运行期间必须暂停其他所有工作线程（stop the world），直到它收集结束。\n\n新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n缺点：暂停所有线程影响用户体验。\n\n优点：简单高效，没有线程交互的开销。\n\n\n# 6.2 parnew收集器(-xx:+useparnewgc)\n\nparnew收集器其实就是serial收集器的多线程版本，除了多线程，其他行为一样。\n\n它可以和cms收集器配合使用（新生代使用parnew，老年代使用cms）。\n\n\n# 6.3 parallel scanvenge 收集器\n\njdk1.8的默认收集器，新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n看上去几乎和parnew都一样。parallel scavenge收集器主要在于高效率的利用cpu。\n\n\n# 6.4 cms收集器（4-8g）\n\n-xx:+useconcmarksweepgc(old)\n\n# 6.4.1介绍\n\ncms(concurrent mark sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。\n\n它非常符合在注重用户体验的应用上使用，它是hotspot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程 (基本上)同时工作。\n\n从名字中的mark sweep这两个词可以看出，cms收集器是一种 “标记-清除”算法实现的，它的运作过程相对复杂一些。整个过程分为四个步骤:\n\n1 初始标记\n\n暂停所有的其他线程(stw)，并记录下gc roots直接能引用的对象，速度很快。\n\n2 并发标记\n\n并发标记阶段就是从gc roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。因为用户程序继续运行，可能会有导致已经标记过的对象状态发生改变。\n\n3 重新标记\n\n重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。主要用到三色标记里的增量更新算法做重新标记。\n\n4 并发清理\n\n开启用户线程，同时gc线程开始对未标记的区域做清扫。这个阶段如果有新增对象会被标记为黑色不做任何处理。\n\n5 并发重置\n\n重置本次gc过程中的标记数据。\n\n# 6.4.2 cms优缺点\n\n优点:\n\n并发收集、低停顿。\n\n缺点:\n\n1）对cpu资源敏感(会和服务抢资源)。\n\n2）无法处理浮动垃圾(在并发标记和并发清理阶段又产生垃圾，这种浮动垃圾要等到下一次gc再清理)。\n\n3）它使用的回收算法是“标记-清除”算法，会导致收集结束时会有大量空间碎片产生。当然通过参数- xx:+usecmscompactatfullcollection可以让jvm在执行完标记清除后再做整理。\n\n4）执行过程中的不确定性，会存在上一次垃圾回收还没执行完，然后垃圾回收又被触发的情况，特别是在并 发标记和并发清理阶段会出现，一边回收，系统一边运行，也许没回收完就再次触发full gc，也就是"concurrent mode failure"，此时会进入stop the world，用serial old垃圾收集器来回收。\n\n\n# 6.5 g1收集器\n\ng1是一款面向服务器的垃圾收集器，主要针对配备多颗处理器及大容量内存的机器。具备高吞吐量性能特征。\n\ng1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的region。\n\ng1收集器具备以下特点：\n\n1.并行与并发\n\n2.分代收集\n\n3.空间整合\n\n4.可预测的停顿\n\n\n# 6.6 如何选择垃圾收集器？\n\njdk1.8默认使用parallel。jdk1.9默认使用g1。\n\nes、kafka内存较大的可使用g1。\n\n1.如果内存小于100m，使用串行收集器。\n\n2.如果是单核，并且没有停顿时间要求，串行或者jvm自己选择。\n\n3.如果响应时间最重要，并且不能超过1秒，使用并发收集器。\n\n1.内存4g以下可以用parallel。\n\n2.内存4-8g可以用parnew+cms。\n\n3.内存8g以上可以用g1。\n\n4.内存几百g以上用zgc。\n\n\n# 7 三色标记\n\n\n# 7.1 介绍\n\njvm中的垃圾回收是基于标记-复制、标记清除和标记-整理三种模式的，其中最重要的是如何标记。\n\n像serial、parnew这类回收器，本质是暂停用户线程进行全面标记的算法。缺点是标记时间长导致stw时间也长，影响体验。\n\n像cms、g1这类回收器，使用的是并发标记，可以在不暂停用户线程的情况下进行标记，从而可以用极少的时间或者没有中断来进行gc。实现并发标记的算法就是三色标记法。\n\n标记过程：\n\n1.在gc标记刚开始的阶段，所有对象均为白色集合。\n\n2.将所有gc roots直接引用的对象标记成灰色集合。\n\n3.判断若灰色集合中的对象不存在子引用，则将其放入黑色集合，若存在子引用对象，则将所有子引用对象放入灰色集合，当前对象放入黑色集合。\n\n4.按照步骤3，以此类推，直到灰色集合中所有对象变成黑色后，本轮标记完成。当前白色集合内所有对象称为不可达对象，即垃圾对象。\n\n问题：\n\n三色标记过程是跟用户线程并发运行的，对象引用处于随时可变的情况，可能出现多标或漏标问题。\n\n\n# 7.2 浮动垃圾（多标）\n\n本来应该是标记白色的对象，结果被标记成灰色或黑色，造成该对象不会被回收。\n\n比如e对象被d对象引用着，刚好gc在扫描，将e对象标记成灰色，此时，d对e的引用被置空，这时候e对象以及后续子引用应该被当成垃圾回收，但是因为e已经被标记为灰色，导致没有被及时清理掉，变成浮动垃圾。\n\n还有一种情况，并发标记开始后产生的新对象，通常做法是直接当成黑色，本轮不会进行清除。但是这部分对象也有可能变成垃圾，所以也算是浮动垃圾的一部分。\n\n\n# 7.3 漏标\n\n灰色对象指向白色对象的引用消失了，然后一个黑色对象重新引用了白色对象。\n\n按照三色标记算法，黑色对象是已完成状态，不会再去找子引用，这样会导致这个白色对象虽然正在被线程使用中，但是无法被标记为灰色或者黑色，造成一个正在使用的对象被错误回收。\n\n总结：漏标只有同时满足以下两个条件才会发生：\n\n1.灰色对象断开了白色对象的引用。\n\n2.黑色对象重新引用了该白色对象。\n\n解决方案：\n\ncms：incremental update算法\n\n当一个白色对象被一个黑色对象引用，将黑色对象重新标记为灰色，让垃圾回收器重新扫描。\n\n\n# 8 gc安全点与安全区域\n\n\n# 8.1 gc安全点\n\n当垃圾收集需要回收线程时，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程中会去查询这个标志位，一旦发现标志位为true时就自己在最近的安全点上主动中断挂起。查询标志位的地方跟安全点是重合的。\n\n触发点：\n\n1.方法返回之前。\n\n2.调用某个方法之后。\n\n3.抛出异常的位置。\n\n4.循环的末尾。\n\n\n# 8.2 安全区域\n\n安全点是针对正在执行的线程设定的。\n\n如果一个线程处在sleep或者中断状态，它就不能响应jvm的中断请求，再运行到安全点上。\n\n因此jvm引入了安全区域的概念。\n\n安全区域是指在一段代码中，引用关系不会发生变化。在这个区域内的任意地方开始gc都是安全的。',charsets:{cjk:!0}},{title:"工具命令",frontmatter:{title:"工具命令",date:"2022-05-07T14:33:51.000Z",permalink:"/pages/cc9ed4/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/42.%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4.html",relativePath:"01.学习笔记/05.JVM/42.工具命令.md",key:"v-60f202ee",path:"/pages/cc9ed4/",headers:[{level:2,title:"1 jmap",slug:"_1-jmap",normalizedTitle:"1 jmap",charIndex:2},{level:2,title:"2 jstack",slug:"_2-jstack",normalizedTitle:"2 jstack",charIndex:254},{level:2,title:"3 jinfo",slug:"_3-jinfo",normalizedTitle:"3 jinfo",charIndex:400},{level:2,title:"4 jstat",slug:"_4-jstat",normalizedTitle:"4 jstat",charIndex:441}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 jmap 2 jstack 3 jinfo 4 jstat",content:"# 1 jmap\n\njps\n\n14660 jar\n\njmap -histo 14660 > ./log.txt\n\n此命令可查看内存信息，实例个数以及占用内存大小\n\njmap -heap 14660\n\n查看堆信息\n\njmap -dump:format=b,file=test.hprof 14660\n\n也可以设置内存溢出自动导出dump文件（内存很大的时候，可能会导不出来）\n\n1.-XX:+HeapDumpOnOutOfMemoryError\n\n2.-XX:HeapDumpPath=./ （路径）\n\n\n# 2 jstack\n\n找出占用cpu最高的线程堆栈信息\n\ntop\n\n\n\ntop -p 24\n\n\n\n按H，获取每个线程的内存情况\n\n\n\n1.找到内存和cpu占用最高的线程pid，比如797，转换成16进制得到0x31D\n\n2.执行jstack 24 | grep -A 10 31D\n\n\n\n\n# 3 jinfo\n\njinfo -flags 24\n\n查看jvm的参数\n\n\n\n\n# 4 jstat\n\njstat -gc 24\n\njstat -gc pid 最常用，可以评估程序内存使用及gc压力整体情况\n\n\n\n可以执行命令 jstat -gc pid 1000 10 (每隔1秒执行1次命令，共执行10次)，通过观察EU(eden区的使用)来估算每秒eden大概新增多少对 象，如果系统负载不高，可以把频率1秒换成1分钟，甚至10分钟来观察整体情况。\n\nS0C：第一个幸存区的大小，单位KB\n\nS1C：第二个幸存区的大小\n\nS0U：第一个幸存区的使用大小\n\nS1U：第二个幸存区的使用大小\n\nEC：伊甸园区的大小\n\nEU：伊甸园区的使用大小\n\nOC：老年代大小\n\nOU：老年代使用大小\n\nMC：方法区大小（元空间）\n\nMU：方法区使用大小\n\nCCSC：压缩类空间大小\n\nCCSU：压缩类空间使用大小\n\nYGC：年轻代垃圾回收次数\n\nYGCT：年轻代垃圾回收消耗时间，单位s\n\nFGC：老年代垃圾回收次数\n\nFGCT：老年代垃圾回收消耗时间，单位s\n\nGCT：垃圾回收消耗总时间，单位s\n\n优化思路其实简单来说就是尽量让每次Young GC后的存活对象小于Survivor区域的50%，都留存在年轻代里。尽量别让对象进入老年 代。尽量减少Full GC的频率，避免频繁Full GC对JVM性能的影响。\n\n内存泄漏的一种情况：一般电商架构可能会使用多级缓存架构，就是redis加上JVM级缓存，大多数同学可能为了图方便对于JVM级缓存就 简单使用一个hashmap，于是不断往里面放缓存数据，但是很少考虑这个map的容量问题，结果这个缓存map越来越大，一直占用着老 年代的很多空间，时间长了就会导致full gc非常频繁，这就是一种内存泄漏，对于一些老旧数据没有及时清理导致一直占用着宝贵的内存 资源，时间长了除了导致full gc，还有可能导致OOM。",normalizedContent:"# 1 jmap\n\njps\n\n14660 jar\n\njmap -histo 14660 > ./log.txt\n\n此命令可查看内存信息，实例个数以及占用内存大小\n\njmap -heap 14660\n\n查看堆信息\n\njmap -dump:format=b,file=test.hprof 14660\n\n也可以设置内存溢出自动导出dump文件（内存很大的时候，可能会导不出来）\n\n1.-xx:+heapdumponoutofmemoryerror\n\n2.-xx:heapdumppath=./ （路径）\n\n\n# 2 jstack\n\n找出占用cpu最高的线程堆栈信息\n\ntop\n\n\n\ntop -p 24\n\n\n\n按h，获取每个线程的内存情况\n\n\n\n1.找到内存和cpu占用最高的线程pid，比如797，转换成16进制得到0x31d\n\n2.执行jstack 24 | grep -a 10 31d\n\n\n\n\n# 3 jinfo\n\njinfo -flags 24\n\n查看jvm的参数\n\n\n\n\n# 4 jstat\n\njstat -gc 24\n\njstat -gc pid 最常用，可以评估程序内存使用及gc压力整体情况\n\n\n\n可以执行命令 jstat -gc pid 1000 10 (每隔1秒执行1次命令，共执行10次)，通过观察eu(eden区的使用)来估算每秒eden大概新增多少对 象，如果系统负载不高，可以把频率1秒换成1分钟，甚至10分钟来观察整体情况。\n\ns0c：第一个幸存区的大小，单位kb\n\ns1c：第二个幸存区的大小\n\ns0u：第一个幸存区的使用大小\n\ns1u：第二个幸存区的使用大小\n\nec：伊甸园区的大小\n\neu：伊甸园区的使用大小\n\noc：老年代大小\n\nou：老年代使用大小\n\nmc：方法区大小（元空间）\n\nmu：方法区使用大小\n\nccsc：压缩类空间大小\n\nccsu：压缩类空间使用大小\n\nygc：年轻代垃圾回收次数\n\nygct：年轻代垃圾回收消耗时间，单位s\n\nfgc：老年代垃圾回收次数\n\nfgct：老年代垃圾回收消耗时间，单位s\n\ngct：垃圾回收消耗总时间，单位s\n\n优化思路其实简单来说就是尽量让每次young gc后的存活对象小于survivor区域的50%，都留存在年轻代里。尽量别让对象进入老年 代。尽量减少full gc的频率，避免频繁full gc对jvm性能的影响。\n\n内存泄漏的一种情况：一般电商架构可能会使用多级缓存架构，就是redis加上jvm级缓存，大多数同学可能为了图方便对于jvm级缓存就 简单使用一个hashmap，于是不断往里面放缓存数据，但是很少考虑这个map的容量问题，结果这个缓存map越来越大，一直占用着老 年代的很多空间，时间长了就会导致full gc非常频繁，这就是一种内存泄漏，对于一些老旧数据没有及时清理导致一直占用着宝贵的内存 资源，时间长了除了导致full gc，还有可能导致oom。",charsets:{cjk:!0}},{title:"生产配置示例",frontmatter:{title:"生产配置示例",date:"2022-05-07T14:45:17.000Z",permalink:"/pages/445465/",categories:["学习笔记","JVM"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.JVM/45.%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B.html",relativePath:"01.学习笔记/05.JVM/45.配置示例.md",key:"v-1ac0f3f3",path:"/pages/445465/",headers:[{level:2,title:"生产环境配置示例",slug:"生产环境配置示例",normalizedTitle:"生产环境配置示例",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"生产环境配置示例",content:"# 生产环境配置示例\n\n-XX:+UseContainerSupport\n\n此参数用于使 JVM 在分配堆大小时考虑容器内存限制，而不是主机配置。\n\n-XX:MaxRAMPercentage=60.0\n\n堆最大内存大小（容器总内存的百分比）\n\n-XX:InitialRAMPercentage=60.0\n\n初始堆大小（容器总内存的百分比）\n\n-XX:MinRAMPercentage=60.0\n\n堆最小内存大小（容器总内存的百分比）\n\n-XX:NewRatio=2\n\n老年代除以新生代比例，2代表新生代占1，老年代占2，年轻代占整个堆内存的1/3。\n\n-Xss512k\n\n栈内存的大小（决定方法调用深度）\n\n-XX:MetaspaceSize=256M\n\n元空间\n\n-XX:MaxMetaspaceSize=512M\n\n最大元空间大小",normalizedContent:"# 生产环境配置示例\n\n-xx:+usecontainersupport\n\n此参数用于使 jvm 在分配堆大小时考虑容器内存限制，而不是主机配置。\n\n-xx:maxrampercentage=60.0\n\n堆最大内存大小（容器总内存的百分比）\n\n-xx:initialrampercentage=60.0\n\n初始堆大小（容器总内存的百分比）\n\n-xx:minrampercentage=60.0\n\n堆最小内存大小（容器总内存的百分比）\n\n-xx:newratio=2\n\n老年代除以新生代比例，2代表新生代占1，老年代占2，年轻代占整个堆内存的1/3。\n\n-xss512k\n\n栈内存的大小（决定方法调用深度）\n\n-xx:metaspacesize=256m\n\n元空间\n\n-xx:maxmetaspacesize=512m\n\n最大元空间大小",charsets:{cjk:!0}},{title:"SpringMVC",frontmatter:{title:"SpringMVC",date:"2022-05-07T23:52:30.000Z",permalink:"/pages/f3f573/",categories:["学习笔记","Spring"],tags:["Spring"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07.Spring/73.SpringMVC.html",relativePath:"01.学习笔记/07.Spring/73.SpringMVC.md",key:"v-40830164",path:"/pages/f3f573/",headers:[{level:2,title:"1 什么是SpringMVC？",slug:"_1-什么是springmvc",normalizedTitle:"1 什么是springmvc？",charIndex:2},{level:2,title:"2 SpringMVC的执行流程",slug:"_2-springmvc的执行流程",normalizedTitle:"2 springmvc的执行流程",charIndex:130},{level:2,title:"3 SpringMVC怎么样设定重定向和转发的？",slug:"_3-springmvc怎么样设定重定向和转发的",normalizedTitle:"3 springmvc怎么样设定重定向和转发的？",charIndex:579},{level:2,title:"4 SpringMVC常用的注解",slug:"_4-springmvc常用的注解",normalizedTitle:"4 springmvc常用的注解",charIndex:727},{level:2,title:"5 SpingMVC中控制器的注解",slug:"_5-spingmvc中控制器的注解",normalizedTitle:"5 spingmvc中控制器的注解",charIndex:926},{level:2,title:"6 POST及GET请求中文乱码问题",slug:"_6-post及get请求中文乱码问题",normalizedTitle:"6 post及get请求中文乱码问题",charIndex:1061},{level:2,title:"7 SpringMVC控制器是不是单例？有什么问题？",slug:"_7-springmvc控制器是不是单例-有什么问题",normalizedTitle:"7 springmvc控制器是不是单例？有什么问题？",charIndex:1277},{level:2,title:"8 拦截请求中，怎么拦截get方式提交的方法？",slug:"_8-拦截请求中-怎么拦截get方式提交的方法",normalizedTitle:"8 拦截请求中，怎么拦截get方式提交的方法？",charIndex:1420},{level:2,title:"9 怎样在方法里面得到Request，或者Session？",slug:"_9-怎样在方法里面得到request-或者session",normalizedTitle:"9 怎样在方法里面得到request，或者session？",charIndex:1499}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 什么是SpringMVC？ 2 SpringMVC的执行流程 3 SpringMVC怎么样设定重定向和转发的？ 4 SpringMVC常用的注解 5 SpingMVC中控制器的注解 6 POST及GET请求中文乱码问题 7 SpringMVC控制器是不是单例？有什么问题？ 8 拦截请求中，怎么拦截get方式提交的方法？ 9 怎样在方法里面得到Request，或者Session？",content:'# 1 什么是SpringMVC？\n\nSpringMVC是一个轻量级的web框架。\n\nSpringMVC把web应用分成几个清晰的模块，分别是model、view、controller。\n\nSpringMVC可以使用各种视图技术，不仅仅局限于jsp。\n\n\n# 2 SpringMVC的执行流程\n\n1.客户端发送请求到前端控制器DispatcheServlet。\n\n2.DispatcheServlet通过处理器映射器HandlerMapping获取处理器Handler。（处理器映射器返回处理器执行链，包含处理器Handler和拦截器HandlerInterceptor）。\n\n3.DispatcheServlet通过处理器适配器HandlerAdapter执行Handler。（Handler也就是controller）\n\n4.Handler执行完后返回ModelAndView给到DispatcheServlet。\n\n5.DispatcheServlet将ModelAndView传给ViewResolver（视图解析器）做解析。\n\n6.ViewResolver（视图解析器）解析完返回View视图对象给到DispatcherServlet。\n\n7.DispatcherServlet把Model数据填充到View试图对象中。\n\n8.响应用户。\n\n\n# 3 SpringMVC怎么样设定重定向和转发的？\n\n（1）转发：在返回值前面加"forward:"，譬如"forward:user.do?name=method4"\n\n（2）重定向：在返回值前面加"redirect:"，譬如"redirect:http://www.baidu.com"\n\n\n# 4 SpringMVC常用的注解\n\n@RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。\n\n@RequestBody：注解实现接收http请求的json数据，将json转换为java对象。\n\n@ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。\n\n\n# 5 SpingMVC中控制器的注解\n\n一般用@Controller注解，也可以使用@RestController。\n\n@RestController注解相当于@ResponseBody ＋ @Controller，表示是表现层，除此之外，一般不用别的注解代替。\n\n\n# 6 POST及GET请求中文乱码问题\n\n（1）解决post请求乱码问题：\n\n在web.xml中配置一个CharacterEncodingFilter过滤器，设置成utf-8。\n\n（2）get请求中文参数出现乱码解决方法有两个：\n\n① 修改tomcat配置文件添加编码与工程编码一致，如下：\n\n② 另外一种方法对参数进行重新编码：\n\nISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码。\n\n\n# 7 SpringMVC控制器是不是单例？有什么问题？\n\n1.是单例模式。\n\n2.在多线程访问的时候有线程安全问题。\n\n3.解决方案是在控制器里面不能写可变状态量，如果需要这些可变状态，可以使用ThreadLocal机制解决，为每个线程单独生成一份变量副本，独立操作，互不影响。\n\n\n# 8 拦截请求中，怎么拦截get方式提交的方法？\n\n可以在@RequestMapping注解里面加上method=RequestMethod.GET。\n\n\n# 9 怎样在方法里面得到Request，或者Session？\n\n直接在方法的形参中声明request，SpringMvc就自动把request对象传入。',normalizedContent:'# 1 什么是springmvc？\n\nspringmvc是一个轻量级的web框架。\n\nspringmvc把web应用分成几个清晰的模块，分别是model、view、controller。\n\nspringmvc可以使用各种视图技术，不仅仅局限于jsp。\n\n\n# 2 springmvc的执行流程\n\n1.客户端发送请求到前端控制器dispatcheservlet。\n\n2.dispatcheservlet通过处理器映射器handlermapping获取处理器handler。（处理器映射器返回处理器执行链，包含处理器handler和拦截器handlerinterceptor）。\n\n3.dispatcheservlet通过处理器适配器handleradapter执行handler。（handler也就是controller）\n\n4.handler执行完后返回modelandview给到dispatcheservlet。\n\n5.dispatcheservlet将modelandview传给viewresolver（视图解析器）做解析。\n\n6.viewresolver（视图解析器）解析完返回view视图对象给到dispatcherservlet。\n\n7.dispatcherservlet把model数据填充到view试图对象中。\n\n8.响应用户。\n\n\n# 3 springmvc怎么样设定重定向和转发的？\n\n（1）转发：在返回值前面加"forward:"，譬如"forward:user.do?name=method4"\n\n（2）重定向：在返回值前面加"redirect:"，譬如"redirect:http://www.baidu.com"\n\n\n# 4 springmvc常用的注解\n\n@requestmapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。\n\n@requestbody：注解实现接收http请求的json数据，将json转换为java对象。\n\n@responsebody：注解实现将conreoller方法返回对象转化为json对象响应给客户。\n\n\n# 5 spingmvc中控制器的注解\n\n一般用@controller注解，也可以使用@restcontroller。\n\n@restcontroller注解相当于@responsebody ＋ @controller，表示是表现层，除此之外，一般不用别的注解代替。\n\n\n# 6 post及get请求中文乱码问题\n\n（1）解决post请求乱码问题：\n\n在web.xml中配置一个characterencodingfilter过滤器，设置成utf-8。\n\n（2）get请求中文参数出现乱码解决方法有两个：\n\n① 修改tomcat配置文件添加编码与工程编码一致，如下：\n\n② 另外一种方法对参数进行重新编码：\n\niso8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码。\n\n\n# 7 springmvc控制器是不是单例？有什么问题？\n\n1.是单例模式。\n\n2.在多线程访问的时候有线程安全问题。\n\n3.解决方案是在控制器里面不能写可变状态量，如果需要这些可变状态，可以使用threadlocal机制解决，为每个线程单独生成一份变量副本，独立操作，互不影响。\n\n\n# 8 拦截请求中，怎么拦截get方式提交的方法？\n\n可以在@requestmapping注解里面加上method=requestmethod.get。\n\n\n# 9 怎样在方法里面得到request，或者session？\n\n直接在方法的形参中声明request，springmvc就自动把request对象传入。',charsets:{cjk:!0}},{title:"Spring",frontmatter:{title:"Spring",date:"2022-05-07T23:57:51.000Z",permalink:"/pages/d4c31c/",categories:["学习笔记","Spring"],tags:["Spring"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07.Spring/76.Spring.html",relativePath:"01.学习笔记/07.Spring/76.Spring.md",key:"v-c69e6f38",path:"/pages/d4c31c/",headers:[{level:2,title:"1 Spring常见问题",slug:"_1-spring常见问题",normalizedTitle:"1 spring常见问题",charIndex:2},{level:3,title:"1.1 BeanFactory与FactoryBean的区别？",slug:"_1-1-beanfactory与factorybean的区别",normalizedTitle:"1.1 beanfactory与factorybean的区别？",charIndex:19},{level:3,title:"1.2 BeanFactory与ApplicationContext的区别？",slug:"_1-2-beanfactory与applicationcontext的区别",normalizedTitle:"1.2 beanfactory与applicationcontext的区别？",charIndex:347},{level:3,title:"1.3 Spring整合Mybatis后为什么会导致一级缓存失效？",slug:"_1-3-spring整合mybatis后为什么会导致一级缓存失效",normalizedTitle:"1.3 spring整合mybatis后为什么会导致一级缓存失效？",charIndex:521},{level:2,title:"2 Bean的生成过程",slug:"_2-bean的生成过程",normalizedTitle:"2 bean的生成过程",charIndex:806},{level:3,title:"2.1 生成BeanDefinition",slug:"_2-1-生成beandefinition",normalizedTitle:"2.1 生成beandefinition",charIndex:822},{level:3,title:"2.2 合并BeanDefinition",slug:"_2-2-合并beandefinition",normalizedTitle:"2.2 合并beandefinition",charIndex:1176},{level:3,title:"2.3 加载类",slug:"_2-3-加载类",normalizedTitle:"2.3 加载类",charIndex:1250},{level:3,title:"2.4 实例化前（扩展点）",slug:"_2-4-实例化前-扩展点",normalizedTitle:"2.4 实例化前（扩展点）",charIndex:1290},{level:3,title:"2.5 实例化",slug:"_2-5-实例化",normalizedTitle:"2.5 实例化",charIndex:1537},{level:3,title:"2.6 BeanDefinition的后置处理（扩展点）",slug:"_2-6-beandefinition的后置处理-扩展点",normalizedTitle:"2.6 beandefinition的后置处理（扩展点）",charIndex:1707},{level:3,title:"2.7 实例化后（扩展点）",slug:"_2-7-实例化后-扩展点",normalizedTitle:"2.7 实例化后（扩展点）",charIndex:1887},{level:3,title:"2.8 处理属性",slug:"_2-8-处理属性",normalizedTitle:"2.8 处理属性",charIndex:2015},{level:3,title:"2.9 执行Aware（扩展点）",slug:"_2-9-执行aware-扩展点",normalizedTitle:"2.9 执行aware（扩展点）",charIndex:2159},{level:3,title:"2.10 初始化前（扩展点）",slug:"_2-10-初始化前-扩展点",normalizedTitle:"2.10 初始化前（扩展点）",charIndex:2327},{level:3,title:"2.11 初始化",slug:"_2-11-初始化",normalizedTitle:"2.11 初始化",charIndex:2832},{level:3,title:"2.12 初始化后（扩展点）",slug:"_2-12-初始化后-扩展点",normalizedTitle:"2.12 初始化后（扩展点）",charIndex:2945},{level:2,title:"3 Bean的销毁过程",slug:"_3-bean的销毁过程",normalizedTitle:"3 bean的销毁过程",charIndex:3120},{level:2,title:"4 什么是循环依赖？",slug:"_4-什么是循环依赖",normalizedTitle:"4 什么是循环依赖？",charIndex:3609},{level:2,title:"5 详细讲下三级缓存？",slug:"_5-详细讲下三级缓存",normalizedTitle:"5 详细讲下三级缓存？",charIndex:3703},{level:3,title:"5.1 singletonObjects（一级缓存：单例池）",slug:"_5-1-singletonobjects-一级缓存-单例池",normalizedTitle:"5.1 singletonobjects（一级缓存：单例池）",charIndex:3719},{level:3,title:"5.2 earlySingletonObjects（二级缓存）",slug:"_5-2-earlysingletonobjects-二级缓存",normalizedTitle:"5.2 earlysingletonobjects（二级缓存）",charIndex:3773},{level:3,title:"5.3 singletonFactories（三级缓存）",slug:"_5-3-singletonfactories-三级缓存",normalizedTitle:"5.3 singletonfactories（三级缓存）",charIndex:4009},{level:3,title:"5.4 earlyProxyReferences",slug:"_5-4-earlyproxyreferences",normalizedTitle:"5.4 earlyproxyreferences",charIndex:4255},{level:2,title:"6 为什么需要第三级缓存？",slug:"_6-为什么需要第三级缓存",normalizedTitle:"6 为什么需要第三级缓存？",charIndex:4339}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Spring常见问题 1.1 BeanFactory与FactoryBean的区别？ 1.2 BeanFactory与ApplicationContext的区别？ 1.3 Spring整合Mybatis后为什么会导致一级缓存失效？ 2 Bean的生成过程 2.1 生成BeanDefinition 2.2 合并BeanDefinition 2.3 加载类 2.4 实例化前（扩展点） 2.5 实例化 2.6 BeanDefinition的后置处理（扩展点） 2.7 实例化后（扩展点） 2.8 处理属性 2.9 执行Aware（扩展点） 2.10 初始化前（扩展点） 2.11 初始化 2.12 初始化后（扩展点） 3 Bean的销毁过程 4 什么是循环依赖？ 5 详细讲下三级缓存？ 5.1 singletonObjects（一级缓存：单例池） 5.2 earlySingletonObjects（二级缓存） 5.3 singletonFactories（三级缓存） 5.4 earlyProxyReferences 6 为什么需要第三级缓存？",content:"# 1 Spring常见问题\n\n\n# 1.1 BeanFactory与FactoryBean的区别？\n\n1.BeanFactory:IOC容器的核心接口，负责生产和管理Spring中的Bean。\n\nApplicationContext就是BeanFactory的一种，继承了BeanFactory的功能，又扩展了很多其他功能。\n\n2.FactoryBean：也是一个接口，通过实现FactoryBean接口，可以创建一个我们自己定义的Bean，这个Bean只会经过Spring的Bean生命周期步骤中的初始化后，其他生命周期步骤不会经过。Spring整合Mybatis的时候，就是通过FactoryBean的方式，将Mybatis中的sql对应的接口转化成Spring的Bean对象。\n\n\n# 1.2 BeanFactory与ApplicationContext的区别？\n\nApplicationContext由BeanFactory派生而来，拥有比BeanFactory更多的功能，比如：\n\n1.支持国际化功能。\n\n2.支持事件机制（发布订阅）。\n\n3.支持底层资源访问，可以用来加载多个Resource。\n\n4.支持web应用。\n\n\n# 1.3 Spring整合Mybatis后为什么会导致一级缓存失效？\n\nMybatis的一级缓存是利用SqlSession实现的，同样的sql，如果在同一个SqlSession执行，就会利用一级缓存，提高查询效率。\n\nSpring整合Mybatis后，执行方法时，如果方法没有加@Transactional注解，那么方法里面执行sql时，每个sql要执行时都会先生成一个新的SqlSession去执行该sql，所以一级缓存会失效。如果加上@Transactional注解，即开启事务，则同个方法内多个sql使用的是同一个SqlSession，从而一级缓存能生效。\n\n\n# 2 Bean的生成过程\n\n\n# 2.1 生成BeanDefinition\n\nSpring启动的时候会进行扫描，扫描指定包路径下的所有.class文件，并得到BeanDefinition的Set集合。（Spring源码中将class文件包装成Resource对象，遍历每个Resource对象。解析.class文件利用的是ASM技术，并没有加载这个类到JVM。）\n\n什么是BeanDefinition？\n\nBean定义，存在很多属性来描述一个Bean的特点。比如：\n\nclass：表示bean类型。\n\nscope：表示bean的作用域，如单例、原型等。\n\nlazyInit：表示类是否懒加载。\n\ninitMethodName：表示Bean初始化时要执行的方法。\n\ndestroyMethodName：表示Bean销毁时要执行的方法。\n\n\n# 2.2 合并BeanDefinition\n\nSpring中支持父子BeanDefinition，child会继承parent上定义的属性。\n\n\n# 2.3 加载类\n\n加载BeanDefinition所对应的class。\n\n\n# 2.4 实例化前（扩展点）\n\nBeanDefinition对应的类成功加载后，就可以实例化对象了。但是在Spring中，实例化对象之前，Spring提供了一个扩展点：InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation()\n\n如果按上面例子，在实例化前直接返回一个自己定义的对象，则表示不需要Spring来实例化了，并且后面的Spring依赖注入也不会进行，会跳过一些步骤，直接执行到 初始化后 这一步。\n\n\n# 2.5 实例化\n\n根据BeanDefinition去创建一个对象。\n\n1.BeanDefinition中是否设置了Supplier，如果设置了则调用Supplier的get()得到对象。\n\n2.BeanDefinition中是否设置了factoryMethod，如果设置了则调用工厂方法得到对象。\n\n3.创建对象前，推断构造方法。\n\n\n# 2.6 BeanDefinition的后置处理（扩展点）\n\nBean对象实例化出来之后，接下来可以给对象属性赋值了。但是在赋值之前，Spring又提供了一个扩展点可以对此时的BeanDefinition进行加工：\n\nMergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition()\n\n\n# 2.7 实例化后（扩展点）\n\n处理完BeanDefinition,Spring还提供一个扩展点处理实例对象：\n\nInstantiationAwareBeanPostProcessor.postProcessAfterInstantiation()\n\n\n# 2.8 处理属性\n\n处理@Autowired、@Resource、@Value等注解，通过以下扩展点实现：\n\nInstantiatiionAwareBeanPostProcessor.postProcessProperties()\n\n我们甚至可以以此实现一个自己的注入功能，如：\n\n\n# 2.9 执行Aware（扩展点）\n\n完成属性赋值后，Spring会执行一些回调，包括：\n\n1.BeanNameAware：回传beanName给bean对象。\n\n2.BeanClassLoaderAware：回传classLoader给bean对象。\n\n3.BeanFactoryAware：回传beanFactory给对象。\n\n\n# 2.10 初始化前（扩展点）\n\nSpring提供的一个扩展点：\n\nBeanPostProcessor.postProcessBeforeInitialization()\n\n在Spring源码中：\n\n1.InitDestroyAnnotationBeanPostProcessor会在初始化前这个步骤中执行**@PostConstruct**的方法。\n\n2.ApplicationContextAwareProcessor会在初始化前这个步骤进行其他Aware的回调：\n\n1）EnvironmentAware：回传环境变量\n\n2）EmbeddedValueResolverAware：回传占位符解析器\n\n3）ResourceLoaderAware：回传资源加载器\n\n4）ApplicationEventPublisherAware：回传事件发布器\n\n5）MessageSourceAware：回传国际化资源\n\n6）ApplicationStartupAware：回传应用其他监听对象，可忽略\n\n7）ApplicationContextAware：回传Spring容器ApplicationContext\n\n\n# 2.11 初始化\n\n1.当前Bean对象是否实现了InitializingBean接口，实现了就调用其**afterPropertiesSet()**方法。\n\n2.执行BeanDefinition中指定的初始化方法。\n\n\n# 2.12 初始化后（扩展点）\n\nBean创建生命周期中的最后一个步骤，Spring提供的一个扩展点：\n\nBeanPostProcessor.postProcessAfterInitialization()\n\n可以在这个步骤中对Bean进行最终处理。\n\nSpring中的AOP就是基于初始化后实现的。初始化后返回的对象才是最终的Bean对象。\n\n\n# 3 Bean的销毁过程\n\nBean销毁是发生在Spring容器关闭过程中的。\n\n1.在Bean创建过程中，最后（初始化后）有一个步骤去判断当前创建的Bean是不是DisposableBean：\n\n1）当前Bean是否实现了DisposableBean接口。\n\n2）当前Bean是否实现了AutoCloseable接口。\n\n3）BeanDefinition中是否指定了destroyMethod。\n\n4）调用DestructionAwareBeanPostProcessor.requiresDestruction(bean)进行判断。\n\n5）把符合上述任意一个条件的Bean适配成DisposableBeanAdapter对象，并存入disposableBeans中。其中disposableBeans是一个LinkedHashMap。\n\n2.在Spring容器关闭过程时：\n\n1）首先发布ContextClosedEvent事件。\n\n2）调用lifecycleProcessor的onCloese()方法。\n\n3）遍历disposableBeans销毁单例Bean。\n\n\n# 4 什么是循环依赖？\n\nA创建时 --\x3e 需要B --\x3e B去创建时 --\x3e 需要A，从而产生循环。\n\n如何打破循环，加个中间人（缓存）\n\n实际上就是使用了三级缓存解决循环依赖。\n\n\n# 5 详细讲下三级缓存？\n\n\n# 5.1 singletonObjects（一级缓存：单例池）\n\n缓存经过了完整生命周期的bean。\n\n\n# 5.2 earlySingletonObjects（二级缓存）\n\n缓存未经过完整生命周期的bean，只要某个bean出现了循环依赖，就会提前把这个暂时未经过完整生命周期的bean放入earlySingletonObjects中（这个bean如果要经过AOP，那么就会把代理对象放入earlySingletonObjects中，否则就是把原始对象放入earlySingletonObjects），即使是代理对象，代理对象所代理的原始对象也是没有经过完整生命周期的。\n\n\n# 5.3 singletonFactories（三级缓存）\n\n缓存的是一个Lambda表达式。在每个Bean的生成过程中，经过实例化得到一个原始对象后，都会提前基于原始对象暴露一个Lambda表达式，并保存到三级缓存中（这个Lambda表达式可能用到也可能用不到，如果当前Bean没有出现循环依赖，那么这个Lambda表达式没用）。如果当前bean在依赖注入时发现出现了循环依赖，则从三级缓存中拿到Lambda表达式，并执行Lambda表达式得到一个对象，并把得到的对象放入二级缓存。\n\n\n# 5.4 earlyProxyReferences\n\n其实还要一个缓存，就是earlyProxyReferences，它用来记录某个原始对象是否进行过AOP了。\n\n\n# 6 为什么需要第三级缓存？\n\n主要为了处理AOP的问题。\n\n如果没有第三级缓存earlySingletonObjects，则每个bean在依赖注入之前都要去进行AOP的操作，不符合bean的生命周期步骤设计，即AOP对象是在初始化之后生成。\n\n有第三级缓存，则没有循环依赖的需要AOP对象可以按bean的生命周期步骤进行，有循环依赖的需要AOP对象在依赖注入时通过三级缓存中Lambda表达式获取AOP对象放入二级缓存。初始化后要生成AOP对象时去判断是否已经生成过，已生成则不再处理。",normalizedContent:"# 1 spring常见问题\n\n\n# 1.1 beanfactory与factorybean的区别？\n\n1.beanfactory:ioc容器的核心接口，负责生产和管理spring中的bean。\n\napplicationcontext就是beanfactory的一种，继承了beanfactory的功能，又扩展了很多其他功能。\n\n2.factorybean：也是一个接口，通过实现factorybean接口，可以创建一个我们自己定义的bean，这个bean只会经过spring的bean生命周期步骤中的初始化后，其他生命周期步骤不会经过。spring整合mybatis的时候，就是通过factorybean的方式，将mybatis中的sql对应的接口转化成spring的bean对象。\n\n\n# 1.2 beanfactory与applicationcontext的区别？\n\napplicationcontext由beanfactory派生而来，拥有比beanfactory更多的功能，比如：\n\n1.支持国际化功能。\n\n2.支持事件机制（发布订阅）。\n\n3.支持底层资源访问，可以用来加载多个resource。\n\n4.支持web应用。\n\n\n# 1.3 spring整合mybatis后为什么会导致一级缓存失效？\n\nmybatis的一级缓存是利用sqlsession实现的，同样的sql，如果在同一个sqlsession执行，就会利用一级缓存，提高查询效率。\n\nspring整合mybatis后，执行方法时，如果方法没有加@transactional注解，那么方法里面执行sql时，每个sql要执行时都会先生成一个新的sqlsession去执行该sql，所以一级缓存会失效。如果加上@transactional注解，即开启事务，则同个方法内多个sql使用的是同一个sqlsession，从而一级缓存能生效。\n\n\n# 2 bean的生成过程\n\n\n# 2.1 生成beandefinition\n\nspring启动的时候会进行扫描，扫描指定包路径下的所有.class文件，并得到beandefinition的set集合。（spring源码中将class文件包装成resource对象，遍历每个resource对象。解析.class文件利用的是asm技术，并没有加载这个类到jvm。）\n\n什么是beandefinition？\n\nbean定义，存在很多属性来描述一个bean的特点。比如：\n\nclass：表示bean类型。\n\nscope：表示bean的作用域，如单例、原型等。\n\nlazyinit：表示类是否懒加载。\n\ninitmethodname：表示bean初始化时要执行的方法。\n\ndestroymethodname：表示bean销毁时要执行的方法。\n\n\n# 2.2 合并beandefinition\n\nspring中支持父子beandefinition，child会继承parent上定义的属性。\n\n\n# 2.3 加载类\n\n加载beandefinition所对应的class。\n\n\n# 2.4 实例化前（扩展点）\n\nbeandefinition对应的类成功加载后，就可以实例化对象了。但是在spring中，实例化对象之前，spring提供了一个扩展点：instantiationawarebeanpostprocessor.postprocessbeforeinstantiation()\n\n如果按上面例子，在实例化前直接返回一个自己定义的对象，则表示不需要spring来实例化了，并且后面的spring依赖注入也不会进行，会跳过一些步骤，直接执行到 初始化后 这一步。\n\n\n# 2.5 实例化\n\n根据beandefinition去创建一个对象。\n\n1.beandefinition中是否设置了supplier，如果设置了则调用supplier的get()得到对象。\n\n2.beandefinition中是否设置了factorymethod，如果设置了则调用工厂方法得到对象。\n\n3.创建对象前，推断构造方法。\n\n\n# 2.6 beandefinition的后置处理（扩展点）\n\nbean对象实例化出来之后，接下来可以给对象属性赋值了。但是在赋值之前，spring又提供了一个扩展点可以对此时的beandefinition进行加工：\n\nmergedbeandefinitionpostprocessor.postprocessmergedbeandefinition()\n\n\n# 2.7 实例化后（扩展点）\n\n处理完beandefinition,spring还提供一个扩展点处理实例对象：\n\ninstantiationawarebeanpostprocessor.postprocessafterinstantiation()\n\n\n# 2.8 处理属性\n\n处理@autowired、@resource、@value等注解，通过以下扩展点实现：\n\ninstantiatiionawarebeanpostprocessor.postprocessproperties()\n\n我们甚至可以以此实现一个自己的注入功能，如：\n\n\n# 2.9 执行aware（扩展点）\n\n完成属性赋值后，spring会执行一些回调，包括：\n\n1.beannameaware：回传beanname给bean对象。\n\n2.beanclassloaderaware：回传classloader给bean对象。\n\n3.beanfactoryaware：回传beanfactory给对象。\n\n\n# 2.10 初始化前（扩展点）\n\nspring提供的一个扩展点：\n\nbeanpostprocessor.postprocessbeforeinitialization()\n\n在spring源码中：\n\n1.initdestroyannotationbeanpostprocessor会在初始化前这个步骤中执行**@postconstruct**的方法。\n\n2.applicationcontextawareprocessor会在初始化前这个步骤进行其他aware的回调：\n\n1）environmentaware：回传环境变量\n\n2）embeddedvalueresolveraware：回传占位符解析器\n\n3）resourceloaderaware：回传资源加载器\n\n4）applicationeventpublisheraware：回传事件发布器\n\n5）messagesourceaware：回传国际化资源\n\n6）applicationstartupaware：回传应用其他监听对象，可忽略\n\n7）applicationcontextaware：回传spring容器applicationcontext\n\n\n# 2.11 初始化\n\n1.当前bean对象是否实现了initializingbean接口，实现了就调用其**afterpropertiesset()**方法。\n\n2.执行beandefinition中指定的初始化方法。\n\n\n# 2.12 初始化后（扩展点）\n\nbean创建生命周期中的最后一个步骤，spring提供的一个扩展点：\n\nbeanpostprocessor.postprocessafterinitialization()\n\n可以在这个步骤中对bean进行最终处理。\n\nspring中的aop就是基于初始化后实现的。初始化后返回的对象才是最终的bean对象。\n\n\n# 3 bean的销毁过程\n\nbean销毁是发生在spring容器关闭过程中的。\n\n1.在bean创建过程中，最后（初始化后）有一个步骤去判断当前创建的bean是不是disposablebean：\n\n1）当前bean是否实现了disposablebean接口。\n\n2）当前bean是否实现了autocloseable接口。\n\n3）beandefinition中是否指定了destroymethod。\n\n4）调用destructionawarebeanpostprocessor.requiresdestruction(bean)进行判断。\n\n5）把符合上述任意一个条件的bean适配成disposablebeanadapter对象，并存入disposablebeans中。其中disposablebeans是一个linkedhashmap。\n\n2.在spring容器关闭过程时：\n\n1）首先发布contextclosedevent事件。\n\n2）调用lifecycleprocessor的oncloese()方法。\n\n3）遍历disposablebeans销毁单例bean。\n\n\n# 4 什么是循环依赖？\n\na创建时 --\x3e 需要b --\x3e b去创建时 --\x3e 需要a，从而产生循环。\n\n如何打破循环，加个中间人（缓存）\n\n实际上就是使用了三级缓存解决循环依赖。\n\n\n# 5 详细讲下三级缓存？\n\n\n# 5.1 singletonobjects（一级缓存：单例池）\n\n缓存经过了完整生命周期的bean。\n\n\n# 5.2 earlysingletonobjects（二级缓存）\n\n缓存未经过完整生命周期的bean，只要某个bean出现了循环依赖，就会提前把这个暂时未经过完整生命周期的bean放入earlysingletonobjects中（这个bean如果要经过aop，那么就会把代理对象放入earlysingletonobjects中，否则就是把原始对象放入earlysingletonobjects），即使是代理对象，代理对象所代理的原始对象也是没有经过完整生命周期的。\n\n\n# 5.3 singletonfactories（三级缓存）\n\n缓存的是一个lambda表达式。在每个bean的生成过程中，经过实例化得到一个原始对象后，都会提前基于原始对象暴露一个lambda表达式，并保存到三级缓存中（这个lambda表达式可能用到也可能用不到，如果当前bean没有出现循环依赖，那么这个lambda表达式没用）。如果当前bean在依赖注入时发现出现了循环依赖，则从三级缓存中拿到lambda表达式，并执行lambda表达式得到一个对象，并把得到的对象放入二级缓存。\n\n\n# 5.4 earlyproxyreferences\n\n其实还要一个缓存，就是earlyproxyreferences，它用来记录某个原始对象是否进行过aop了。\n\n\n# 6 为什么需要第三级缓存？\n\n主要为了处理aop的问题。\n\n如果没有第三级缓存earlysingletonobjects，则每个bean在依赖注入之前都要去进行aop的操作，不符合bean的生命周期步骤设计，即aop对象是在初始化之后生成。\n\n有第三级缓存，则没有循环依赖的需要aop对象可以按bean的生命周期步骤进行，有循环依赖的需要aop对象在依赖注入时通过三级缓存中lambda表达式获取aop对象放入二级缓存。初始化后要生成aop对象时去判断是否已经生成过，已生成则不再处理。",charsets:{cjk:!0}},{title:"Mybatis",frontmatter:{title:"Mybatis",date:"2022-05-08T00:15:17.000Z",permalink:"/pages/fb83f0/",categories:["学习笔记","Spring"],tags:["Spring"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07.Spring/79.Mybatis.html",relativePath:"01.学习笔记/07.Spring/79.Mybatis.md",key:"v-6901ab76",path:"/pages/fb83f0/",headers:[{level:2,title:"1 Mybatis常见问题",slug:"_1-mybatis常见问题",normalizedTitle:"1 mybatis常见问题",charIndex:2},{level:3,title:"1.1 Mybatis是如何进行分页的？分页插件的原理是什么？",slug:"_1-1-mybatis是如何进行分页的-分页插件的原理是什么",normalizedTitle:"1.1 mybatis是如何进行分页的？分页插件的原理是什么？",charIndex:20},{level:3,title:"1.2 Mybatis有哪些动态sql标签？",slug:"_1-2-mybatis有哪些动态sql标签",normalizedTitle:"1.2 mybatis有哪些动态sql标签？",charIndex:173},{level:3,title:"1.3 Mybatis Xml映射文件中有哪些常见标签？",slug:"_1-3-mybatis-xml映射文件中有哪些常见标签",normalizedTitle:"1.3 mybatis xml映射文件中有哪些常见标签？",charIndex:274},{level:3,title:"1.4 Mybatis的一级、二级缓存",slug:"_1-4-mybatis的一级、二级缓存",normalizedTitle:"1.4 mybatis的一级、二级缓存",charIndex:421},{level:3,title:"1.5 Mybatis一对一、一对多的关联查询",slug:"_1-5-mybatis一对一、一对多的关联查询",normalizedTitle:"1.5 mybatis一对一、一对多的关联查询",charIndex:569},{level:2,title:"2 Mybatis插件",slug:"_2-mybatis插件",normalizedTitle:"2 mybatis插件",charIndex:597},{level:3,title:"2.1 Mybatis插件的运行原理？",slug:"_2-1-mybatis插件的运行原理",normalizedTitle:"2.1 mybatis插件的运行原理？",charIndex:613},{level:3,title:"2.2 如何编写一个Mybatis插件？",slug:"_2-2-如何编写一个mybatis插件",normalizedTitle:"2.2 如何编写一个mybatis插件？",charIndex:765}],excerpt:'<h2 id="_1-mybatis常见问题"><a class="header-anchor" href="#_1-mybatis常见问题">#</a> 1 Mybatis常见问题</h2>\n<h3 id="_1-1-mybatis是如何进行分页的-分页插件的原理是什么"><a class="header-anchor" href="#_1-1-mybatis是如何进行分页的-分页插件的原理是什么">#</a> 1.1 Mybatis是如何进行分页的？分页插件的原理是什么？</h3>\n<p>1.Mybatis使用RowBounds对象进行分页，它是针对结果集进行的内存分页。</p>\n<p>2.分页插件的原理是使用<strong>Mybatis提供的插件接口</strong>，实现自定义插件，可以在插件的拦截方法内拦截待执行的sql，然后重写sql来完成物理分页。</p>\n<h3 id="_1-2-mybatis有哪些动态sql标签"><a class="header-anchor" href="#_1-2-mybatis有哪些动态sql标签">#</a> 1.2 Mybatis有哪些动态sql标签？</h3>\n<p>Mybatis提供了9种动态sql标签：trim、where、set、foreach、if、choose、when、otherwise、bind</p>\n<h3 id="_1-3-mybatis-xml映射文件中有哪些常见标签"><a class="header-anchor" href="#_1-3-mybatis-xml映射文件中有哪些常见标签">#</a> 1.3 Mybatis Xml映射文件中有哪些常见标签？</h3>\n<p>select、insert、update、delete、resultMap、parameterMap、sql、include，加上动态sql9个标签，其中&lt;sql&gt;为sql片段标签，通过&lt;include&gt;标签引入sql片段。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Mybatis常见问题 1.1 Mybatis是如何进行分页的？分页插件的原理是什么？ 1.2 Mybatis有哪些动态sql标签？ 1.3 Mybatis Xml映射文件中有哪些常见标签？ 1.4 Mybatis的一级、二级缓存 1.5 Mybatis一对一、一对多的关联查询 2 Mybatis插件 2.1 Mybatis插件的运行原理？ 2.2 如何编写一个Mybatis插件？",content:"# 1 Mybatis常见问题\n\n\n# 1.1 Mybatis是如何进行分页的？分页插件的原理是什么？\n\n1.Mybatis使用RowBounds对象进行分页，它是针对结果集进行的内存分页。\n\n2.分页插件的原理是使用Mybatis提供的插件接口，实现自定义插件，可以在插件的拦截方法内拦截待执行的sql，然后重写sql来完成物理分页。\n\n\n# 1.2 Mybatis有哪些动态sql标签？\n\nMybatis提供了9种动态sql标签：trim、where、set、foreach、if、choose、when、otherwise、bind\n\n\n# 1.3 Mybatis Xml映射文件中有哪些常见标签？\n\nselect、insert、update、delete、resultMap、parameterMap、sql、include，加上动态sql9个标签，其中<sql>为sql片段标签，通过<include>标签引入sql片段。\n\n\n# 1.4 Mybatis的一级、二级缓存\n\n一级缓存：Mybatis的一级缓存是利用SqlSession实现的，同样的sql，如果在同一个SqlSession执行，就会利用一级缓存，提高查询效率。\n\n二级缓存：存储作用域为Mapper(Namespace)，可自定义存储源，如redis。\n\n\n# 1.5 Mybatis一对一、一对多的关联查询\n\n\n# 2 Mybatis插件\n\n\n# 2.1 Mybatis插件的运行原理？\n\nMybatis使用JDK的动态代理，为指定的接口生成代理对象，实现接口方法拦截功能。Mybatis仅支持4种指定接口的插件，分别是：ParameterHandler、ResultSetHandler、StatementHandler、Executor。\n\n\n# 2.2 如何编写一个Mybatis插件？\n\n实现Mybatis的Interceptor接口并重写intercept()方法，然后给插件编写注解，指定要拦截哪一个接口的哪些方法即可。另外还需要在配置文件中配置好编写的插件。",normalizedContent:"# 1 mybatis常见问题\n\n\n# 1.1 mybatis是如何进行分页的？分页插件的原理是什么？\n\n1.mybatis使用rowbounds对象进行分页，它是针对结果集进行的内存分页。\n\n2.分页插件的原理是使用mybatis提供的插件接口，实现自定义插件，可以在插件的拦截方法内拦截待执行的sql，然后重写sql来完成物理分页。\n\n\n# 1.2 mybatis有哪些动态sql标签？\n\nmybatis提供了9种动态sql标签：trim、where、set、foreach、if、choose、when、otherwise、bind\n\n\n# 1.3 mybatis xml映射文件中有哪些常见标签？\n\nselect、insert、update、delete、resultmap、parametermap、sql、include，加上动态sql9个标签，其中<sql>为sql片段标签，通过<include>标签引入sql片段。\n\n\n# 1.4 mybatis的一级、二级缓存\n\n一级缓存：mybatis的一级缓存是利用sqlsession实现的，同样的sql，如果在同一个sqlsession执行，就会利用一级缓存，提高查询效率。\n\n二级缓存：存储作用域为mapper(namespace)，可自定义存储源，如redis。\n\n\n# 1.5 mybatis一对一、一对多的关联查询\n\n\n# 2 mybatis插件\n\n\n# 2.1 mybatis插件的运行原理？\n\nmybatis使用jdk的动态代理，为指定的接口生成代理对象，实现接口方法拦截功能。mybatis仅支持4种指定接口的插件，分别是：parameterhandler、resultsethandler、statementhandler、executor。\n\n\n# 2.2 如何编写一个mybatis插件？\n\n实现mybatis的interceptor接口并重写intercept()方法，然后给插件编写注解，指定要拦截哪一个接口的哪些方法即可。另外还需要在配置文件中配置好编写的插件。",charsets:{cjk:!0}},{title:"位图|布隆",frontmatter:{title:"位图|布隆",date:"2022-05-08T10:45:45.000Z",permalink:"/pages/ce06ac/",categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/103.%E4%BD%8D%E5%9B%BE%7C%E5%B8%83%E9%9A%86.html",relativePath:"01.学习笔记/10.Redis/103.位图|布隆.md",key:"v-67b11051",path:"/pages/ce06ac/",headers:[{level:2,title:"1 什么是位图？",slug:"_1-什么是位图",normalizedTitle:"1 什么是位图？",charIndex:2},{level:2,title:"2 什么是布隆过滤器？",slug:"_2-什么是布隆过滤器",normalizedTitle:"2 什么是布隆过滤器？",charIndex:274}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 什么是位图？ 2 什么是布隆过滤器？",content:"# 1 什么是位图？\n\n一个由1亿个数组成的集合M，范围从1~10亿。新来一个数n，如何快速且地判断是否存在M中？\n\n申请一个大小为10亿，数据类型为布尔的“特殊”散列表，将这一亿个数作为散列表下标，将值设成True。\n\n不过很多语言的布尔大小是1字节，并不能节省很大空间，实际上只需要使用1个二进制位，来表示true和false两个值就行了。\n\n这就要用到位运算了，借助编程语言提供的数据类型，比如int，char等，通过位运算，用其中的某个位表示某个数字。 这就是位图。\n\n\n\n消耗大小：约120M。\n\n操作平台拦截件使用了位图实现！\n\n\n# 2 什么是布隆过滤器？\n\n位图有个问题，想想看，如果数的范围是1到100亿呢，那位图消耗的大小就是1.2G了！！，相对于散列表，不降反升。 这个时候，布隆过滤器登场了，它其实是对位图一种改进。\n\n * 针对数据范围是1到100亿的集合，还是申请10亿的二进制大小的位图（消耗内存120M）\n * 使用多个哈希函数，得到k个不同的哈希值，记为 x1,x2,x3...xk。将k个数字作为位图中的下标，将对应的值设为1\n\n\n\n * 适当选择k个哈希函数，k个哈希值都相同的概率就非常低了，但又会带来新的问题，那就是误判\n\n\n\n * 布隆过滤器的误判有个特点：\n\n没有就是没有，有就有极低的可能会没有。",normalizedContent:"# 1 什么是位图？\n\n一个由1亿个数组成的集合m，范围从1~10亿。新来一个数n，如何快速且地判断是否存在m中？\n\n申请一个大小为10亿，数据类型为布尔的“特殊”散列表，将这一亿个数作为散列表下标，将值设成true。\n\n不过很多语言的布尔大小是1字节，并不能节省很大空间，实际上只需要使用1个二进制位，来表示true和false两个值就行了。\n\n这就要用到位运算了，借助编程语言提供的数据类型，比如int，char等，通过位运算，用其中的某个位表示某个数字。 这就是位图。\n\n\n\n消耗大小：约120m。\n\n操作平台拦截件使用了位图实现！\n\n\n# 2 什么是布隆过滤器？\n\n位图有个问题，想想看，如果数的范围是1到100亿呢，那位图消耗的大小就是1.2g了！！，相对于散列表，不降反升。 这个时候，布隆过滤器登场了，它其实是对位图一种改进。\n\n * 针对数据范围是1到100亿的集合，还是申请10亿的二进制大小的位图（消耗内存120m）\n * 使用多个哈希函数，得到k个不同的哈希值，记为 x1,x2,x3...xk。将k个数字作为位图中的下标，将对应的值设为1\n\n\n\n * 适当选择k个哈希函数，k个哈希值都相同的概率就非常低了，但又会带来新的问题，那就是误判\n\n\n\n * 布隆过滤器的误判有个特点：\n\n没有就是没有，有就有极低的可能会没有。",charsets:{cjk:!0}},{title:"过期删除",frontmatter:{title:"过期删除",date:"2022-05-08T10:48:13.000Z",permalink:"/pages/83dde6/",categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/106.%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4.html",relativePath:"01.学习笔记/10.Redis/106.过期删除.md",key:"v-e20a2f9c",path:"/pages/83dde6/",headers:[{level:2,title:"1 定期删除",slug:"_1-定期删除",normalizedTitle:"1 定期删除",charIndex:148},{level:2,title:"2 惰性删除",slug:"_2-惰性删除",normalizedTitle:"2 惰性删除",charIndex:302},{level:2,title:"3 主动清理策略",slug:"_3-主动清理策略",normalizedTitle:"3 主动清理策略",charIndex:562},{level:3,title:"a) 设置过期时间的key做处理",slug:"a-设置过期时间的key做处理",normalizedTitle:"a) 设置过期时间的key做处理",charIndex:696},{level:4,title:"3.1 volatile-ttl",slug:"_3-1-volatile-ttl",normalizedTitle:"3.1 volatile-ttl",charIndex:716},{level:4,title:"3.2 volatile-random",slug:"_3-2-volatile-random",normalizedTitle:"3.2 volatile-random",charIndex:783},{level:4,title:"3.3 volatile-lru",slug:"_3-3-volatile-lru",normalizedTitle:"3.3 volatile-lru",charIndex:838},{level:4,title:"3.4 volatile-lfu",slug:"_3-4-volatile-lfu",normalizedTitle:"3.4 volatile-lfu",charIndex:886},{level:3,title:"b) 针对所有的key做处理",slug:"b-针对所有的key做处理",normalizedTitle:"b) 针对所有的key做处理",charIndex:935},{level:4,title:"3.5 allkeys-random",slug:"_3-5-allkeys-random",normalizedTitle:"3.5 allkeys-random",charIndex:953},{level:4,title:"3.6 allkeys-lru",slug:"_3-6-allkeys-lru",normalizedTitle:"3.6 allkeys-lru",charIndex:994},{level:4,title:"3.7 allkeys-lfu",slug:"_3-7-allkeys-lfu",normalizedTitle:"3.7 allkeys-lfu",charIndex:1037},{level:3,title:"c) 不处理",slug:"c-不处理",normalizedTitle:"c) 不处理",charIndex:1081},{level:4,title:"3.8 noeviction",slug:"_3-8-noeviction",normalizedTitle:"3.8 noeviction",charIndex:1091},{level:2,title:"4 LFU、LRU数据淘汰策略",slug:"_4-lfu、lru数据淘汰策略",normalizedTitle:"4 lfu、lru数据淘汰策略",charIndex:1204},{level:3,title:"4.1 LRU",slug:"_4-1-lru",normalizedTitle:"4.1 lru",charIndex:1224},{level:3,title:"4.2 LFU",slug:"_4-2-lfu",normalizedTitle:"4.2 lfu",charIndex:1301},{level:3,title:"4.3 配置建议",slug:"_4-3-配置建议",normalizedTitle:"4.3 配置建议",charIndex:1380}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 定期删除 2 惰性删除 3 主动清理策略 a) 设置过期时间的key做处理 3.1 volatile-ttl 3.2 volatile-random 3.3 volatile-lru 3.4 volatile-lfu b) 针对所有的key做处理 3.5 allkeys-random 3.6 allkeys-lru 3.7 allkeys-lfu c) 不处理 3.8 noeviction 4 LFU、LRU数据淘汰策略 4.1 LRU 4.2 LFU 4.3 配置建议",content:'# redis怎么进行过期删除？\n\n我们set key的时候，都可以给一个expire time，就是过期时间，通过过期时间可以指定这个key存活的时间。\n\n如果假设你设置了一批key只能存活1个小时，那么接下来1小时后，redis是怎么对这批key进行删除的?\n\n定期删除+惰性删除。\n\n\n# 1 定期删除\n\nredis默认是每隔 100ms 就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机呢?你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所 有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载!\n\n\n# 2 惰性删除\n\n定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的哈!\n\n但是仅仅通过设置过期时间还是有问题的。我们想一下:如果定期删除漏掉了很多过期 key，然后你也没及时去查， 也就没走惰性删除，此时会怎么样?如果大量过期key堆积在内存里，导致redis内存块耗尽了。怎么解决这个问题呢? -- redis内存淘汰机制。\n\n\n# 3 主动清理策略\n\n根据自身业务类型，配置好maxmemory-policy(默认是noeviction)，\n\n推荐使用volatile-lru。\n\n主动清理策略在Redis4.0之前一共实现了6种内存淘汰策略，在4.0之后，又增加了2种策略，总共8种策略：\n\n\n# a) 设置过期时间的key做处理\n\n# 3.1 volatile-ttl\n\n在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。\n\n# 3.2 volatile-random\n\n就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。\n\n# 3.3 volatile-lru\n\n会使用 LRU 算法筛选设置了过期时间的键值对删除。\n\n# 3.4 volatile-lfu\n\n会使用 LFU 算法筛选设置了过期时间的键值对删除。\n\n\n# b) 针对所有的key做处理\n\n# 3.5 allkeys-random\n\n从所有键值对中随机选择并删除数据。\n\n# 3.6 allkeys-lru\n\n使用 LRU 算法在所有数据中进行筛选删除。\n\n# 3.7 allkeys-lfu\n\n使用 LFU 算法在所有数据中进行筛选删除。\n\n\n# c) 不处理\n\n# 3.8 noeviction\n\n不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息"(error) OOM command not allowed when used memory"，此时Redis只响应读操作。\n\n\n# 4 LFU、LRU数据淘汰策略\n\n\n# 4.1 LRU\n\nLRU 算法(Least Recently Used，最近最少使用)\n\n淘汰很久没被访问过的数据，以最近一次访问时间作为参考。\n\n\n# 4.2 LFU\n\nLFU 算法(Least Frequently Used，最不经常使用)\n\n淘汰最近一段时间被访问次数最少的数据，以次数作为参考。\n\n\n# 4.3 配置建议\n\n当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。这时使用LFU可能更好点。',normalizedContent:'# redis怎么进行过期删除？\n\n我们set key的时候，都可以给一个expire time，就是过期时间，通过过期时间可以指定这个key存活的时间。\n\n如果假设你设置了一批key只能存活1个小时，那么接下来1小时后，redis是怎么对这批key进行删除的?\n\n定期删除+惰性删除。\n\n\n# 1 定期删除\n\nredis默认是每隔 100ms 就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机呢?你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所 有的设置过期时间的 key 的话，就会给 cpu 带来很大的负载!\n\n\n# 2 惰性删除\n\n定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的哈!\n\n但是仅仅通过设置过期时间还是有问题的。我们想一下:如果定期删除漏掉了很多过期 key，然后你也没及时去查， 也就没走惰性删除，此时会怎么样?如果大量过期key堆积在内存里，导致redis内存块耗尽了。怎么解决这个问题呢? -- redis内存淘汰机制。\n\n\n# 3 主动清理策略\n\n根据自身业务类型，配置好maxmemory-policy(默认是noeviction)，\n\n推荐使用volatile-lru。\n\n主动清理策略在redis4.0之前一共实现了6种内存淘汰策略，在4.0之后，又增加了2种策略，总共8种策略：\n\n\n# a) 设置过期时间的key做处理\n\n# 3.1 volatile-ttl\n\n在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。\n\n# 3.2 volatile-random\n\n就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。\n\n# 3.3 volatile-lru\n\n会使用 lru 算法筛选设置了过期时间的键值对删除。\n\n# 3.4 volatile-lfu\n\n会使用 lfu 算法筛选设置了过期时间的键值对删除。\n\n\n# b) 针对所有的key做处理\n\n# 3.5 allkeys-random\n\n从所有键值对中随机选择并删除数据。\n\n# 3.6 allkeys-lru\n\n使用 lru 算法在所有数据中进行筛选删除。\n\n# 3.7 allkeys-lfu\n\n使用 lfu 算法在所有数据中进行筛选删除。\n\n\n# c) 不处理\n\n# 3.8 noeviction\n\n不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息"(error) oom command not allowed when used memory"，此时redis只响应读操作。\n\n\n# 4 lfu、lru数据淘汰策略\n\n\n# 4.1 lru\n\nlru 算法(least recently used，最近最少使用)\n\n淘汰很久没被访问过的数据，以最近一次访问时间作为参考。\n\n\n# 4.2 lfu\n\nlfu 算法(least frequently used，最不经常使用)\n\n淘汰最近一段时间被访问次数最少的数据，以次数作为参考。\n\n\n# 4.3 配置建议\n\n当存在热点数据时，lru的效率很好，但偶发性的、周期性的批量操作会导致lru命中率急剧下降，缓存污染情况比较严重。这时使用lfu可能更好点。',charsets:{cjk:!0}},{title:"持久化",frontmatter:{title:"持久化",date:"2022-05-08T11:01:48.000Z",permalink:"/pages/55dced/",categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/109.%E6%8C%81%E4%B9%85%E5%8C%96.html",relativePath:"01.学习笔记/10.Redis/109.持久化.md",key:"v-0b408b65",path:"/pages/55dced/",headers:[{level:2,title:"1 RDB持久化(快照持久化)",slug:"_1-rdb持久化-快照持久化",normalizedTitle:"1 rdb持久化(快照持久化)",charIndex:66},{level:3,title:"1.1 RDB持久化是怎么触发的？",slug:"_1-1-rdb持久化是怎么触发的",normalizedTitle:"1.1 rdb持久化是怎么触发的？",charIndex:158},{level:4,title:"1.1.1 save触发方式",slug:"_1-1-1-save触发方式",normalizedTitle:"1.1.1 save触发方式",charIndex:209},{level:4,title:"1.1.2 bgsave触发方式",slug:"_1-1-2-bgsave触发方式",normalizedTitle:"1.1.2 bgsave触发方式",charIndex:274},{level:4,title:"1.1.3 自动触发方式",slug:"_1-1-3-自动触发方式",normalizedTitle:"1.1.3 自动触发方式",charIndex:441},{level:3,title:"1.2 RDB有什么优势和劣势？",slug:"_1-2-rdb有什么优势和劣势",normalizedTitle:"1.2 rdb有什么优势和劣势？",charIndex:708},{level:4,title:"1.2.1 RDB优势",slug:"_1-2-1-rdb优势",normalizedTitle:"1.2.1 rdb优势",charIndex:728},{level:4,title:"1.2.1 RDB劣势",slug:"_1-2-1-rdb劣势",normalizedTitle:"1.2.1 rdb劣势",charIndex:830},{level:2,title:"2 AOF持久化(append-only file)",slug:"_2-aof持久化-append-only-file",normalizedTitle:"2 aof持久化(append-only file)",charIndex:873},{level:3,title:"2.1 AOF的持久化是怎么触发的？",slug:"_2-1-aof的持久化是怎么触发的",normalizedTitle:"2.1 aof的持久化是怎么触发的？",charIndex:1068},{level:4,title:"2.1.1 appendfsync always",slug:"_2-1-1-appendfsync-always",normalizedTitle:"2.1.1 appendfsync always",charIndex:1128},{level:4,title:"2.1.2 appendfsync everysec",slug:"_2-1-2-appendfsync-everysec",normalizedTitle:"2.1.2 appendfsync everysec",charIndex:1194},{level:4,title:"2.1.3 appendfsync no",slug:"_2-1-3-appendfsync-no",normalizedTitle:"2.1.3 appendfsync no",charIndex:1258},{level:3,title:"2.2 AOF持久化3种触发方式的对比？",slug:"_2-2-aof持久化3种触发方式的对比",normalizedTitle:"2.2 aof持久化3种触发方式的对比？",charIndex:1299},{level:3,title:"2.3 AOF方式什么时候会出现文件重写？",slug:"_2-3-aof方式什么时候会出现文件重写",normalizedTitle:"2.3 aof方式什么时候会出现文件重写？",charIndex:1324},{level:3,title:"2.4 AOF有什么优势和劣势？",slug:"_2-4-aof有什么优势和劣势",normalizedTitle:"2.4 aof有什么优势和劣势？",charIndex:1479},{level:4,title:"2.4.1 AOF优势",slug:"_2-4-1-aof优势",normalizedTitle:"2.4.1 aof优势",charIndex:1499},{level:4,title:"2.4.2 AOF劣势",slug:"_2-4-2-aof劣势",normalizedTitle:"2.4.2 aof劣势",charIndex:1716},{level:2,title:"3 混合持久化",slug:"_3-混合持久化",normalizedTitle:"3 混合持久化",charIndex:1763},{level:2,title:"4 数据怎么恢复？",slug:"_4-数据怎么恢复",normalizedTitle:"4 数据怎么恢复？",charIndex:2125}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 RDB持久化(快照持久化) 1.1 RDB持久化是怎么触发的？ 1.1.1 save触发方式 1.1.2 bgsave触发方式 1.1.3 自动触发方式 1.2 RDB有什么优势和劣势？ 1.2.1 RDB优势 1.2.1 RDB劣势 2 AOF持久化(append-only file) 2.1 AOF的持久化是怎么触发的？ 2.1.1 appendfsync always 2.1.2 appendfsync everysec 2.1.3 appendfsync no 2.2 AOF持久化3种触发方式的对比？ 2.3 AOF方式什么时候会出现文件重写？ 2.4 AOF有什么优势和劣势？ 2.4.1 AOF优势 2.4.2 AOF劣势 3 混合持久化 4 数据怎么恢复？",content:"Redis的持久化方式：快照(snapshotting，RDB)，只追加文件(append-only file,AOF)。\n\n\n# 1 RDB持久化(快照持久化)\n\nRDB持久化是将内存中的数据以快照的方式写进二进制文件中，默认的文件名为：dump.rdb。\n\n快照持久化是Redis默认采用的持久化方式。\n\n\n# 1.1 RDB持久化是怎么触发的？\n\nRDB支持3种触发方式：save，bgsave，自动化。\n\n# 1.1.1 save触发方式\n\n该命令会阻塞redis服务器，命令执行期间redis不能执行其他命令，直到RDB过程结束。\n\n# 1.1.2 bgsave触发方式\n\n该命令不会阻塞redis服务器，命令执行期间redis还可以响应客户端需求。\n\n具体过程是redis进程执行fork操作创建一个子进程，RDB持久化过程由该子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短**。Redis内部所有RDB操作基本上都是用bgsave命令。**\n\n# 1.1.3 自动触发方式\n\n自动触发是由我们配置文件来完成的。在redis.conf配置文件中默认有此下配置:\n\nsave 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\n\n# 1.2 RDB有什么优势和劣势？\n\n# 1.2.1 RDB优势\n\n1）RDB文件紧凑，全量备份，非常适合数据备份和灾难恢复。\n\n2）RDB过程可通过子线程进行，不影响redis主线程。\n\n3）恢复大数据集时，恢复速度比AOF恢复速度快。\n\n# 1.2.1 RDB劣势\n\n快照持久化期间修改的数据不会被保存，可能丢失数据。\n\n\n# 2 AOF持久化(append-only file)\n\nAOF的工作机制很简单，就是redis把每一个收到的写命令都追加保存到AOF文件中。\n\n与快照持久化相比，AOF持久化 的实时性更好，因此已成为主流的持久化方案。\n\n默认情况下Redis没有开启。\n\nAOF(append only file)方式的持久化，可以通过appendonly参数开启: appendonly yes\n\n\n# 2.1 AOF的持久化是怎么触发的？\n\n在Redis的配置文件中存在三种不同的 AOF 持久化方式，它们分别是:\n\n# 2.1.1 appendfsync always\n\n每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度。\n\n# 2.1.2 appendfsync everysec\n\n异步操作，每秒钟同步一次数据到硬盘，如果1秒内宕机，有数据丢失。\n\n# 2.1.3 appendfsync no\n\n让操作系统决定何时进行同步。\n\n\n# 2.2 AOF持久化3种触发方式的对比？\n\n\n# 2.3 AOF方式什么时候会出现文件重写？\n\n由于AOF方式会记录所有的写命令，对于同一份数据来说，AOF日志文件要比RDB快照文件更大。随着持久化文件越来越大，redis会fork出子线程来将文件进行重写。\n\n重写AOF文件不会读取旧文件，而是将内存中的数据内容用命令的方式重写一个新的AOF文件。\n\n\n# 2.4 AOF有什么优势和劣势？\n\n# 2.4.1 AOF优势\n\n1）AOF可以更好地保护数据不丢失，一般设置每隔1秒同步一次数据，所以最多丢失1秒的数据。\n\n2）AOF日志文件每次写入数据都是追加，写入性能很高。\n\n3）AOF可以后台操作，不影响客户端读写。\n\n4）AOF非常适合针对误删等情况进行数据恢复。比如有人不小心执行了flushall命令清空了数据，可以通过删除AOF文件中最后一条flushall命令，再将AOF文件放回去，执行恢复操作，恢复所有数据。\n\n# 2.4.2 AOF劣势\n\n1）针对同一份数据，AOF日志文件通常比RDB快照文件大。\n\n\n# 3 混合持久化\n\nRDB和AOF的特点：\n\nRedis 4.0 带来了一个新的持久化选项——混合持久化。\n\n重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。\n\n通过如下配置可以开启混合持久化(必须先开启aof):\n\n#aof‐use‐rdb‐preambleyes\n\nAOF在重写时，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写这一刻之前的内存做RDB快照处理，并且将RDB快照内容和增量的AOF修改内存数据的命令存在一起，都写入新的AOF文件，重写完新的AOF文件覆盖原有的AOF文件，完成新旧两个AOF文件的替换。\n\n\n# 4 数据怎么恢复？\n\n例：",normalizedContent:"redis的持久化方式：快照(snapshotting，rdb)，只追加文件(append-only file,aof)。\n\n\n# 1 rdb持久化(快照持久化)\n\nrdb持久化是将内存中的数据以快照的方式写进二进制文件中，默认的文件名为：dump.rdb。\n\n快照持久化是redis默认采用的持久化方式。\n\n\n# 1.1 rdb持久化是怎么触发的？\n\nrdb支持3种触发方式：save，bgsave，自动化。\n\n# 1.1.1 save触发方式\n\n该命令会阻塞redis服务器，命令执行期间redis不能执行其他命令，直到rdb过程结束。\n\n# 1.1.2 bgsave触发方式\n\n该命令不会阻塞redis服务器，命令执行期间redis还可以响应客户端需求。\n\n具体过程是redis进程执行fork操作创建一个子进程，rdb持久化过程由该子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短**。redis内部所有rdb操作基本上都是用bgsave命令。**\n\n# 1.1.3 自动触发方式\n\n自动触发是由我们配置文件来完成的。在redis.conf配置文件中默认有此下配置:\n\nsave 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，redis就会自动触发bgsave命令创建快照。\n\nsave 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，redis就会自动触发bgsave命令创建快照。\n\nsave 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，redis就会自动触发bgsave命令创建快照。\n\n\n# 1.2 rdb有什么优势和劣势？\n\n# 1.2.1 rdb优势\n\n1）rdb文件紧凑，全量备份，非常适合数据备份和灾难恢复。\n\n2）rdb过程可通过子线程进行，不影响redis主线程。\n\n3）恢复大数据集时，恢复速度比aof恢复速度快。\n\n# 1.2.1 rdb劣势\n\n快照持久化期间修改的数据不会被保存，可能丢失数据。\n\n\n# 2 aof持久化(append-only file)\n\naof的工作机制很简单，就是redis把每一个收到的写命令都追加保存到aof文件中。\n\n与快照持久化相比，aof持久化 的实时性更好，因此已成为主流的持久化方案。\n\n默认情况下redis没有开启。\n\naof(append only file)方式的持久化，可以通过appendonly参数开启: appendonly yes\n\n\n# 2.1 aof的持久化是怎么触发的？\n\n在redis的配置文件中存在三种不同的 aof 持久化方式，它们分别是:\n\n# 2.1.1 appendfsync always\n\n每次有数据修改发生时都会写入aof文件,这样会严重降低redis的速度。\n\n# 2.1.2 appendfsync everysec\n\n异步操作，每秒钟同步一次数据到硬盘，如果1秒内宕机，有数据丢失。\n\n# 2.1.3 appendfsync no\n\n让操作系统决定何时进行同步。\n\n\n# 2.2 aof持久化3种触发方式的对比？\n\n\n# 2.3 aof方式什么时候会出现文件重写？\n\n由于aof方式会记录所有的写命令，对于同一份数据来说，aof日志文件要比rdb快照文件更大。随着持久化文件越来越大，redis会fork出子线程来将文件进行重写。\n\n重写aof文件不会读取旧文件，而是将内存中的数据内容用命令的方式重写一个新的aof文件。\n\n\n# 2.4 aof有什么优势和劣势？\n\n# 2.4.1 aof优势\n\n1）aof可以更好地保护数据不丢失，一般设置每隔1秒同步一次数据，所以最多丢失1秒的数据。\n\n2）aof日志文件每次写入数据都是追加，写入性能很高。\n\n3）aof可以后台操作，不影响客户端读写。\n\n4）aof非常适合针对误删等情况进行数据恢复。比如有人不小心执行了flushall命令清空了数据，可以通过删除aof文件中最后一条flushall命令，再将aof文件放回去，执行恢复操作，恢复所有数据。\n\n# 2.4.2 aof劣势\n\n1）针对同一份数据，aof日志文件通常比rdb快照文件大。\n\n\n# 3 混合持久化\n\nrdb和aof的特点：\n\nredis 4.0 带来了一个新的持久化选项——混合持久化。\n\n重启 redis 时，我们很少使用 rdb来恢复内存状态，因为会丢失大量数据。我们通常使用 aof 日志重放，但是重放 aof 日志性能相对 rdb来说要慢很多，这样在 redis 实例很大的情况下，启动需要花费很长的时间。\n\n通过如下配置可以开启混合持久化(必须先开启aof):\n\n#aof‐use‐rdb‐preambleyes\n\naof在重写时，不再是单纯将内存数据转换为resp命令写入aof文件，而是将重写这一刻之前的内存做rdb快照处理，并且将rdb快照内容和增量的aof修改内存数据的命令存在一起，都写入新的aof文件，重写完新的aof文件覆盖原有的aof文件，完成新旧两个aof文件的替换。\n\n\n# 4 数据怎么恢复？\n\n例：",charsets:{cjk:!0}},{title:"缓存雪崩|击穿|穿透",frontmatter:{title:"缓存雪崩|击穿|穿透",date:"2022-05-08T11:18:32.000Z",permalink:"/pages/64119e/",sticky:6,categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/112.%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%7C%E5%87%BB%E7%A9%BF%7C%E7%A9%BF%E9%80%8F.html",relativePath:"01.学习笔记/10.Redis/112.缓存雪崩|击穿|穿透.md",key:"v-3a10b989",path:"/pages/64119e/",headers:[{level:2,title:"1 缓存雪崩",slug:"_1-缓存雪崩",normalizedTitle:"1 缓存雪崩",charIndex:2},{level:3,title:"1.1 什么是缓存雪崩？",slug:"_1-1-什么是缓存雪崩",normalizedTitle:"1.1 什么是缓存雪崩？",charIndex:13},{level:3,title:"1.2 缓存雪崩有什么解决方案？",slug:"_1-2-缓存雪崩有什么解决方案",normalizedTitle:"1.2 缓存雪崩有什么解决方案？",charIndex:75},{level:2,title:"2 缓存击穿",slug:"_2-缓存击穿",normalizedTitle:"2 缓存击穿",charIndex:240},{level:3,title:"2.1 什么是缓存击穿？",slug:"_2-1-什么是缓存击穿",normalizedTitle:"2.1 什么是缓存击穿？",charIndex:251},{level:3,title:"2.2 缓存击穿有什么解决方案？",slug:"_2-2-缓存击穿有什么解决方案",normalizedTitle:"2.2 缓存击穿有什么解决方案？",charIndex:366},{level:2,title:"3 缓存穿透",slug:"_3-缓存穿透",normalizedTitle:"3 缓存穿透",charIndex:469},{level:3,title:"3.1 什么是缓存穿透？",slug:"_3-1-什么是缓存穿透",normalizedTitle:"3.1 什么是缓存穿透？",charIndex:480},{level:3,title:"3.2 缓存穿透有什么解决方案？",slug:"_3-2-缓存穿透有什么解决方案",normalizedTitle:"3.2 缓存穿透有什么解决方案？",charIndex:565}],excerpt:'<h2 id="_1-缓存雪崩"><a class="header-anchor" href="#_1-缓存雪崩">#</a> 1 缓存雪崩</h2>\n<h3 id="_1-1-什么是缓存雪崩"><a class="header-anchor" href="#_1-1-什么是缓存雪崩">#</a> 1.1 什么是缓存雪崩？</h3>\n<p>缓存同一时间大面积失效，后面请求全部落到数据库，造成数据库短时间内承受大量请求而崩掉。</p>\n<h3 id="_1-2-缓存雪崩有什么解决方案"><a class="header-anchor" href="#_1-2-缓存雪崩有什么解决方案">#</a> 1.2 缓存雪崩有什么解决方案？</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">步骤</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">事前</td>\n<td>1）尽量保证整个redis集群高可用，发现机器宕机尽快补上。</td>\n</tr>\n<tr>\n<td style="text-align:left"></td>\n<td>2）缓存失效时间可以在原来的基础上加多一个随机值，避免同一时间集体失效。</td>\n</tr>\n<tr>\n<td style="text-align:left">事中</td>\n<td>开启限流或者降级，避免Mysql崩掉。</td>\n</tr>\n<tr>\n<td style="text-align:left">事后</td>\n<td>利用redis持久化机制保存的数据尽快恢复缓存。</td>\n</tr>\n</tbody>\n</table>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 缓存雪崩 1.1 什么是缓存雪崩？ 1.2 缓存雪崩有什么解决方案？ 2 缓存击穿 2.1 什么是缓存击穿？ 2.2 缓存击穿有什么解决方案？ 3 缓存穿透 3.1 什么是缓存穿透？ 3.2 缓存穿透有什么解决方案？",content:"# 1 缓存雪崩\n\n\n# 1.1 什么是缓存雪崩？\n\n缓存同一时间大面积失效，后面请求全部落到数据库，造成数据库短时间内承受大量请求而崩掉。\n\n\n# 1.2 缓存雪崩有什么解决方案？\n\n步骤   解决方案\n事前   1）尽量保证整个redis集群高可用，发现机器宕机尽快补上。\n     2）缓存失效时间可以在原来的基础上加多一个随机值，避免同一时间集体失效。\n事中   开启限流或者降级，避免Mysql崩掉。\n事后   利用redis持久化机制保存的数据尽快恢复缓存。\n\n\n# 2 缓存击穿\n\n\n# 2.1 什么是缓存击穿？\n\nKey对应的数据存在，但是在redis未缓存或者已经过期，此时大量请求过来，由于redis中不存在，需要去数据库查询之后再回写redis缓存，造成大量请求直接打在数据库上，很容易把数据库压垮。\n\n\n# 2.2 缓存击穿有什么解决方案？\n\n1）定时任务主动刷新缓存。\n\n2）通过加锁的方式解决，用普通jvm的锁就可以。\n\n查缓存时能命中则直接返回，不能命中则需要获取锁才能进行下一步访问数据库等操作。\n\n\n# 3 缓存穿透\n\n\n# 3.1 什么是缓存穿透？\n\nKey对应的数据不存在，一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。\n\n\n# 3.2 缓存穿透有什么解决方案？\n\n1）最简单粗暴的办法，如果一个查询返回的数据为空（不管数据不存在，还是系统故障），仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。\n\n2）采用布隆过滤器，将有值的key存放到布隆过滤器中，则没有值的key必然会被过滤掉。",normalizedContent:"# 1 缓存雪崩\n\n\n# 1.1 什么是缓存雪崩？\n\n缓存同一时间大面积失效，后面请求全部落到数据库，造成数据库短时间内承受大量请求而崩掉。\n\n\n# 1.2 缓存雪崩有什么解决方案？\n\n步骤   解决方案\n事前   1）尽量保证整个redis集群高可用，发现机器宕机尽快补上。\n     2）缓存失效时间可以在原来的基础上加多一个随机值，避免同一时间集体失效。\n事中   开启限流或者降级，避免mysql崩掉。\n事后   利用redis持久化机制保存的数据尽快恢复缓存。\n\n\n# 2 缓存击穿\n\n\n# 2.1 什么是缓存击穿？\n\nkey对应的数据存在，但是在redis未缓存或者已经过期，此时大量请求过来，由于redis中不存在，需要去数据库查询之后再回写redis缓存，造成大量请求直接打在数据库上，很容易把数据库压垮。\n\n\n# 2.2 缓存击穿有什么解决方案？\n\n1）定时任务主动刷新缓存。\n\n2）通过加锁的方式解决，用普通jvm的锁就可以。\n\n查缓存时能命中则直接返回，不能命中则需要获取锁才能进行下一步访问数据库等操作。\n\n\n# 3 缓存穿透\n\n\n# 3.1 什么是缓存穿透？\n\nkey对应的数据不存在，一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。\n\n\n# 3.2 缓存穿透有什么解决方案？\n\n1）最简单粗暴的办法，如果一个查询返回的数据为空（不管数据不存在，还是系统故障），仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。\n\n2）采用布隆过滤器，将有值的key存放到布隆过滤器中，则没有值的key必然会被过滤掉。",charsets:{cjk:!0}},{title:"集群",frontmatter:{title:"集群",date:"2022-05-08T11:22:38.000Z",permalink:"/pages/aa0d2f/",categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/115.%E9%9B%86%E7%BE%A4.html",relativePath:"01.学习笔记/10.Redis/115.集群.md",key:"v-87435aee",path:"/pages/aa0d2f/",headers:[{level:2,title:"1 主从复制",slug:"_1-主从复制",normalizedTitle:"1 主从复制",charIndex:2},{level:3,title:"1.1 全量复制",slug:"_1-1-全量复制",normalizedTitle:"1.1 全量复制",charIndex:13},{level:3,title:"1.2 部分复制、断点续传",slug:"_1-2-部分复制、断点续传",normalizedTitle:"1.2 部分复制、断点续传",charIndex:445},{level:3,title:"1.3 主从复制风暴",slug:"_1-3-主从复制风暴",normalizedTitle:"1.3 主从复制风暴",charIndex:677},{level:2,title:"2 哨兵模式",slug:"_2-哨兵模式",normalizedTitle:"2 哨兵模式",charIndex:769},{level:2,title:"3 高可用集群模式",slug:"_3-高可用集群模式",normalizedTitle:"3 高可用集群模式",charIndex:1075},{level:2,title:"4 Redis集群节点间的通信机制",slug:"_4-redis集群节点间的通信机制",normalizedTitle:"4 redis集群节点间的通信机制",charIndex:1323},{level:2,title:"5 Redis集群选举",slug:"_5-redis集群选举",normalizedTitle:"5 redis集群选举",charIndex:1645},{level:3,title:"5.1 选举流程",slug:"_5-1-选举流程",normalizedTitle:"5.1 选举流程",charIndex:1661},{level:3,title:"5.2 集群脑裂问题",slug:"_5-2-集群脑裂问题",normalizedTitle:"5.2 集群脑裂问题",charIndex:2377},{level:3,title:"5.3 Redis集群为什么至少要三个master节点，并且推荐奇数？",slug:"_5-3-redis集群为什么至少要三个master节点-并且推荐奇数",normalizedTitle:"5.3 redis集群为什么至少要三个master节点，并且推荐奇数？",charIndex:2471},{level:2,title:"6 常见问题",slug:"_6-常见问题",normalizedTitle:"6 常见问题",charIndex:2702},{level:3,title:"6.1 Redis集群下可以执行批量操作命令吗？",slug:"_6-1-redis集群下可以执行批量操作命令吗",normalizedTitle:"6.1 redis集群下可以执行批量操作命令吗？",charIndex:2713},{level:3,title:"6.2 Redis集群支持多数据库吗？",slug:"_6-2-redis集群支持多数据库吗",normalizedTitle:"6.2 redis集群支持多数据库吗？",charIndex:2909},{level:3,title:"6.3 Redis集群不足的地方？",slug:"_6-3-redis集群不足的地方",normalizedTitle:"6.3 redis集群不足的地方？",charIndex:2979},{level:3,title:"6.4 Redis集群方案什么情况下会导致集群不可用？",slug:"_6-4-redis集群方案什么情况下会导致集群不可用",normalizedTitle:"6.4 redis集群方案什么情况下会导致集群不可用？",charIndex:3073}],excerpt:'<h2 id="_1-主从复制"><a class="header-anchor" href="#_1-主从复制">#</a> 1 主从复制</h2>\n<h3 id="_1-1-全量复制"><a class="header-anchor" href="#_1-1-全量复制">#</a> 1.1 全量复制</h3>\n<img src="/img/media/74f356c78ea0d121d2187da9285d3ea9.png" class="imgcss" width="70%">\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 主从复制 1.1 全量复制 1.2 部分复制、断点续传 1.3 主从复制风暴 2 哨兵模式 3 高可用集群模式 4 Redis集群节点间的通信机制 5 Redis集群选举 5.1 选举流程 5.2 集群脑裂问题 5.3 Redis集群为什么至少要三个master节点，并且推荐奇数？ 6 常见问题 6.1 Redis集群下可以执行批量操作命令吗？ 6.2 Redis集群支持多数据库吗？ 6.3 Redis集群不足的地方？ 6.4 Redis集群方案什么情况下会导致集群不可用？",content:"# 1 主从复制\n\n\n# 1.1 全量复制\n\n1.如果你为master配置了一个slave，不管这个slave是否是第一次连接上Master，它都会发送一个PSYNC命令给master请求复制数据。\n\n2.master收到PSYNC命令后，会在后台进行数据持久化通过bgsave生成最新的rdb快照文件。\n\n3.持久化期间，master会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。\n\n4.当持久化进行完毕以后，master会把这份rdb文件数据集发送给slave，slave会把接收到的数据进行持久化生成rdb，然后再加载到内存中。\n\n5.然后，master再将之前缓存在内存中的命令发送给slave。\n\n6.当master与slave之间的连接由于某些原因而断开时，slave能够自动重连Master，如果master收到了多 个slave并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的slave。\n\n\n# 1.2 部分复制、断点续传\n\n1.master会在其内存中创建一个复制数据用的缓存队列，缓存最近一段时间的数据。\n\n2.master和它所有的slave都维护了复制的数据下标offset和master的进程id，因此，当网络连接断开后，slave会请求master继续进行未完成的复制，从所记录的数据下标开始。\n\n3.如果master进程id变化了，或者从节点数据下标offset太旧，已经不在master的缓存队列里了，那么将会进行一次全量数据的复制。\n\n\n# 1.3 主从复制风暴\n\n如果有很多从节点，为了缓解主从复制风暴(多个从节点同时复制主节点导致主节点压力过大)，可以做如 下架构，让部分从节点与从节点(与主节点同步)同步数据。\n\n\n# 2 哨兵模式\n\n1.sentinel哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点。\n\n2.哨兵架构下client端第一次从哨兵找出redis的主节点，后续就直接访问redis的主节点，不会每次都通过 sentinel代理访问redis的主节点，当redis的主节点发生变化，哨兵会第一时间感知到，并且将新的redis主节点通知给client端。\n\n缺点：\n\n1.哨兵的配置较复杂。\n\n2.主从切换的瞬间存在访问瞬断的情况。\n\n3.哨兵模式只有一个主节点对外提供服务，没法支持很高并发。且单个主节点内存不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率。\n\n\n# 3 高可用集群模式\n\n集群模式没有中心节点，可水平扩展，可以线性扩展到上万个节点(官方推荐不超过1000个节点)。\n\nRedis Cluster 将所有数据划分为 16384 个 slots(槽位)，每个节点负责其中一部分槽位。槽位的信息存储于每个节点中。\n\n槽位定位算法\n\nCluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对16384进行取模来得到具体槽位。\n\nHASH_SLOT = CRC16(key) mod 16384\n\n\n# 4 Redis集群节点间的通信机制\n\n集中式:\n\n优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节点读取的时候立即就可以立即感知到;不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数据的存储压力。 很多中间件都会借助zookeeper集中式存储元数据。\n\nRedis集群节点间采用gossip协议进行通信。\n\ngossip协议包括多种消息，包括ping，pong，meet，fail等等。\n\n优点：\n\n元数据更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定延时，降低了压力。\n\n缺点：\n\n元数据更新有延时可能导致集群的一些操作会有一些滞后。\n\n\n# 5 Redis集群选举\n\n\n# 5.1 选举流程\n\n当slave发现自己的master变为FAIL状态时，便尝试进行Failover，以期成为新的master。由于挂掉的master 可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下:\n\n1.slave发现自己的master变为FAIL。\n\n2.将自己记录的集群currentEpoch加1，并广播FAILOVER_AUTH_REQUEST信息。\n\n3.其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个 epoch只发送一次ack。\n\n4.尝试failover的slave收集master返回的FAILOVER_AUTH_ACK。\n\n5.slave收到超过半数master的ack后变成新Master。\n\n(这里解释了集群为什么至少需要三个主节点，如果只有两个，当其中一个挂了，只剩一个主节点是不能选举成功的)\n\n6.slave广播Pong消息通知其他集群节点。\n\n从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待 FAIL状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到FAIL状态，可能会拒绝投票。\n\n延迟计算公式:\n\nDELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms\n\nSLAVE_RANK表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方式下，持有最新数据的slave将会首先发起选举(理论上)。\n\n\n# 5.2 集群脑裂问题\n\nRedis集群没有过半机制会有脑裂问题，网络分区导致脑裂后多个主节点对外提供写服务，一旦网络分区恢复，会将其中一个主节点变为从节点，这时会有大量数据丢失。\n\n\n# 5.3 Redis集群为什么至少要三个master节点，并且推荐奇数？\n\n选举新master需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，挂了一个，就达不到过半数选举的条件。\n\n奇数个master节点可以在满足选举条件的基础上节省一个节点。比如三个master跟四个master，大家挂了一个都可以选举新master，挂了两个都不可以选举新master。所以奇数的master节点更多的是从节省机器资源角度出发说的。\n\n\n# 6 常见问题\n\n\n# 6.1 Redis集群下可以执行批量操作命令吗？\n\nRedis集群是没法执行批量操作命令的，如mget，pipeline等。这是因为redis将集群划分为16383个哈希槽，不同的key会划分到不同的槽中。\n\n但是，Jedis客户端提供了计算key的slot方法，以及slot和节点之间的映射关系，通过这两个数据，就可以计算出每个key所在的节点，然后使用pipeline获取数据。\n\n\n# 6.2 Redis集群支持多数据库吗？\n\nRedis集群是不支持多数据库的，只有一个数据库空间，默认 SELECT 0，即db0。\n\n\n# 6.3 Redis集群不足的地方？\n\n1.集群模式下做批量操作比较麻烦，需要自己计算处理。\n\n2.假如有一个key，对应的value是hash类型的，不支持映射到集群的不同节点。\n\n\n# 6.4 Redis集群方案什么情况下会导致集群不可用？\n\n当redis.conf的配置cluster-require-full-coverage为no时，表示当负责一个插槽的主节点下线且没有相应的从节点进行故障恢复时，集群仍然可用，如果为yes则集群不可用。",normalizedContent:"# 1 主从复制\n\n\n# 1.1 全量复制\n\n1.如果你为master配置了一个slave，不管这个slave是否是第一次连接上master，它都会发送一个psync命令给master请求复制数据。\n\n2.master收到psync命令后，会在后台进行数据持久化通过bgsave生成最新的rdb快照文件。\n\n3.持久化期间，master会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。\n\n4.当持久化进行完毕以后，master会把这份rdb文件数据集发送给slave，slave会把接收到的数据进行持久化生成rdb，然后再加载到内存中。\n\n5.然后，master再将之前缓存在内存中的命令发送给slave。\n\n6.当master与slave之间的连接由于某些原因而断开时，slave能够自动重连master，如果master收到了多 个slave并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的slave。\n\n\n# 1.2 部分复制、断点续传\n\n1.master会在其内存中创建一个复制数据用的缓存队列，缓存最近一段时间的数据。\n\n2.master和它所有的slave都维护了复制的数据下标offset和master的进程id，因此，当网络连接断开后，slave会请求master继续进行未完成的复制，从所记录的数据下标开始。\n\n3.如果master进程id变化了，或者从节点数据下标offset太旧，已经不在master的缓存队列里了，那么将会进行一次全量数据的复制。\n\n\n# 1.3 主从复制风暴\n\n如果有很多从节点，为了缓解主从复制风暴(多个从节点同时复制主节点导致主节点压力过大)，可以做如 下架构，让部分从节点与从节点(与主节点同步)同步数据。\n\n\n# 2 哨兵模式\n\n1.sentinel哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点。\n\n2.哨兵架构下client端第一次从哨兵找出redis的主节点，后续就直接访问redis的主节点，不会每次都通过 sentinel代理访问redis的主节点，当redis的主节点发生变化，哨兵会第一时间感知到，并且将新的redis主节点通知给client端。\n\n缺点：\n\n1.哨兵的配置较复杂。\n\n2.主从切换的瞬间存在访问瞬断的情况。\n\n3.哨兵模式只有一个主节点对外提供服务，没法支持很高并发。且单个主节点内存不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率。\n\n\n# 3 高可用集群模式\n\n集群模式没有中心节点，可水平扩展，可以线性扩展到上万个节点(官方推荐不超过1000个节点)。\n\nredis cluster 将所有数据划分为 16384 个 slots(槽位)，每个节点负责其中一部分槽位。槽位的信息存储于每个节点中。\n\n槽位定位算法\n\ncluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对16384进行取模来得到具体槽位。\n\nhash_slot = crc16(key) mod 16384\n\n\n# 4 redis集群节点间的通信机制\n\n集中式:\n\n优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节点读取的时候立即就可以立即感知到;不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数据的存储压力。 很多中间件都会借助zookeeper集中式存储元数据。\n\nredis集群节点间采用gossip协议进行通信。\n\ngossip协议包括多种消息，包括ping，pong，meet，fail等等。\n\n优点：\n\n元数据更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定延时，降低了压力。\n\n缺点：\n\n元数据更新有延时可能导致集群的一些操作会有一些滞后。\n\n\n# 5 redis集群选举\n\n\n# 5.1 选举流程\n\n当slave发现自己的master变为fail状态时，便尝试进行failover，以期成为新的master。由于挂掉的master 可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下:\n\n1.slave发现自己的master变为fail。\n\n2.将自己记录的集群currentepoch加1，并广播failover_auth_request信息。\n\n3.其他节点收到该信息，只有master响应，判断请求者的合法性，并发送failover_auth_ack，对每一个 epoch只发送一次ack。\n\n4.尝试failover的slave收集master返回的failover_auth_ack。\n\n5.slave收到超过半数master的ack后变成新master。\n\n(这里解释了集群为什么至少需要三个主节点，如果只有两个，当其中一个挂了，只剩一个主节点是不能选举成功的)\n\n6.slave广播pong消息通知其他集群节点。\n\n从节点并不是在主节点一进入 fail 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待 fail状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到fail状态，可能会拒绝投票。\n\n延迟计算公式:\n\ndelay = 500ms + random(0 ~ 500ms) + slave_rank * 1000ms\n\nslave_rank表示此slave已经从master复制数据的总量的rank。rank越小代表已复制的数据越新。这种方式下，持有最新数据的slave将会首先发起选举(理论上)。\n\n\n# 5.2 集群脑裂问题\n\nredis集群没有过半机制会有脑裂问题，网络分区导致脑裂后多个主节点对外提供写服务，一旦网络分区恢复，会将其中一个主节点变为从节点，这时会有大量数据丢失。\n\n\n# 5.3 redis集群为什么至少要三个master节点，并且推荐奇数？\n\n选举新master需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，挂了一个，就达不到过半数选举的条件。\n\n奇数个master节点可以在满足选举条件的基础上节省一个节点。比如三个master跟四个master，大家挂了一个都可以选举新master，挂了两个都不可以选举新master。所以奇数的master节点更多的是从节省机器资源角度出发说的。\n\n\n# 6 常见问题\n\n\n# 6.1 redis集群下可以执行批量操作命令吗？\n\nredis集群是没法执行批量操作命令的，如mget，pipeline等。这是因为redis将集群划分为16383个哈希槽，不同的key会划分到不同的槽中。\n\n但是，jedis客户端提供了计算key的slot方法，以及slot和节点之间的映射关系，通过这两个数据，就可以计算出每个key所在的节点，然后使用pipeline获取数据。\n\n\n# 6.2 redis集群支持多数据库吗？\n\nredis集群是不支持多数据库的，只有一个数据库空间，默认 select 0，即db0。\n\n\n# 6.3 redis集群不足的地方？\n\n1.集群模式下做批量操作比较麻烦，需要自己计算处理。\n\n2.假如有一个key，对应的value是hash类型的，不支持映射到集群的不同节点。\n\n\n# 6.4 redis集群方案什么情况下会导致集群不可用？\n\n当redis.conf的配置cluster-require-full-coverage为no时，表示当负责一个插槽的主节点下线且没有相应的从节点进行故障恢复时，集群仍然可用，如果为yes则集群不可用。",charsets:{cjk:!0}},{title:"基础",frontmatter:{title:"基础",date:"2022-05-08T10:59:12.000Z",permalink:"/pages/6ff65b/",categories:["学习笔记","Redis"],tags:["Redis"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/100.%E5%9F%BA%E7%A1%80.html",relativePath:"01.学习笔记/10.Redis/100.基础.md",key:"v-1166401c",path:"/pages/6ff65b/",headers:[{level:2,title:"1 Redis是单线程的吗？",slug:"_1-redis是单线程的吗",normalizedTitle:"1 redis是单线程的吗？",charIndex:2},{level:2,title:"2 Redis单线程为什么还能这么快？",slug:"_2-redis单线程为什么还能这么快",normalizedTitle:"2 redis单线程为什么还能这么快？",charIndex:155},{level:2,title:"3 Redis单线程如何处理那么多的并发客户端连接？",slug:"_3-redis单线程如何处理那么多的并发客户端连接",normalizedTitle:"3 redis单线程如何处理那么多的并发客户端连接？",charIndex:309},{level:2,title:"4 Redis支持哪些数据类型？",slug:"_4-redis支持哪些数据类型",normalizedTitle:"4 redis支持哪些数据类型？",charIndex:805},{level:2,title:"5 Redis的单点吞吐量？",slug:"_5-redis的单点吞吐量",normalizedTitle:"5 redis的单点吞吐量？",charIndex:1422},{level:2,title:"6 其他高级命令",slug:"_6-其他高级命令",normalizedTitle:"6 其他高级命令",charIndex:1464},{level:2,title:"7 Redis最大内存配置",slug:"_7-redis最大内存配置",normalizedTitle:"7 redis最大内存配置",charIndex:1538}],excerpt:'<h2 id="_1-redis是单线程的吗"><a class="header-anchor" href="#_1-redis是单线程的吗">#</a> 1 Redis是单线程的吗？</h2>\n<p><strong>Redis 的单线程主要是指 Redis 的网络 IO（即一个线程处理所有网络请求） 和键值对读写是由一个线程来完成的</strong>，这也是 Redis 对外 提供键值存储服务的主要流程。但 Redis的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Redis是单线程的吗？ 2 Redis单线程为什么还能这么快？ 3 Redis单线程如何处理那么多的并发客户端连接？ 4 Redis支持哪些数据类型？ 5 Redis的单点吞吐量？ 6 其他高级命令 7 Redis最大内存配置",content:'# 1 Redis是单线程的吗？\n\nRedis 的单线程主要是指 Redis 的网络 IO（即一个线程处理所有网络请求） 和键值对读写是由一个线程来完成的，这也是 Redis 对外 提供键值存储服务的主要流程。但 Redis的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。\n\n\n# 2 Redis单线程为什么还能这么快？\n\n因为Redis所有数据都在内存中，所有的运算都是内存级别的运算，而且单线程避免了多线程的切换性能损耗问题。\n\n正因为Redis是单线程的，所有要小心使用Redis指令，对于那些耗时的指令（比如keys），一定要谨慎使用，一不小心就可能会导致Redis卡顿。\n\n\n# 3 Redis单线程如何处理那么多的并发客户端连接？\n\n核心是利用epoll来使用IO多路复用。\n\nRedis基于Reactor模式开发了自己的网络事件处理器，称之为文件事件处理器。文件事件处理器由Socket、IO多路复用程序、文件事件分派器、事件处理器四部分组成。\n\nIO多路复用程序会把所有产生事件的socket压入一个队列中，然后有序地每次仅一个socket的方式传送给文件事件分派器，文件事件分派器接收到socket之后会根据socket产生的事件类型调用对应的事件处理器进行处理。\n\nReactor模式\n\nReactor模式：基于事件驱动的设计，当有事件触发时，才会调用处理器进行数据处理。\n从结构上，这有点类似生产者消费者模式，即有一个或多个生产者将事件放入一个Queue中，而一个或多个消费者主动的从这个Queue中Poll事件来处理；\n而Reactor模式则并没有Queue来做缓冲，每当一个Event输入到Service Handler之后，\n该Service Handler会主动的根据不同的Event类型将其分发给对应的Request Handler来处理。\n\n\n# 4 Redis支持哪些数据类型？\n\nRedis主要支持5种数据类型，分别是：\n\nstring（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）\n\nstring:\n\nstring类型是redis最基本的数据类型，一个键最大能存储512M\n\n示例：增加：set name "testname" 查看：get name\n\nhash:\n\nhash是一个string类型的field和value的映射表。hash特别适合存储对象。\n\n示例：增加：hset myhash myfield1 "hello" myfield2 "world" 查看：hget myhash myfield2\n\nlist:\n\nlist是简单的字符串列表。可以从队头或者队尾插入元素。\n\n示例：增加：lpush mytestlist value1 value2 查看：lrange mytestlist 0 10\n\nset:\n\nset是string类型的无序集合，集合成员是唯一的。\n\n示例：增加：sadd mytestset value1 查看：smembers mytestset\n\nzset:\n\nzset是一个有序的set集合，每个元素会关联一个double型的分数，分数可以重复。\n\n示例：增加：zadd mytestzset 1 value1 查看：zrange mytestzset 0 10 withscores\n\n\n# 5 Redis的单点吞吐量？\n\n单点TPS达8万/秒，QPS达10万/秒。\n\n\n# 6 其他高级命令\n\nkeys:全量遍历键，用来列出所有满足特定正则字符串规则的key，当redis数据量比较大时，性能比较差，要避免使用。\n\n\n# 7 Redis最大内存配置\n\n一般推荐Redis设置最大内存maxmemory为最大物理内存的四分之三。\n\n如果不设置最大内存，当 Redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交 换 (swap)，会让 Redis 的性能急剧下降。\n\n当Redis运行在主从模式时，只有主结点才会执行过期删除策略，然后把删除操作”del key”同步到从结点删除数据。',normalizedContent:'# 1 redis是单线程的吗？\n\nredis 的单线程主要是指 redis 的网络 io（即一个线程处理所有网络请求） 和键值对读写是由一个线程来完成的，这也是 redis 对外 提供键值存储服务的主要流程。但 redis的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。\n\n\n# 2 redis单线程为什么还能这么快？\n\n因为redis所有数据都在内存中，所有的运算都是内存级别的运算，而且单线程避免了多线程的切换性能损耗问题。\n\n正因为redis是单线程的，所有要小心使用redis指令，对于那些耗时的指令（比如keys），一定要谨慎使用，一不小心就可能会导致redis卡顿。\n\n\n# 3 redis单线程如何处理那么多的并发客户端连接？\n\n核心是利用epoll来使用io多路复用。\n\nredis基于reactor模式开发了自己的网络事件处理器，称之为文件事件处理器。文件事件处理器由socket、io多路复用程序、文件事件分派器、事件处理器四部分组成。\n\nio多路复用程序会把所有产生事件的socket压入一个队列中，然后有序地每次仅一个socket的方式传送给文件事件分派器，文件事件分派器接收到socket之后会根据socket产生的事件类型调用对应的事件处理器进行处理。\n\nreactor模式\n\nreactor模式：基于事件驱动的设计，当有事件触发时，才会调用处理器进行数据处理。\n从结构上，这有点类似生产者消费者模式，即有一个或多个生产者将事件放入一个queue中，而一个或多个消费者主动的从这个queue中poll事件来处理；\n而reactor模式则并没有queue来做缓冲，每当一个event输入到service handler之后，\n该service handler会主动的根据不同的event类型将其分发给对应的request handler来处理。\n\n\n# 4 redis支持哪些数据类型？\n\nredis主要支持5种数据类型，分别是：\n\nstring（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）\n\nstring:\n\nstring类型是redis最基本的数据类型，一个键最大能存储512m\n\n示例：增加：set name "testname" 查看：get name\n\nhash:\n\nhash是一个string类型的field和value的映射表。hash特别适合存储对象。\n\n示例：增加：hset myhash myfield1 "hello" myfield2 "world" 查看：hget myhash myfield2\n\nlist:\n\nlist是简单的字符串列表。可以从队头或者队尾插入元素。\n\n示例：增加：lpush mytestlist value1 value2 查看：lrange mytestlist 0 10\n\nset:\n\nset是string类型的无序集合，集合成员是唯一的。\n\n示例：增加：sadd mytestset value1 查看：smembers mytestset\n\nzset:\n\nzset是一个有序的set集合，每个元素会关联一个double型的分数，分数可以重复。\n\n示例：增加：zadd mytestzset 1 value1 查看：zrange mytestzset 0 10 withscores\n\n\n# 5 redis的单点吞吐量？\n\n单点tps达8万/秒，qps达10万/秒。\n\n\n# 6 其他高级命令\n\nkeys:全量遍历键，用来列出所有满足特定正则字符串规则的key，当redis数据量比较大时，性能比较差，要避免使用。\n\n\n# 7 redis最大内存配置\n\n一般推荐redis设置最大内存maxmemory为最大物理内存的四分之三。\n\n如果不设置最大内存，当 redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交 换 (swap)，会让 redis 的性能急剧下降。\n\n当redis运行在主从模式时，只有主结点才会执行过期删除策略，然后把删除操作”del key”同步到从结点删除数据。',charsets:{cjk:!0}},{title:"Redisson分布式锁",frontmatter:{title:"Redisson分布式锁",date:"2022-05-08T11:38:51.000Z",permalink:"/pages/b2f2fe/",sticky:5,categories:["学习笔记","Redis"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.Redis/118.Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",relativePath:"01.学习笔记/10.Redis/118.Redisson分布式锁.md",key:"v-1f7222d7",path:"/pages/b2f2fe/",headers:[{level:2,title:"1 Redisson使用示例",slug:"_1-redisson使用示例",normalizedTitle:"1 redisson使用示例",charIndex:2},{level:2,title:"2 分布式锁演变过程",slug:"_2-分布式锁演变过程",normalizedTitle:"2 分布式锁演变过程",charIndex:2286},{level:3,title:"2.1 SETNX",slug:"_2-1-setnx",normalizedTitle:"2.1 setnx",charIndex:2301},{level:3,title:"2.2 超时设置",slug:"_2-2-超时设置",normalizedTitle:"2.2 超时设置",charIndex:2361},{level:3,title:"2.3 只能释放自己的锁",slug:"_2-3-只能释放自己的锁",normalizedTitle:"2.3 只能释放自己的锁",charIndex:2672},{level:3,title:"2.4 正确设置锁超时",slug:"_2-4-正确设置锁超时",normalizedTitle:"2.4 正确设置锁超时",charIndex:3257},{level:3,title:"2.5 实现可重入锁",slug:"_2-5-实现可重入锁",normalizedTitle:"2.5 实现可重入锁",charIndex:3410},{level:2,title:"3 Redis分布式锁存在什么缺点？",slug:"_3-redis分布式锁存在什么缺点",normalizedTitle:"3 redis分布式锁存在什么缺点？",charIndex:3773}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Redisson使用示例 2 分布式锁演变过程 2.1 SETNX 2.2 超时设置 2.3 只能释放自己的锁 2.4 正确设置锁超时 2.5 实现可重入锁 3 Redis分布式锁存在什么缺点？",content:'# 1 Redisson使用示例\n\nredission支持4种连接redis方式，分别为单机、主从、Sentinel、Cluster 集群。项目中使用的是集群模式。\n\n@Configuration\npublic class RedissonConfig {\n  @Autowired\n  private RedisConfigBean redisConfigBean;\n\n  @Bean\n  public Redisson redisson() {\n    List<String> clusterNodes = new ArrayList<>();\n    for (Map<String, String> node : redisConfigBean.getNodesInfo()) {\n      //redisson版本是3.5，集群的ip前面要加上“redis://”，不然会报错，3.2版本可不加\n      clusterNodes.add("redis://" + node.get("ip") + ":" + node.get("port"));\n    }\n    Config config = new Config();\n    ClusterServersConfig clusterServersConfig = config.useClusterServers();\n    //添加集群节点\n    clusterServersConfig.addNodeAddress(clusterNodes.toArray(new String[clusterNodes.size()]));\n    if (!StringUtils.isEmpty(redisConfigBean.getPassword())) {\n      //设置密码\n      clusterServersConfig.setPassword(redisConfigBean.getPassword());\n    }\n    return (Redisson) Redisson.create(config);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n@Component\n@ConfigurationProperties(\n        prefix = "redis"\n)\n@RefreshScope\npublic class RedisConfigBean {\n  private Integer cacheExpireTime;\n  private Integer randomRange;\n  private String password;\n  private Integer timeoutInMillis;\n  private Integer readTimeoutInMillis;\n  private Integer dbIndex;\n  private Integer maxTotal;\n  private List<Map<String, String>> nodesInfo;\n\n  public RedisConfigBean() {\n  }\n\n  public List<RedisNode> getNodesInfoList() {\n    if (CollectionUtils.isEmpty(this.nodesInfo)) {\n      throw new RedisException("redis nodes is empty");\n    } else {\n      List<RedisNode> list = new ArrayList();\n      this.nodesInfo.forEach((map) -> {\n        list.add(new RedisNode((String) map.get("ip"), Integer.parseInt((String) map.get("port"))));\n      });\n      return list;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\nredis:\n  maxTotal: 2048\n  ####### 使用RedisUtil里的setEx、putListCacheWithExpireTime、expire方法时，随机增加最大值为cacheExpireTime过期时间(秒)\n  randomRange: 10\n  #######  redis过期时间(秒)\n  cacheExpireTime: 7200\n  ####### JedisClient连接超时时间(毫秒)\n  timeoutInMillis: 3000\n  ####### JedisClient读取超时时间(毫秒)\n  readTimeoutInMillis: 2500\n  password: 89OBm#i9\n  nodesInfo:\n    - ip: 10.30.9.111\n      port: 6379\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 2 分布式锁演变过程\n\n\n# 2.1 SETNX\n\n存在问题：\n\n1）客户端所在节点奔溃，无法正确释放锁。\n\n2）业务逻辑异常，无法释放锁。\n\n\n# 2.2 超时设置\n\n设置超时时间，到点锁自动释放。\n\nSETNX lock:168 1 // 获取锁(integer) 1>\n\nEXPIRE lock:168 60 // 60s 自动删除(integer) 1\n\n存在问题：\n\n1）「加锁」、「设置超时」是两个命令，不是原子操作。可能出现执行了第一条命令，第二条执行失败的情况。\n\n解决方案：\n\nRedis 2.6.x之后，官方拓展了SET命令的参数，支持设置超时时间，并且满足原子性。\n\nset key_name random_value nx px 30000\n\nnx 表示只有key_name不存在才能设值成功。\n\npx 30000 表示30秒后自动过期。\n\n\n# 2.3 只能释放自己的锁\n\n存在问题：\n\n自己的锁可能被别人释放。\n\n比如：\n\n1.线程1获取锁成功并设置30秒后超时。\n\n2.线程1由于某些原因执行很慢（网络问题、fullGC问题等...），超过30秒还没执行完，此时Redis因为锁过期自动释放了锁。\n\n3.线程2获取锁执行自己业务。\n\n4.线程1执行完自己业务释放锁，结果此时释放成线程2的锁。\n\n解决方案：\n\n加锁的时候设置一个「唯一标识」作为value，释放锁的时候用自己的唯一标识和value作比较，匹配上才能释放锁。\n\n加锁：\n\nset key_name random_value nx px 30000\n\n释放锁：\n\nif (redis.get("key_name").equals(random_value)) {\n\n//比对成功则删除\n\nredis.del("key_name");\n\n}\n\n**问题：**释放锁时这种写法存在一个问题，get和del是两个操作，存在原子性问题。\n\n可以通过Lua脚本实现原子性：\n\n// 获取锁的 value 与 ARGV[1] 是否匹配，匹配则执行\n\ndelif redis.call("get",KEYS[1]) == ARGV[1]\n\nthen return redis.call("del",KEYS[1])\n\nelse return 0\n\nend\n\n\n# 2.4 正确设置锁超时\n\n超时时间的设置一般为：通过多轮压测，取平均时间的3 ~ 5倍。\n\n但即使这样仍然可能出现问题，可以通过以下方式完善超时时间设置：\n\n给获取锁的线程添加一个守护线程，该守护线程定期检测锁的失效时间，如果锁快要失效，但是业务还没执行完，就对这个锁进行续期，重新设置超时时间。\n\n\n# 2.5 实现可重入锁\n\n\n通过redis hash结构实现可重入锁。\n\n加锁：\n\n1.加锁时先使用redis exists判断key_name这个锁是否存在。\n\n2.如果锁不存在，使用hincrby创建一个key_name的hash表，random_value对应的value_count初始化为0再加1。\n\n3.如果key_name存在，用hexists判断random_value这个键存不存在，如果random_value存在，value_count使用hincrby加1，否则加锁失败。\n\n解锁：\n\n1.不存在key_name或不存在random_value，解锁失败。\n\n2.存在指定random_value，则使用hincrby减1，当value_count小于等于0，使用del删除这把锁。释放锁成功。\n\n\n# 3 Redis分布式锁存在什么缺点？\n\n由于redis集群同步数据的方式是异步，假设master节点获取到锁之后未完成数据同步就挂了，这个时候在新的master节点依然可以获取锁，所以多个客户端会同时获取到锁。',normalizedContent:'# 1 redisson使用示例\n\nredission支持4种连接redis方式，分别为单机、主从、sentinel、cluster 集群。项目中使用的是集群模式。\n\n@configuration\npublic class redissonconfig {\n  @autowired\n  private redisconfigbean redisconfigbean;\n\n  @bean\n  public redisson redisson() {\n    list<string> clusternodes = new arraylist<>();\n    for (map<string, string> node : redisconfigbean.getnodesinfo()) {\n      //redisson版本是3.5，集群的ip前面要加上“redis://”，不然会报错，3.2版本可不加\n      clusternodes.add("redis://" + node.get("ip") + ":" + node.get("port"));\n    }\n    config config = new config();\n    clusterserversconfig clusterserversconfig = config.useclusterservers();\n    //添加集群节点\n    clusterserversconfig.addnodeaddress(clusternodes.toarray(new string[clusternodes.size()]));\n    if (!stringutils.isempty(redisconfigbean.getpassword())) {\n      //设置密码\n      clusterserversconfig.setpassword(redisconfigbean.getpassword());\n    }\n    return (redisson) redisson.create(config);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n@component\n@configurationproperties(\n        prefix = "redis"\n)\n@refreshscope\npublic class redisconfigbean {\n  private integer cacheexpiretime;\n  private integer randomrange;\n  private string password;\n  private integer timeoutinmillis;\n  private integer readtimeoutinmillis;\n  private integer dbindex;\n  private integer maxtotal;\n  private list<map<string, string>> nodesinfo;\n\n  public redisconfigbean() {\n  }\n\n  public list<redisnode> getnodesinfolist() {\n    if (collectionutils.isempty(this.nodesinfo)) {\n      throw new redisexception("redis nodes is empty");\n    } else {\n      list<redisnode> list = new arraylist();\n      this.nodesinfo.foreach((map) -> {\n        list.add(new redisnode((string) map.get("ip"), integer.parseint((string) map.get("port"))));\n      });\n      return list;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\nredis:\n  maxtotal: 2048\n  ####### 使用redisutil里的setex、putlistcachewithexpiretime、expire方法时，随机增加最大值为cacheexpiretime过期时间(秒)\n  randomrange: 10\n  #######  redis过期时间(秒)\n  cacheexpiretime: 7200\n  ####### jedisclient连接超时时间(毫秒)\n  timeoutinmillis: 3000\n  ####### jedisclient读取超时时间(毫秒)\n  readtimeoutinmillis: 2500\n  password: 89obm#i9\n  nodesinfo:\n    - ip: 10.30.9.111\n      port: 6379\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 2 分布式锁演变过程\n\n\n# 2.1 setnx\n\n存在问题：\n\n1）客户端所在节点奔溃，无法正确释放锁。\n\n2）业务逻辑异常，无法释放锁。\n\n\n# 2.2 超时设置\n\n设置超时时间，到点锁自动释放。\n\nsetnx lock:168 1 // 获取锁(integer) 1>\n\nexpire lock:168 60 // 60s 自动删除(integer) 1\n\n存在问题：\n\n1）「加锁」、「设置超时」是两个命令，不是原子操作。可能出现执行了第一条命令，第二条执行失败的情况。\n\n解决方案：\n\nredis 2.6.x之后，官方拓展了set命令的参数，支持设置超时时间，并且满足原子性。\n\nset key_name random_value nx px 30000\n\nnx 表示只有key_name不存在才能设值成功。\n\npx 30000 表示30秒后自动过期。\n\n\n# 2.3 只能释放自己的锁\n\n存在问题：\n\n自己的锁可能被别人释放。\n\n比如：\n\n1.线程1获取锁成功并设置30秒后超时。\n\n2.线程1由于某些原因执行很慢（网络问题、fullgc问题等...），超过30秒还没执行完，此时redis因为锁过期自动释放了锁。\n\n3.线程2获取锁执行自己业务。\n\n4.线程1执行完自己业务释放锁，结果此时释放成线程2的锁。\n\n解决方案：\n\n加锁的时候设置一个「唯一标识」作为value，释放锁的时候用自己的唯一标识和value作比较，匹配上才能释放锁。\n\n加锁：\n\nset key_name random_value nx px 30000\n\n释放锁：\n\nif (redis.get("key_name").equals(random_value)) {\n\n//比对成功则删除\n\nredis.del("key_name");\n\n}\n\n**问题：**释放锁时这种写法存在一个问题，get和del是两个操作，存在原子性问题。\n\n可以通过lua脚本实现原子性：\n\n// 获取锁的 value 与 argv[1] 是否匹配，匹配则执行\n\ndelif redis.call("get",keys[1]) == argv[1]\n\nthen return redis.call("del",keys[1])\n\nelse return 0\n\nend\n\n\n# 2.4 正确设置锁超时\n\n超时时间的设置一般为：通过多轮压测，取平均时间的3 ~ 5倍。\n\n但即使这样仍然可能出现问题，可以通过以下方式完善超时时间设置：\n\n给获取锁的线程添加一个守护线程，该守护线程定期检测锁的失效时间，如果锁快要失效，但是业务还没执行完，就对这个锁进行续期，重新设置超时时间。\n\n\n# 2.5 实现可重入锁\n\n\n通过redis hash结构实现可重入锁。\n\n加锁：\n\n1.加锁时先使用redis exists判断key_name这个锁是否存在。\n\n2.如果锁不存在，使用hincrby创建一个key_name的hash表，random_value对应的value_count初始化为0再加1。\n\n3.如果key_name存在，用hexists判断random_value这个键存不存在，如果random_value存在，value_count使用hincrby加1，否则加锁失败。\n\n解锁：\n\n1.不存在key_name或不存在random_value，解锁失败。\n\n2.存在指定random_value，则使用hincrby减1，当value_count小于等于0，使用del删除这把锁。释放锁成功。\n\n\n# 3 redis分布式锁存在什么缺点？\n\n由于redis集群同步数据的方式是异步，假设master节点获取到锁之后未完成数据同步就挂了，这个时候在新的master节点依然可以获取锁，所以多个客户端会同时获取到锁。',charsets:{cjk:!0}},{title:"理论概念",frontmatter:{title:"理论概念",date:"2022-05-08T13:35:32.000Z",permalink:"/pages/8f7c47/",categories:["学习笔记","消息中间件"],tags:["消息中间件"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/153.%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5.html",relativePath:"01.学习笔记/15.消息中间件/153.理论概念.md",key:"v-aed71ebe",path:"/pages/8f7c47/",headers:[{level:2,title:"1 传统模式缺点",slug:"_1-传统模式缺点",normalizedTitle:"1 传统模式缺点",charIndex:2},{level:2,title:"2 中间件模式优点",slug:"_2-中间件模式优点",normalizedTitle:"2 中间件模式优点",charIndex:48},{level:3,title:"2.1 解耦",slug:"_2-1-解耦",normalizedTitle:"2.1 解耦",charIndex:62},{level:3,title:"2.2 异步",slug:"_2-2-异步",normalizedTitle:"2.2 异步",charIndex:169},{level:3,title:"2.3 削峰",slug:"_2-3-削峰",normalizedTitle:"2.3 削峰",charIndex:180},{level:2,title:"3 消息队列缺点",slug:"_3-消息队列缺点",normalizedTitle:"3 消息队列缺点",charIndex:245},{level:3,title:"3.1 系统可用性减低",slug:"_3-1-系统可用性减低",normalizedTitle:"3.1 系统可用性减低",charIndex:258},{level:3,title:"3.2 系统复杂度增加",slug:"_3-2-系统复杂度增加",normalizedTitle:"3.2 系统复杂度增加",charIndex:293}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 传统模式缺点 2 中间件模式优点 2.1 解耦 2.2 异步 2.3 削峰 3 消息队列缺点 3.1 系统可用性减低 3.2 系统复杂度增加",content:"# 1 传统模式缺点\n\n并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常。\n\n\n# 2 中间件模式优点\n\n\n# 2.1 解耦\n\n系统A在代码中直接调用系统B和系统C的代码，如果将来D系统接入，系统A还需要修改代码，过于麻烦！将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而系统A不需要做任何修改**。**\n\n\n# 2.2 异步\n\n\n# 2.3 削峰\n\n系统A慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。在生产中，这个短暂的高峰期积压是允许的。\n\n\n# 3 消息队列缺点\n\n\n# 3.1 系统可用性减低\n\n消息队列挂了，相关系统功能受影响。\n\n\n# 3.2 系统复杂度增加\n\n需要考虑很多方面问题，如重复消费问题、可靠传输（生产者弄丢数据、消息队列弄丢数据、消费者弄丢数据）问题、mq高可用（集群（镜像模式））等等。",normalizedContent:"# 1 传统模式缺点\n\n并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常。\n\n\n# 2 中间件模式优点\n\n\n# 2.1 解耦\n\n系统a在代码中直接调用系统b和系统c的代码，如果将来d系统接入，系统a还需要修改代码，过于麻烦！将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而系统a不需要做任何修改**。**\n\n\n# 2.2 异步\n\n\n# 2.3 削峰\n\n系统a慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。在生产中，这个短暂的高峰期积压是允许的。\n\n\n# 3 消息队列缺点\n\n\n# 3.1 系统可用性减低\n\n消息队列挂了，相关系统功能受影响。\n\n\n# 3.2 系统复杂度增加\n\n需要考虑很多方面问题，如重复消费问题、可靠传输（生产者弄丢数据、消息队列弄丢数据、消费者弄丢数据）问题、mq高可用（集群（镜像模式））等等。",charsets:{cjk:!0}},{title:"Kafka",frontmatter:{title:"Kafka",date:"2022-05-08T13:38:15.000Z",permalink:"/pages/9eb6ed/",sticky:4,categories:["学习笔记","消息中间件"],tags:["消息中间件"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/156.Kafka.html",relativePath:"01.学习笔记/15.消息中间件/156.Kafka.md",key:"v-0557ab18",path:"/pages/9eb6ed/",headers:[{level:2,title:"1 通信模型",slug:"_1-通信模型",normalizedTitle:"1 通信模型",charIndex:2},{level:2,title:"2 概念",slug:"_2-概念",normalizedTitle:"2 概念",charIndex:444},{level:3,title:"2.1 Topic & Partition",slug:"_2-1-topic-partition",normalizedTitle:"2.1 topic &amp; partition",charIndex:null},{level:3,title:"2.2 Consumer & ConsumerGroup",slug:"_2-2-consumer-consumergroup",normalizedTitle:"2.2 consumer &amp; consumergroup",charIndex:null},{level:3,title:"2.3 Producer",slug:"_2-3-producer",normalizedTitle:"2.3 producer",charIndex:1264},{level:2,title:"3 选举机制",slug:"_3-选举机制",normalizedTitle:"3 选举机制",charIndex:1982},{level:2,title:"4 HW与LEO",slug:"_4-hw与leo",normalizedTitle:"4 hw与leo",charIndex:2585},{level:2,title:"5 kafka核心总控制器Controller",slug:"_5-kafka核心总控制器controller",normalizedTitle:"5 kafka核心总控制器controller",charIndex:2722},{level:2,title:"6 kafka高性能原因",slug:"_6-kafka高性能原因",normalizedTitle:"6 kafka高性能原因",charIndex:3161},{level:2,title:"7 线上规划",slug:"_7-线上规划",normalizedTitle:"7 线上规划",charIndex:3754}],excerpt:'<h2 id="_1-通信模型"><a class="header-anchor" href="#_1-通信模型">#</a> 1 通信模型</h2>\n<img src="/img/media/68822c6c2a59844ed62d290f54c64a49.png" class="imgcss">\n<table>\n<thead>\n<tr>\n<th style="text-align:left">名称</th>\n<th style="text-align:left">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">Broker</td>\n<td style="text-align:left">消息中间件处理节点，一个Kafka节点就是一个broker，一个或者多个Broker可以组成一个Kafka集群</td>\n</tr>\n<tr>\n<td style="text-align:left">Topic</td>\n<td style="text-align:left">Kafka根据topic对消息进行归类，发布到Kafka集群的每条消息都需要指定一个topic</td>\n</tr>\n<tr>\n<td style="text-align:left">Partition</td>\n<td style="text-align:left">物理上的概念，一个topic可以分为多个partition，每个partition内部消息是有序的</td>\n</tr>\n<tr>\n<td style="text-align:left">Consumer</td>\n<td style="text-align:left">消息消费者，从Broker读取消息的客户端</td>\n</tr>\n<tr>\n<td style="text-align:left">ConsumerGroup</td>\n<td style="text-align:left">每个Consumer属于一个特定的Consumer Group，一条消息可以被多个不同的Consumer Group消费，但是一个Consumer Group中只能有一个Consumer能够消费该消息</td>\n</tr>\n<tr>\n<td style="text-align:left">Producer</td>\n<td style="text-align:left">消息生产者，向Broker发送消息的客户端</td>\n</tr>\n</tbody>\n</table>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 通信模型 2 概念 2.1 Topic & Partition 2.2 Consumer & ConsumerGroup 2.3 Producer 3 选举机制 4 HW与LEO 5 kafka核心总控制器Controller 6 kafka高性能原因 7 线上规划",content:'# 1 通信模型\n\n名称              解释\nBroker          消息中间件处理节点，一个Kafka节点就是一个broker，一个或者多个Broker可以组成一个Kafka集群\nTopic           Kafka根据topic对消息进行归类，发布到Kafka集群的每条消息都需要指定一个topic\nPartition       物理上的概念，一个topic可以分为多个partition，每个partition内部消息是有序的\nConsumer        消息消费者，从Broker读取消息的客户端\nConsumerGroup   每个Consumer属于一个特定的Consumer Group，一条消息可以被多个不同的Consumer\n                Group消费，但是一个Consumer Group中只能有一个Consumer能够消费该消息\nProducer        消息生产者，向Broker发送消息的客户端\n\n\n# 2 概念\n\n\n# 2.1 Topic & Partition\n\n * 每个partition，都对应一个commit log文件。\n * 每个partition都有一个唯一编号：offset。\n * 每个consumer都是基于自己在commit log中的offset进行工作的。Offset由consumer自己维护。\n\n为什么topic数据要分区存储？\n\n1、分区之后可以将不同的分区放在不同的机器上，相当于对数据做了分布式存储\n\n2、提高并行度\n\n数据存储：server.properties log.dirs=/usr/local/data/kafka-logs\n\nKafka Broker 有一个参数，log.segment.bytes，限定了每个日志段文件的大小，最大就是 1GB。\n\n一个日志段文件满了，就自动开一个新的日志段文件来写入，避免单个文件过大，影响文件的读写性能，这个过程叫做 log rolling，正在被写入的那个日志段文件，叫做 active log segment。\n\n\n# 2.2 Consumer & ConsumerGroup\n\n * 一个partition同一个时刻在一个consumer group中只能有一个consumer在消费，从而保证消费顺序。\n * consumer group中的consumer的数量不能比一个Topic中的partition的数量多，否则多出来的consumer消费不到消息。\n\nKafka只在partition的范围内保证消息消费的局部顺序性，不能在同一个topic中的多个partition中保证总的消费顺序性。\n\n如果有在总体上保证消费顺序的需求，那么我们可以通过将topic的partition数量设置为1，将consumer group中的consumer instance数量也设置为1，但是这样会影响性能，所以kafka的顺序消费很少用。\n\n\n# 2.3 Producer\n\n写入方式\n\nproducer 采用 push 模式将消息发布到 broker，每条消息都是被append到patition中，属于顺序写磁盘\n\n消息路由\n\nproducer发送消息到broker时，会根据分区算法选择将其存储到哪一个partition。其路由机制为：\n\n1.指定了patition，则直接使用；\n\n2.未指定patition 但指定key，通过对key的value进行hash选出一个patition。\n\n3.patition和key都未指定，使用轮询选出一个patition。\n\n消息确认机制\n\nacks=0：表示producer不需要等待任何broker确认收到消息的回复，就可以继续发送下一条消息。\n\nacks=1：至少要等待leader已经成功将数据写入本地log，但不需要等待所有follower是否成功写入。\n\nacks=-1或all：leader需要等待所有备份(min.insync.replicas配置的备份个数)都成功写入日志\n\nacks=-1时的数据流程：\n\n1.producer先从zookeeper 的 "/brokers/.../state" 节点找到该partition的leader。\n\n2.producer将消息发送给该leader。\n\n3.leader将消息写入本地log。\n\n4.followers从leader pull消息，写入本地log后向leader发送ACK。\n\n5.leader收到所有ISR中的replica的ACK后，增加HW（high watermark，最后 commit 的 offset）并向producer发送ACK。\n\n\n# 3 选举机制\n\nController选举机制\n\nkafka集群启动的时候，会自动选举一台broker作为controller来管理整个集群，选举的过程是集群中每个broker都会尝试在zookeeper上创建一个 /controller 临时节点，zookeeper会保证有且仅有一个broker能创建成功，这个broker就会成为集群的总控器controller。\n\nPartition副本选举Leader机制\n\ncontroller感知到分区leader所在的broker挂了，会从ISR列表里挑第一个broker作为leader\n\n(参数unclean.leader.election.enable=false的前提下。\n\n参数unclean.leader.election.enable为true，则ISR列表里所有副本都挂了的时候可以在ISR列表外的副本中选leader，\n\n这种设置，可以提高可用性，但是选出的新leader有可能数据少很多。)\n\n副本进入ISR列表有两个条件:\n\n1.必须能与zookeeper保持会话以及跟leader副本网络连通\n\n2.副本能复制leader上的所有写操作，并且不能落后太多。(与leader副本同步滞后的副本，是由 replica.lag.time.max.ms配置决定的，超过这个时间都没有跟leader同步过的一次的副本会被移出ISR列表)\n\n\n# 4 HW与LEO\n\nLEO （Log End Offset）\n\nHW有两个主要的作用：\n\n1、用于实现副本备份机制（replication）；\n\n2、定义消息可见性，即HW之下的所有消息对consumer是可见的。如果没有HW机制，就需要其他手段来实现这两个功能。\n\n\n# 5 kafka核心总控制器Controller\n\n在Kafka集群中会有一个或者多个broker，其中有一个broker会被选举为控制器(Kafka Controller)，它负责管理整个集群中所有分区和副本的状态。\n\n主题管理\n\n完成对Kafka主题的创建、删除以及分区增加的操作\n\n分区重分配\n\n对已有主题分区进行细粒度的分配功能\n\n集群成员管理\n\n自动检测新增Broker、Broker主动关闭、Broker宕机.\n\n/brokers/ids/下面会存放Broker实例的id临时节点，当我们看到/brokers/ids下面有几个节点，就表示有多少个存活的Broker实例。\n\n当Broker宕机时，临时节点就会被删除，此时控制器对应的监听器就会感知到Broker下线，进而完成对应的下线工作。\n\n数据服务\n\n向其它Broker提供数据服务，控制器上保存了最全的集群元数据信息,\n\n其它Broker会定期接收控制器发来的元数据更新请求，从而更新其内存中的缓存数据\n\n\n# 6 kafka高性能原因\n\n * 磁盘顺序读写：kafka消息不能修改以及不会从文件中间删除保证了磁盘顺序读，kafka的消息写入文件都是追加在文件末尾。\n * **PageCache：**Kafka重度依赖底层操作系统提供的磁盘高速缓存PageCache（内核缓冲区）功能。\n   当上层有写操作时，操作系统只是将数据写入PageCache，同时标记Page属性为Dirty。内存池再异步地写到磁盘上。\n   当读操作发生时，先从PageCache中查找，如果发生缺页才进行磁盘调度，最终返回需要的数据。\n   实际上PageCache是把尽可能多的空闲内存都当做了磁盘缓存来使用。\n   同时如果有其他进程申请内存，回收PageCache的代价又很小，所以现代的OS都支持PageCache。\n * **零拷贝：**linux操作系统 “零拷贝” 机制使用了sendfile方法， 允许操作系统将数据从Page Cache 直接发送到网络，只需要最后一步的copy操作将数据复制到 NIC 缓冲区， 这样避免重新复制数据 。通过这种 “零拷贝” 的机制，Page Cache 结合 sendfile 方法，Kafka消费端的性能也大幅提升。这也是为什么有时候消费端在不断消费数据时，我们并没有看到磁盘io比较高，此刻正是操作系统缓存在提供数据。\n\n * 批量读写、批量压缩\n\n\n# 7 线上规划',normalizedContent:'# 1 通信模型\n\n名称              解释\nbroker          消息中间件处理节点，一个kafka节点就是一个broker，一个或者多个broker可以组成一个kafka集群\ntopic           kafka根据topic对消息进行归类，发布到kafka集群的每条消息都需要指定一个topic\npartition       物理上的概念，一个topic可以分为多个partition，每个partition内部消息是有序的\nconsumer        消息消费者，从broker读取消息的客户端\nconsumergroup   每个consumer属于一个特定的consumer group，一条消息可以被多个不同的consumer\n                group消费，但是一个consumer group中只能有一个consumer能够消费该消息\nproducer        消息生产者，向broker发送消息的客户端\n\n\n# 2 概念\n\n\n# 2.1 topic & partition\n\n * 每个partition，都对应一个commit log文件。\n * 每个partition都有一个唯一编号：offset。\n * 每个consumer都是基于自己在commit log中的offset进行工作的。offset由consumer自己维护。\n\n为什么topic数据要分区存储？\n\n1、分区之后可以将不同的分区放在不同的机器上，相当于对数据做了分布式存储\n\n2、提高并行度\n\n数据存储：server.properties log.dirs=/usr/local/data/kafka-logs\n\nkafka broker 有一个参数，log.segment.bytes，限定了每个日志段文件的大小，最大就是 1gb。\n\n一个日志段文件满了，就自动开一个新的日志段文件来写入，避免单个文件过大，影响文件的读写性能，这个过程叫做 log rolling，正在被写入的那个日志段文件，叫做 active log segment。\n\n\n# 2.2 consumer & consumergroup\n\n * 一个partition同一个时刻在一个consumer group中只能有一个consumer在消费，从而保证消费顺序。\n * consumer group中的consumer的数量不能比一个topic中的partition的数量多，否则多出来的consumer消费不到消息。\n\nkafka只在partition的范围内保证消息消费的局部顺序性，不能在同一个topic中的多个partition中保证总的消费顺序性。\n\n如果有在总体上保证消费顺序的需求，那么我们可以通过将topic的partition数量设置为1，将consumer group中的consumer instance数量也设置为1，但是这样会影响性能，所以kafka的顺序消费很少用。\n\n\n# 2.3 producer\n\n写入方式\n\nproducer 采用 push 模式将消息发布到 broker，每条消息都是被append到patition中，属于顺序写磁盘\n\n消息路由\n\nproducer发送消息到broker时，会根据分区算法选择将其存储到哪一个partition。其路由机制为：\n\n1.指定了patition，则直接使用；\n\n2.未指定patition 但指定key，通过对key的value进行hash选出一个patition。\n\n3.patition和key都未指定，使用轮询选出一个patition。\n\n消息确认机制\n\nacks=0：表示producer不需要等待任何broker确认收到消息的回复，就可以继续发送下一条消息。\n\nacks=1：至少要等待leader已经成功将数据写入本地log，但不需要等待所有follower是否成功写入。\n\nacks=-1或all：leader需要等待所有备份(min.insync.replicas配置的备份个数)都成功写入日志\n\nacks=-1时的数据流程：\n\n1.producer先从zookeeper 的 "/brokers/.../state" 节点找到该partition的leader。\n\n2.producer将消息发送给该leader。\n\n3.leader将消息写入本地log。\n\n4.followers从leader pull消息，写入本地log后向leader发送ack。\n\n5.leader收到所有isr中的replica的ack后，增加hw（high watermark，最后 commit 的 offset）并向producer发送ack。\n\n\n# 3 选举机制\n\ncontroller选举机制\n\nkafka集群启动的时候，会自动选举一台broker作为controller来管理整个集群，选举的过程是集群中每个broker都会尝试在zookeeper上创建一个 /controller 临时节点，zookeeper会保证有且仅有一个broker能创建成功，这个broker就会成为集群的总控器controller。\n\npartition副本选举leader机制\n\ncontroller感知到分区leader所在的broker挂了，会从isr列表里挑第一个broker作为leader\n\n(参数unclean.leader.election.enable=false的前提下。\n\n参数unclean.leader.election.enable为true，则isr列表里所有副本都挂了的时候可以在isr列表外的副本中选leader，\n\n这种设置，可以提高可用性，但是选出的新leader有可能数据少很多。)\n\n副本进入isr列表有两个条件:\n\n1.必须能与zookeeper保持会话以及跟leader副本网络连通\n\n2.副本能复制leader上的所有写操作，并且不能落后太多。(与leader副本同步滞后的副本，是由 replica.lag.time.max.ms配置决定的，超过这个时间都没有跟leader同步过的一次的副本会被移出isr列表)\n\n\n# 4 hw与leo\n\nleo （log end offset）\n\nhw有两个主要的作用：\n\n1、用于实现副本备份机制（replication）；\n\n2、定义消息可见性，即hw之下的所有消息对consumer是可见的。如果没有hw机制，就需要其他手段来实现这两个功能。\n\n\n# 5 kafka核心总控制器controller\n\n在kafka集群中会有一个或者多个broker，其中有一个broker会被选举为控制器(kafka controller)，它负责管理整个集群中所有分区和副本的状态。\n\n主题管理\n\n完成对kafka主题的创建、删除以及分区增加的操作\n\n分区重分配\n\n对已有主题分区进行细粒度的分配功能\n\n集群成员管理\n\n自动检测新增broker、broker主动关闭、broker宕机.\n\n/brokers/ids/下面会存放broker实例的id临时节点，当我们看到/brokers/ids下面有几个节点，就表示有多少个存活的broker实例。\n\n当broker宕机时，临时节点就会被删除，此时控制器对应的监听器就会感知到broker下线，进而完成对应的下线工作。\n\n数据服务\n\n向其它broker提供数据服务，控制器上保存了最全的集群元数据信息,\n\n其它broker会定期接收控制器发来的元数据更新请求，从而更新其内存中的缓存数据\n\n\n# 6 kafka高性能原因\n\n * 磁盘顺序读写：kafka消息不能修改以及不会从文件中间删除保证了磁盘顺序读，kafka的消息写入文件都是追加在文件末尾。\n * **pagecache：**kafka重度依赖底层操作系统提供的磁盘高速缓存pagecache（内核缓冲区）功能。\n   当上层有写操作时，操作系统只是将数据写入pagecache，同时标记page属性为dirty。内存池再异步地写到磁盘上。\n   当读操作发生时，先从pagecache中查找，如果发生缺页才进行磁盘调度，最终返回需要的数据。\n   实际上pagecache是把尽可能多的空闲内存都当做了磁盘缓存来使用。\n   同时如果有其他进程申请内存，回收pagecache的代价又很小，所以现代的os都支持pagecache。\n * **零拷贝：**linux操作系统 “零拷贝” 机制使用了sendfile方法， 允许操作系统将数据从page cache 直接发送到网络，只需要最后一步的copy操作将数据复制到 nic 缓冲区， 这样避免重新复制数据 。通过这种 “零拷贝” 的机制，page cache 结合 sendfile 方法，kafka消费端的性能也大幅提升。这也是为什么有时候消费端在不断消费数据时，我们并没有看到磁盘io比较高，此刻正是操作系统缓存在提供数据。\n\n * 批量读写、批量压缩\n\n\n# 7 线上规划',charsets:{cjk:!0}},{title:"RabbitMQ",frontmatter:{title:"RabbitMQ",date:"2022-05-08T14:09:17.000Z",permalink:"/pages/c1ac33/",categories:["学习笔记","消息中间件"],tags:["消息中间件"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/159.RabbitMQ.html",relativePath:"01.学习笔记/15.消息中间件/159.RabbitMQ.md",key:"v-46e06398",path:"/pages/c1ac33/",headers:[{level:2,title:"1 消息数量限制",slug:"_1-消息数量限制",normalizedTitle:"1 消息数量限制",charIndex:2},{level:2,title:"2 RabbitMQ消息丢失",slug:"_2-rabbitmq消息丢失",normalizedTitle:"2 rabbitmq消息丢失",charIndex:76},{level:3,title:"2.1 生产者丢失消息",slug:"_2-1-生产者丢失消息",normalizedTitle:"2.1 生产者丢失消息",charIndex:129},{level:3,title:"2.2 消息列表丢失消息",slug:"_2-2-消息列表丢失消息",normalizedTitle:"2.2 消息列表丢失消息",charIndex:203},{level:3,title:"2.3 消费者丢失消息",slug:"_2-3-消费者丢失消息",normalizedTitle:"2.3 消费者丢失消息",charIndex:340},{level:2,title:"3 RabbitMQ的消息投递流程是怎样的？",slug:"_3-rabbitmq的消息投递流程是怎样的",normalizedTitle:"3 rabbitmq的消息投递流程是怎样的？",charIndex:462},{level:2,title:"4 生产端怎么保证消息可靠性投递？",slug:"_4-生产端怎么保证消息可靠性投递",normalizedTitle:"4 生产端怎么保证消息可靠性投递？",charIndex:555},{level:2,title:"5 消费者收到消息后有几种确认方式？",slug:"_5-消费者收到消息后有几种确认方式",normalizedTitle:"5 消费者收到消息后有几种确认方式？",charIndex:870},{level:2,title:"6 RabbitMQ消息重复消费",slug:"_6-rabbitmq消息重复消费",normalizedTitle:"6 rabbitmq消息重复消费",charIndex:1108},{level:3,title:"6.1 为什么会重复消费？",slug:"_6-1-为什么会重复消费",normalizedTitle:"6.1 为什么会重复消费？",charIndex:1129},{level:3,title:"6.2 怎么解决消息重复消费问题？",slug:"_6-2-怎么解决消息重复消费问题",normalizedTitle:"6.2 怎么解决消息重复消费问题？",charIndex:1275},{level:2,title:"7 RabbitMQ消息堆积",slug:"_7-rabbitmq消息堆积",normalizedTitle:"7 rabbitmq消息堆积",charIndex:1311},{level:3,title:"7.1 为什么会出现消息堆积？",slug:"_7-1-为什么会出现消息堆积",normalizedTitle:"7.1 为什么会出现消息堆积？",charIndex:1330},{level:3,title:"7.2 怎么解决消息堆积问题？",slug:"_7-2-怎么解决消息堆积问题",normalizedTitle:"7.2 怎么解决消息堆积问题？",charIndex:1389},{level:2,title:"8 什么是AMQP协议？",slug:"_8-什么是amqp协议",normalizedTitle:"8 什么是amqp协议？",charIndex:1548},{level:2,title:"9 消息怎样才会进入死信队列？",slug:"_9-消息怎样才会进入死信队列",normalizedTitle:"9 消息怎样才会进入死信队列？",charIndex:1774},{level:2,title:"10 RabbitMQ延迟队列是怎么实现的？",slug:"_10-rabbitmq延迟队列是怎么实现的",normalizedTitle:"10 rabbitmq延迟队列是怎么实现的？",charIndex:1902},{level:2,title:"11 RabbitMQ有哪些工作模式？",slug:"_11-rabbitmq有哪些工作模式",normalizedTitle:"11 rabbitmq有哪些工作模式？",charIndex:2097},{level:2,title:"12 RabbitMQ怎么保证高可用？",slug:"_12-rabbitmq怎么保证高可用",normalizedTitle:"12 rabbitmq怎么保证高可用？",charIndex:2201},{level:2,title:"13 RabbitMQ怎么保证消息消费的顺序性？",slug:"_13-rabbitmq怎么保证消息消费的顺序性",normalizedTitle:"13 rabbitmq怎么保证消息消费的顺序性？",charIndex:2579}],excerpt:'<h2 id="_1-消息数量限制"><a class="header-anchor" href="#_1-消息数量限制">#</a> 1 消息数量限制</h2>\n<p><strong>RabbitMQ上一个queue中存放的message是否有数量限制？</strong></p>\n<p>可以认为是无限制的，因为限制取决于机器内存。</p>\n<h2 id="_2-rabbitmq消息丢失"><a class="header-anchor" href="#_2-rabbitmq消息丢失">#</a> 2 RabbitMQ消息丢失</h2>\n<p><strong>丢失数据分为：生产者丢失消息、消息列表丢失消息、消费者丢失消息。</strong></p>\n<h3 id="_2-1-生产者丢失消息"><a class="header-anchor" href="#_2-1-生产者丢失消息">#</a> 2.1 生产者丢失消息</h3>\n<p>生产者丢失消息可以通过ACK方式处理，消息投递到所有匹配的队列之后，rabbitMQ就会发送一个ACK给生产者。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 消息数量限制 2 RabbitMQ消息丢失 2.1 生产者丢失消息 2.2 消息列表丢失消息 2.3 消费者丢失消息 3 RabbitMQ的消息投递流程是怎样的？ 4 生产端怎么保证消息可靠性投递？ 5 消费者收到消息后有几种确认方式？ 6 RabbitMQ消息重复消费 6.1 为什么会重复消费？ 6.2 怎么解决消息重复消费问题？ 7 RabbitMQ消息堆积 7.1 为什么会出现消息堆积？ 7.2 怎么解决消息堆积问题？ 8 什么是AMQP协议？ 9 消息怎样才会进入死信队列？ 10 RabbitMQ延迟队列是怎么实现的？ 11 RabbitMQ有哪些工作模式？ 12 RabbitMQ怎么保证高可用？ 13 RabbitMQ怎么保证消息消费的顺序性？",content:'# 1 消息数量限制\n\nRabbitMQ上一个queue中存放的message是否有数量限制？\n\n可以认为是无限制的，因为限制取决于机器内存。\n\n\n# 2 RabbitMQ消息丢失\n\n丢失数据分为：生产者丢失消息、消息列表丢失消息、消费者丢失消息。\n\n\n# 2.1 生产者丢失消息\n\n生产者丢失消息可以通过ACK方式处理，消息投递到所有匹配的队列之后，rabbitMQ就会发送一个ACK给生产者。\n\n\n# 2.2 消息列表丢失消息\n\n消息列表丢失可以开启持久化磁盘的配置，在消息持久化到磁盘后再给生产者发送ACK信号。\n\n操作步骤：\n\n * 将queue的持久化标识durable设置为true，则代表是一个持久的队列\n * 发送消息的时候将deliveryMode=2\n\n\n# 2.3 消费者丢失消息\n\n消费者丢失消息一般是因为采用了自动确认消息模式，消费者在收到消息之后，处理消息之前会自动回复RabbitMQ已收到消息，如果这时处理消息失败，就会丢失消息。解决方案：\n\n * 处理消息成功后，手动回复确认消息\n\n\n# 3 RabbitMQ的消息投递流程是怎样的？\n\nProducer --\x3e RabbitMQ Broker --\x3e Exchange --\x3e Queue --\x3e Consumer\n\n\n# 4 生产端怎么保证消息可靠性投递？\n\n消息从producer到exchange会返回一个confirmCallback。\n\n消息从exchange到queue投递失败会返回一个returnCallback。\n\n利用这两个callback可以控制消息的可靠性投递。\n\n * ConfirmCallback\n\n设置publisher-confirm="true"开启确认模式。\n\n在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败。\n\n * ReturnCallback\n\n设置publisher-returns="true"开启退回模式。\n\n消息从exchange路由到queue失败后触发回调。\n\n\n# 5 消费者收到消息后有几种确认方式？\n\n有三种确认方式：\n\n * 自动确认：acknowledge="none" （自动ack）\n * 手动确认：acknowledge="manual" （手动ack）\n * 根据异常情况确认：acknowledge="auto",(这种方式使用麻烦，一般不用)\n\n自动确认：消费者丢失消息一般是因为采用了自动确认消息模式，消费者在收到消息之后，处理消息之前会自动回复RabbitMQ已收到消息，如果这时处理消息失败，就会丢失消息。\n\n\n# 6 RabbitMQ消息重复消费\n\n\n# 6.1 为什么会重复消费？\n\n正常情况，消费者在消费消息的时候，消费完毕会发送一个确认消息给消息队列，消息队列就知道该消息被消费了，就会将该消息从消息队列中删除。\n\n但是因为网络传输等故障，确认消息没有传送到消息队列，导致消息队列不知道已经消费过该消息，再次将消息分发给其他消费者。\n\n\n# 6.2 怎么解决消息重复消费问题？\n\n解决思路：保证消息幂等性\n\n\n# 7 RabbitMQ消息堆积\n\n\n# 7.1 为什么会出现消息堆积？\n\n1.业务高峰期，请求量暴涨。\n\n2.代码异常没有ack，或者全进入到私信。\n\n\n# 7.2 怎么解决消息堆积问题？\n\n1.通过适度调高并发参数，提高服务消费能力。一般调整预取值prefetch和并发线程数concurrentcy。\n\n2.增加消费节点，在数据库等扛得住的情况下，增加消费服务是一个优先选项。\n\n3.异常导致的消息堆积，先紧急回滚代码，或紧急修复异常，然后按前两步提高消费能力。\n\n\n# 8 什么是AMQP协议？\n\nAdvanced Message Queuing Protocol，高级消息队列协议。是一个进程间传递异步消息的网络协议。\n\n工作过程：\n\n发布者（Publisher）发布消息（Message），经由交换机（Exchange）。\n\n交换机根据路由规则将收到的消息分别发给与该交换机绑定的队列（Queue）。\n\n最后 AMQP 代理会将消息投递给订阅了此队列的消费者（Consumer），或者消费者按照需求自行获取。\n\n\n# 9 消息怎样才会进入死信队列？\n\n1）队列消息长度到达限制。\n\n2）消费者拒接消费消息，basicNack/basicReject，并且不把消息放入原目标队列，requeue=false。\n\n3）原队列存在消息过期设置，消息到达超时时间未被消费。\n\n\n# 10 RabbitMQ延迟队列是怎么实现的？\n\n使用TTL+死信队列组合实现延迟队列效果。\n\nTTL（time to live）消息存活时间：\n\n如果消息在存活时间内未被消费，则会被清除。\n\nRabbitMQ支持两种ttl设置：单独消息配置ttl；整个队列配置ttl（居多）\n\n需求：\n\n1.下单后，30分钟未支付，取消订单，回滚库存。\n\n2.新用户注册成功7天后，发送短信问候。\n\n\n# 11 RabbitMQ有哪些工作模式？\n\n简单模式\n\nwork queue\n\npublish/subscribe发布订阅模式\n\nrouting路由模式\n\ntopics 主题模式\n\nrpc远程调用模式\n\n\n# 12 RabbitMQ怎么保证高可用？\n\n镜像集群模式\n\n1.生产者向任一服务节点注册队列，该队列相关信息会同步到其他节点上。。\n\n2.任一消费者向任一节点请求消费，可以直接获取到消费的消息，因为每个节点上都有相同的实际数据。\n\n3.任一节点宕机，不影响消息在其他节点上进行消费。\n\n缺点\n\n1.性能开销非常大，因为要同步消息到对应的节点，这个会造成网络之间的数据量的频繁交互，对于网络带宽的消耗和压力都是比较重的。\n\n2.没有扩展可言，rabbitMQ是集群，不是分布式的，所以当某个Queue负载过重，我们并不能通过新增节点来缓解压力，因为所以节点上的数据都是相同的，这样就没办法进行扩展了。\n\n对于镜像集群而言，当某个queue负载过重，可能会导致集群雪崩，那么如何来减少集群雪崩呢？我们可以通过HA的同步策略来实现\n\nHA的同步策略如下：\n\n\n# 13 RabbitMQ怎么保证消息消费的顺序性？\n\n1.RabbitMQ的queue本身就是队列，是可以保证消息的顺序投递的。\n\n2.但是顺序消费就是另一回事了，要保证顺序消费可以通过以下做法：\n\n1）投递消息的时候加上时间戳，消费端通过时间戳判断先后顺序。\n\n2）同一字段的更新，设定只有一个消费者，但是这样效率低。',normalizedContent:'# 1 消息数量限制\n\nrabbitmq上一个queue中存放的message是否有数量限制？\n\n可以认为是无限制的，因为限制取决于机器内存。\n\n\n# 2 rabbitmq消息丢失\n\n丢失数据分为：生产者丢失消息、消息列表丢失消息、消费者丢失消息。\n\n\n# 2.1 生产者丢失消息\n\n生产者丢失消息可以通过ack方式处理，消息投递到所有匹配的队列之后，rabbitmq就会发送一个ack给生产者。\n\n\n# 2.2 消息列表丢失消息\n\n消息列表丢失可以开启持久化磁盘的配置，在消息持久化到磁盘后再给生产者发送ack信号。\n\n操作步骤：\n\n * 将queue的持久化标识durable设置为true，则代表是一个持久的队列\n * 发送消息的时候将deliverymode=2\n\n\n# 2.3 消费者丢失消息\n\n消费者丢失消息一般是因为采用了自动确认消息模式，消费者在收到消息之后，处理消息之前会自动回复rabbitmq已收到消息，如果这时处理消息失败，就会丢失消息。解决方案：\n\n * 处理消息成功后，手动回复确认消息\n\n\n# 3 rabbitmq的消息投递流程是怎样的？\n\nproducer --\x3e rabbitmq broker --\x3e exchange --\x3e queue --\x3e consumer\n\n\n# 4 生产端怎么保证消息可靠性投递？\n\n消息从producer到exchange会返回一个confirmcallback。\n\n消息从exchange到queue投递失败会返回一个returncallback。\n\n利用这两个callback可以控制消息的可靠性投递。\n\n * confirmcallback\n\n设置publisher-confirm="true"开启确认模式。\n\n在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败。\n\n * returncallback\n\n设置publisher-returns="true"开启退回模式。\n\n消息从exchange路由到queue失败后触发回调。\n\n\n# 5 消费者收到消息后有几种确认方式？\n\n有三种确认方式：\n\n * 自动确认：acknowledge="none" （自动ack）\n * 手动确认：acknowledge="manual" （手动ack）\n * 根据异常情况确认：acknowledge="auto",(这种方式使用麻烦，一般不用)\n\n自动确认：消费者丢失消息一般是因为采用了自动确认消息模式，消费者在收到消息之后，处理消息之前会自动回复rabbitmq已收到消息，如果这时处理消息失败，就会丢失消息。\n\n\n# 6 rabbitmq消息重复消费\n\n\n# 6.1 为什么会重复消费？\n\n正常情况，消费者在消费消息的时候，消费完毕会发送一个确认消息给消息队列，消息队列就知道该消息被消费了，就会将该消息从消息队列中删除。\n\n但是因为网络传输等故障，确认消息没有传送到消息队列，导致消息队列不知道已经消费过该消息，再次将消息分发给其他消费者。\n\n\n# 6.2 怎么解决消息重复消费问题？\n\n解决思路：保证消息幂等性\n\n\n# 7 rabbitmq消息堆积\n\n\n# 7.1 为什么会出现消息堆积？\n\n1.业务高峰期，请求量暴涨。\n\n2.代码异常没有ack，或者全进入到私信。\n\n\n# 7.2 怎么解决消息堆积问题？\n\n1.通过适度调高并发参数，提高服务消费能力。一般调整预取值prefetch和并发线程数concurrentcy。\n\n2.增加消费节点，在数据库等扛得住的情况下，增加消费服务是一个优先选项。\n\n3.异常导致的消息堆积，先紧急回滚代码，或紧急修复异常，然后按前两步提高消费能力。\n\n\n# 8 什么是amqp协议？\n\nadvanced message queuing protocol，高级消息队列协议。是一个进程间传递异步消息的网络协议。\n\n工作过程：\n\n发布者（publisher）发布消息（message），经由交换机（exchange）。\n\n交换机根据路由规则将收到的消息分别发给与该交换机绑定的队列（queue）。\n\n最后 amqp 代理会将消息投递给订阅了此队列的消费者（consumer），或者消费者按照需求自行获取。\n\n\n# 9 消息怎样才会进入死信队列？\n\n1）队列消息长度到达限制。\n\n2）消费者拒接消费消息，basicnack/basicreject，并且不把消息放入原目标队列，requeue=false。\n\n3）原队列存在消息过期设置，消息到达超时时间未被消费。\n\n\n# 10 rabbitmq延迟队列是怎么实现的？\n\n使用ttl+死信队列组合实现延迟队列效果。\n\nttl（time to live）消息存活时间：\n\n如果消息在存活时间内未被消费，则会被清除。\n\nrabbitmq支持两种ttl设置：单独消息配置ttl；整个队列配置ttl（居多）\n\n需求：\n\n1.下单后，30分钟未支付，取消订单，回滚库存。\n\n2.新用户注册成功7天后，发送短信问候。\n\n\n# 11 rabbitmq有哪些工作模式？\n\n简单模式\n\nwork queue\n\npublish/subscribe发布订阅模式\n\nrouting路由模式\n\ntopics 主题模式\n\nrpc远程调用模式\n\n\n# 12 rabbitmq怎么保证高可用？\n\n镜像集群模式\n\n1.生产者向任一服务节点注册队列，该队列相关信息会同步到其他节点上。。\n\n2.任一消费者向任一节点请求消费，可以直接获取到消费的消息，因为每个节点上都有相同的实际数据。\n\n3.任一节点宕机，不影响消息在其他节点上进行消费。\n\n缺点\n\n1.性能开销非常大，因为要同步消息到对应的节点，这个会造成网络之间的数据量的频繁交互，对于网络带宽的消耗和压力都是比较重的。\n\n2.没有扩展可言，rabbitmq是集群，不是分布式的，所以当某个queue负载过重，我们并不能通过新增节点来缓解压力，因为所以节点上的数据都是相同的，这样就没办法进行扩展了。\n\n对于镜像集群而言，当某个queue负载过重，可能会导致集群雪崩，那么如何来减少集群雪崩呢？我们可以通过ha的同步策略来实现\n\nha的同步策略如下：\n\n\n# 13 rabbitmq怎么保证消息消费的顺序性？\n\n1.rabbitmq的queue本身就是队列，是可以保证消息的顺序投递的。\n\n2.但是顺序消费就是另一回事了，要保证顺序消费可以通过以下做法：\n\n1）投递消息的时候加上时间戳，消费端通过时间戳判断先后顺序。\n\n2）同一字段的更新，设定只有一个消费者，但是这样效率低。',charsets:{cjk:!0}},{title:"数据库设计三大范式",frontmatter:{title:"数据库设计三大范式",date:"2022-05-07T14:58:14.000Z",permalink:"/pages/b7bb53/",categories:["学习笔记","持久化"],tags:["数据库"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/203.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F.html",relativePath:"01.学习笔记/20.持久化/203.数据库设计三大范式.md",key:"v-1c172bbb",path:"/pages/b7bb53/",headers:[{level:2,title:"第一范式",slug:"第一范式",normalizedTitle:"第一范式",charIndex:2},{level:2,title:"第二范式",slug:"第二范式",normalizedTitle:"第二范式",charIndex:144},{level:2,title:"第三范式",slug:"第三范式",normalizedTitle:"第三范式",charIndex:264}],excerpt:'<h2 id="第一范式"><a class="header-anchor" href="#第一范式">#</a> 第一范式</h2>\n<p>1、每一列属性都是不可再分的属性值，确保每一列的原子性 （如：地址字段包含了省市区，不符合原子性，应才开）</p>\n<p>2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。（如：字段中有室号、物品1、数量1、物品2、数量2，应合并成室号、物品、数量）</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"第一范式 第二范式 第三范式",content:"# 第一范式\n\n1、每一列属性都是不可再分的属性值，确保每一列的原子性 （如：地址字段包含了省市区，不符合原子性，应才开）\n\n2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。（如：字段中有室号、物品1、数量1、物品2、数量2，应合并成室号、物品、数量）\n\n\n# 第二范式\n\n每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。\n\n如：一个人同时订几个房间，就会出来一个订单号多条数据，这样子联系人都是重复的，就会造成数据冗余。我们应该把他拆开来。\n\n\n# 第三范式\n\n数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系。像：a--\x3eb--\x3ec 属性之间含有这样的关系，是不符合第三范式的。\n\n如：学号--\x3e 所在院校 --\x3e (院校地址，院校电话) 应拆开为（学号，姓名，年龄，性别，所在院校）--（所在院校，院校地址，院校电话）",normalizedContent:"# 第一范式\n\n1、每一列属性都是不可再分的属性值，确保每一列的原子性 （如：地址字段包含了省市区，不符合原子性，应才开）\n\n2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。（如：字段中有室号、物品1、数量1、物品2、数量2，应合并成室号、物品、数量）\n\n\n# 第二范式\n\n每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。\n\n如：一个人同时订几个房间，就会出来一个订单号多条数据，这样子联系人都是重复的，就会造成数据冗余。我们应该把他拆开来。\n\n\n# 第三范式\n\n数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系。像：a--\x3eb--\x3ec 属性之间含有这样的关系，是不符合第三范式的。\n\n如：学号--\x3e 所在院校 --\x3e (院校地址，院校电话) 应拆开为（学号，姓名，年龄，性别，所在院校）--（所在院校，院校地址，院校电话）",charsets:{cjk:!0}},{title:"执行计划Explain",frontmatter:{title:"执行计划Explain",date:"2022-05-07T15:01:42.000Z",permalink:"/pages/a37446/",categories:["学习笔记","持久化"],tags:["数据库"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/206.%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92Explain.html",relativePath:"01.学习笔记/20.持久化/206.执行计划Explain.md",key:"v-7e44e81b",path:"/pages/a37446/",headers:[{level:2,title:"1 type列",slug:"_1-type列",normalizedTitle:"1 type列",charIndex:2},{level:2,title:"2 possible_keys列",slug:"_2-possible-keys列",normalizedTitle:"2 possible_keys列",charIndex:710},{level:2,title:"3 key列",slug:"_3-key列",normalizedTitle:"3 key列",charIndex:843},{level:2,title:"4 key_len列",slug:"_4-key-len列",normalizedTitle:"4 key_len列",charIndex:881},{level:2,title:"5 rows列",slug:"_5-rows列",normalizedTitle:"5 rows列",charIndex:965}],excerpt:'<img src="/img/media/1b8e67882aeee58008cdfbb6937fb3fc.png" class="imgcss" width="70%">\n<h2 id="_1-type列"><a class="header-anchor" href="#_1-type列">#</a> 1 type列</h2>\n<p>表示关联类型或访问类型，即MySQL决定如何查找表中的行</p>\n<p><strong>依次从最优到最差分别为 : system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p>\n<p>一般来说，得保证查询达到range级别，最好达到ref</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 type列 2 possible_keys列 3 key列 4 key_len列 5 rows列",content:"# 1 type列\n\n表示关联类型或访问类型，即MySQL决定如何查找表中的行\n\n依次从最优到最差分别为 : system > const > eq_ref > ref > range > index > ALL\n\n一般来说，得保证查询达到range级别，最好达到ref\n\nsystem：表中只有一条数据，这个类型是特殊的const类型\n\nconst：针对主键或唯一索引的等值查询扫描，最多只返回一行数据，const查询速度非常快，因为它仅仅读取一次即可。\n\neq_ref：此类型通常出现在多表的join查询，表示对于前表的每个结果，都只匹配到后表的一行结果，并且查询的比较操作通常是=，查询效率高。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。什么情况下结果集只有一个呢！那便是使用了主键或者唯一性索引进行查找的情况\n\nref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。\n\nrange：范围扫描通常出现在 in(), between ,> ,<, >= 等操作中。使用一个索引来检索给定范围的行。\n\nindex：表示全索引扫描（full index scan），和ALL类型类似，只不过ALL类型是全表扫描，而index类型则仅仅扫描所有的索引，而不扫描数据。通常比ALL快一些。\n\nall：表示全表扫描，这个类型的查询是性能最差的查询之一，通常来说，我们的查询不应该出现ALL类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难，一般可以用索引来避免\n\n\n# 2 possible_keys列\n\npossible_keys表示mysql在查询时，能够使用到的索引，注意，即使有些索引在possible_keys中出现，但是不表示此索引会真正被Mysql使用到，Mysql在查询时具体使用了哪些索引，由key字段决定。\n\n\n# 3 key列\n\n此字段是mysql在当前查询时所真正使用到的索引。\n\n\n# 4 key_len列\n\n表示查询优化器使用了索引的字节数，这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到。根据数据类型所占字节数计算出来。\n\n\n# 5 rows列\n\nrows也是一个重要的字段，mysql查询优化器根据统计信息，估算SQL要查找到结果集需要扫描读取的数据行数。这个值非常直观显示SQL的效率好坏，原则上rows越少越好。",normalizedContent:"# 1 type列\n\n表示关联类型或访问类型，即mysql决定如何查找表中的行\n\n依次从最优到最差分别为 : system > const > eq_ref > ref > range > index > all\n\n一般来说，得保证查询达到range级别，最好达到ref\n\nsystem：表中只有一条数据，这个类型是特殊的const类型\n\nconst：针对主键或唯一索引的等值查询扫描，最多只返回一行数据，const查询速度非常快，因为它仅仅读取一次即可。\n\neq_ref：此类型通常出现在多表的join查询，表示对于前表的每个结果，都只匹配到后表的一行结果，并且查询的比较操作通常是=，查询效率高。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。什么情况下结果集只有一个呢！那便是使用了主键或者唯一性索引进行查找的情况\n\nref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。\n\nrange：范围扫描通常出现在 in(), between ,> ,<, >= 等操作中。使用一个索引来检索给定范围的行。\n\nindex：表示全索引扫描（full index scan），和all类型类似，只不过all类型是全表扫描，而index类型则仅仅扫描所有的索引，而不扫描数据。通常比all快一些。\n\nall：表示全表扫描，这个类型的查询是性能最差的查询之一，通常来说，我们的查询不应该出现all类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难，一般可以用索引来避免\n\n\n# 2 possible_keys列\n\npossible_keys表示mysql在查询时，能够使用到的索引，注意，即使有些索引在possible_keys中出现，但是不表示此索引会真正被mysql使用到，mysql在查询时具体使用了哪些索引，由key字段决定。\n\n\n# 3 key列\n\n此字段是mysql在当前查询时所真正使用到的索引。\n\n\n# 4 key_len列\n\n表示查询优化器使用了索引的字节数，这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到。根据数据类型所占字节数计算出来。\n\n\n# 5 rows列\n\nrows也是一个重要的字段，mysql查询优化器根据统计信息，估算sql要查找到结果集需要扫描读取的数据行数。这个值非常直观显示sql的效率好坏，原则上rows越少越好。",charsets:{cjk:!0}},{title:"索引",frontmatter:{title:"索引",date:"2022-05-07T15:04:08.000Z",permalink:"/pages/391bcd/",categories:["学习笔记","持久化"],tags:["数据库"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/209.%E7%B4%A2%E5%BC%95.html",relativePath:"01.学习笔记/20.持久化/209.索引.md",key:"v-b1f1e048",path:"/pages/391bcd/",headers:[{level:2,title:"1 使用索引注意事项",slug:"_1-使用索引注意事项",normalizedTitle:"1 使用索引注意事项",charIndex:2},{level:2,title:"2 调优",slug:"_2-调优",normalizedTitle:"2 调优",charIndex:332},{level:2,title:"3 InnoDB和MyISam",slug:"_3-innodb和myisam",normalizedTitle:"3 innodb和myisam",charIndex:1063},{level:3,title:"3.1 InnoDB和MyISam的数据结构？",slug:"_3-1-innodb和myisam的数据结构",normalizedTitle:"3.1 innodb和myisam的数据结构？",charIndex:1083},{level:3,title:"3.2 mysql推荐用自增主键原因？",slug:"_3-2-mysql推荐用自增主键原因",normalizedTitle:"3.2 mysql推荐用自增主键原因？",charIndex:1422},{level:3,title:"3.3 什么是覆盖索引？",slug:"_3-3-什么是覆盖索引",normalizedTitle:"3.3 什么是覆盖索引？",charIndex:1553},{level:3,title:"3.4 怎么添加索引？",slug:"_3-4-怎么添加索引",normalizedTitle:"3.4 怎么添加索引？",charIndex:1960}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 使用索引注意事项 2 调优 3 InnoDB和MyISam 3.1 InnoDB和MyISam的数据结构？ 3.2 mysql推荐用自增主键原因？ 3.3 什么是覆盖索引？ 3.4 怎么添加索引？",content:"# 1 使用索引注意事项\n\n1.在经常需要搜索的列上创建索引，加快搜索速度。\n\n2.在where子句中的列上面创建索引，加快条件判断速度。\n\n3.在经常需要排序的列上创建索引，加快排序查询时间。\n\n4.在经常用在连接的列上（主要是一些外键）创建索引，加快连接速度。\n\n5.中到大型表索引都是非常有效的，但是特大型表的话维护开销会很大，不适合建索引。\n\n6.避免where子句中对字段施加函数，这会造成无法命中索引。\n\n7.使用innoDB时用与业务无关的自增主键，即使用逻辑主键而不要用业务主键。\n\n8.打算加索引的列设置为not null，否则将导致引擎放弃使用索引而进行全表扫描。\n\n9.删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。\n\n\n# 2 调优\n\n1.分库分表，读写分离\n2.拆sql\n3.建索引\n4.sql优化\n1）like，尽量不在关键词前加%\n2）尽量多表连接查询，避免子查询\n3）合理的增加冗余的字段\n4）减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代\n\nmysql中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。\n\n一直以来大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的：\n\n如果查询的两个表大小相当，那么用in和exists差别不大。\n\n如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。\n5）or 的查询尽量用 union或者union all 代替（虽然这两个方式都用到了索引，但 UNION 是用一个明确的值到索引中查找，目标非常明确，OR 需要对比两个值，目标相对要模糊一些，所以 OR 在恍惚中落后了）\n\n当MySQL单表记录数过大时，数据库的CRUD性能会明显下 降，一些常见的优化措施如下:\n\n1. 限定数据的范围: 务必禁止不带任何限制数据范围条件的查询语句。比如:我们当用户在查询订单历史的时 候，我们可以控制在一个月的范围内。;\n\n2. 读/写分离: 经典的数据库拆分方案，主库负责写，从库负责读;\n\n3. 垂直分区: 根据数据库里面数据表的相关性进行拆分。 把一张列比较多的表拆分为多张表。 如下图所示，这样来说大家应该就更容易理解了。\n\n4. 水平分区: 水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。\n\n\n# 3 InnoDB和MyISam\n\n\n# 3.1 InnoDB和MyISam的数据结构？\n\nInnoDB和MyIsam是B+树索引\n\n要加快索引 的查找速度则需要降低树的高度，要降低树的高度可通过增加树节点中数据的个数（度）实现。因为节点的数据是从磁盘加载的，磁盘加载数据的速度相对内存来说是很慢的，所以节点中数据不是越多越好，因为太多的话可能要多次 IO才能加载完，这样效率就会变低，所以B+树节点存储的数据大小尽量保证与一次IO读取数据大小一致，由于一次IO读取的数据较大（16K?）,所以树的高度不高，即查找的次数很少就能找到目标数据。\n1）MyISam非聚集索引 B+树结构 数据与索引分开存储，指向数据的地址存储在节点中\n2）InnoDB聚集索引 B+树结构 数据与索引存储在一起，数据存储在叶子节点\n\n\n# 3.2 mysql推荐用自增主键原因？\n\n1）占用空间小，一次IO加载的数据多。\n2）数字比较比字符串比较消耗小。\n3）新增数据时自增主键都是顺序插入到B+树结构，而uuid之类的字符串主键计算后可能是插入到B+树中间的节点，这样会导致更多的计算消耗。\n\n\n# 3.3 什么是覆盖索引？\n\n如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。InnoDB引擎中，如果不是主键索引，叶子节点存储的是主键+列值，最终还是要“回表”，也就是通过主键再查找一次。这样比较慢。覆盖索引就是要查询出的列和索引是对应的，不做回表操作。\n\n例子：\n\nALTER TABLE `test_table` ADD INDEX `idx_col1_col2_col3`(`col1`，`col2`，`col3`)\n\n分析查询：\n\nEXPLAIN SELECT SQL_NO_CACHE col2, col3 FROM test_table WHERE col1 = xxx ORDER BY col2;\n\n结果：建立联合索引后，type 为 ref，使用了 idx_col1_col2_col3 索引，Extra 为 Using index，说明使用了覆盖索引。\n\n\n# 3.4 怎么添加索引？\n\n1.添加PRIMARY KEY(主键索引)\n\nALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )\n\n2.添加UNIQUE(唯一索引)\n\nALTER TABLE `table_name` ADD UNIQUE ( `column` )\n\n3.添加INDEX(普通索引)\n\nALTER TABLE `table_name` ADD INDEX index_name ( `column` )\n\n4.添加多列索引\n\nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )",normalizedContent:"# 1 使用索引注意事项\n\n1.在经常需要搜索的列上创建索引，加快搜索速度。\n\n2.在where子句中的列上面创建索引，加快条件判断速度。\n\n3.在经常需要排序的列上创建索引，加快排序查询时间。\n\n4.在经常用在连接的列上（主要是一些外键）创建索引，加快连接速度。\n\n5.中到大型表索引都是非常有效的，但是特大型表的话维护开销会很大，不适合建索引。\n\n6.避免where子句中对字段施加函数，这会造成无法命中索引。\n\n7.使用innodb时用与业务无关的自增主键，即使用逻辑主键而不要用业务主键。\n\n8.打算加索引的列设置为not null，否则将导致引擎放弃使用索引而进行全表扫描。\n\n9.删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。\n\n\n# 2 调优\n\n1.分库分表，读写分离\n2.拆sql\n3.建索引\n4.sql优化\n1）like，尽量不在关键词前加%\n2）尽量多表连接查询，避免子查询\n3）合理的增加冗余的字段\n4）减少使用in或者not in ,使用exists，not exists或者关联查询语句替代\n\nmysql中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。\n\n一直以来大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的：\n\n如果查询的两个表大小相当，那么用in和exists差别不大。\n\n如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。\n5）or 的查询尽量用 union或者union all 代替（虽然这两个方式都用到了索引，但 union 是用一个明确的值到索引中查找，目标非常明确，or 需要对比两个值，目标相对要模糊一些，所以 or 在恍惚中落后了）\n\n当mysql单表记录数过大时，数据库的crud性能会明显下 降，一些常见的优化措施如下:\n\n1. 限定数据的范围: 务必禁止不带任何限制数据范围条件的查询语句。比如:我们当用户在查询订单历史的时 候，我们可以控制在一个月的范围内。;\n\n2. 读/写分离: 经典的数据库拆分方案，主库负责写，从库负责读;\n\n3. 垂直分区: 根据数据库里面数据表的相关性进行拆分。 把一张列比较多的表拆分为多张表。 如下图所示，这样来说大家应该就更容易理解了。\n\n4. 水平分区: 水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。\n\n\n# 3 innodb和myisam\n\n\n# 3.1 innodb和myisam的数据结构？\n\ninnodb和myisam是b+树索引\n\n要加快索引 的查找速度则需要降低树的高度，要降低树的高度可通过增加树节点中数据的个数（度）实现。因为节点的数据是从磁盘加载的，磁盘加载数据的速度相对内存来说是很慢的，所以节点中数据不是越多越好，因为太多的话可能要多次 io才能加载完，这样效率就会变低，所以b+树节点存储的数据大小尽量保证与一次io读取数据大小一致，由于一次io读取的数据较大（16k?）,所以树的高度不高，即查找的次数很少就能找到目标数据。\n1）myisam非聚集索引 b+树结构 数据与索引分开存储，指向数据的地址存储在节点中\n2）innodb聚集索引 b+树结构 数据与索引存储在一起，数据存储在叶子节点\n\n\n# 3.2 mysql推荐用自增主键原因？\n\n1）占用空间小，一次io加载的数据多。\n2）数字比较比字符串比较消耗小。\n3）新增数据时自增主键都是顺序插入到b+树结构，而uuid之类的字符串主键计算后可能是插入到b+树中间的节点，这样会导致更多的计算消耗。\n\n\n# 3.3 什么是覆盖索引？\n\n如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。innodb引擎中，如果不是主键索引，叶子节点存储的是主键+列值，最终还是要“回表”，也就是通过主键再查找一次。这样比较慢。覆盖索引就是要查询出的列和索引是对应的，不做回表操作。\n\n例子：\n\nalter table `test_table` add index `idx_col1_col2_col3`(`col1`，`col2`，`col3`)\n\n分析查询：\n\nexplain select sql_no_cache col2, col3 from test_table where col1 = xxx order by col2;\n\n结果：建立联合索引后，type 为 ref，使用了 idx_col1_col2_col3 索引，extra 为 using index，说明使用了覆盖索引。\n\n\n# 3.4 怎么添加索引？\n\n1.添加primary key(主键索引)\n\nalter table `table_name` add primary key ( `column` )\n\n2.添加unique(唯一索引)\n\nalter table `table_name` add unique ( `column` )\n\n3.添加index(普通索引)\n\nalter table `table_name` add index index_name ( `column` )\n\n4.添加多列索引\n\nalter table `table_name` add index index_name ( `column1`, `column2`, `column3` )",charsets:{cjk:!0}},{title:"事务",frontmatter:{title:"事务",date:"2022-05-07T15:09:03.000Z",permalink:"/pages/904632/",categories:["学习笔记","持久化"],tags:["数据库"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/212.%E4%BA%8B%E5%8A%A1.html",relativePath:"01.学习笔记/20.持久化/212.事务.md",key:"v-6488d07c",path:"/pages/904632/",headers:[{level:2,title:"1 什么是事务？",slug:"_1-什么是事务",normalizedTitle:"1 什么是事务？",charIndex:2},{level:2,title:"2 事务有哪些特性？",slug:"_2-事务有哪些特性",normalizedTitle:"2 事务有哪些特性？",charIndex:56},{level:2,title:"3 innodb怎么实现事务",slug:"_3-innodb怎么实现事务",normalizedTitle:"3 innodb怎么实现事务",charIndex:294},{level:2,title:"4 并发事务带来的问题",slug:"_4-并发事务带来的问题",normalizedTitle:"4 并发事务带来的问题",charIndex:366},{level:3,title:"4.1 脏读（Dirty read）",slug:"_4-1-脏读-dirty-read",normalizedTitle:"4.1 脏读（dirty read）",charIndex:382},{level:3,title:"4.2 不可重复读（Nonrepeatable read）",slug:"_4-2-不可重复读-nonrepeatable-read",normalizedTitle:"4.2 不可重复读（nonrepeatable read）",charIndex:470},{level:3,title:"4.3 幻影读（Phantom reads）",slug:"_4-3-幻影读-phantom-reads",normalizedTitle:"4.3 幻影读（phantom reads）",charIndex:572},{level:3,title:"4.4 不可重复度和幻读区别",slug:"_4-4-不可重复度和幻读区别",normalizedTitle:"4.4 不可重复度和幻读区别",charIndex:691},{level:2,title:"5 事务隔离级别",slug:"_5-事务隔离级别",normalizedTitle:"5 事务隔离级别",charIndex:738},{level:3,title:"5.1 READ-UNCOMMITTED(读取未提交)",slug:"_5-1-read-uncommitted-读取未提交",normalizedTitle:"5.1 read-uncommitted(读取未提交)",charIndex:751},{level:3,title:"5.2 READ-COMMITTED(读取已提交)",slug:"_5-2-read-committed-读取已提交",normalizedTitle:"5.2 read-committed(读取已提交)",charIndex:823},{level:3,title:"5.3 REPEATABLE-READ(可重复读)",slug:"_5-3-repeatable-read-可重复读",normalizedTitle:"5.3 repeatable-read(可重复读)",charIndex:894},{level:3,title:"5.4 SERIALIZABLE(串行化)",slug:"_5-4-serializable-串行化",normalizedTitle:"5.4 serializable(串行化)",charIndex:983},{level:3,title:"5.5 数据库默认隔离级别",slug:"_5-5-数据库默认隔离级别",normalizedTitle:"5.5 数据库默认隔离级别",charIndex:1087},{level:2,title:"6 Spring 事务中的隔离级别",slug:"_6-spring-事务中的隔离级别",normalizedTitle:"6 spring 事务中的隔离级别",charIndex:1188},{level:3,title:"6.1 ISOLATION_DEFAULT",slug:"_6-1-isolation-default",normalizedTitle:"6.1 isolation_default",charIndex:1486},{level:3,title:"6.2 ISOLATIONREADUNCOMMITTED",slug:"_6-2-isolation-read-uncommitted",normalizedTitle:"6.2 isolationreaduncommitted",charIndex:null},{level:3,title:"6.3 ISOLATIONREADCOMMITTED",slug:"_6-3-isolation-read-committed",normalizedTitle:"6.3 isolationreadcommitted",charIndex:null},{level:3,title:"6.4 ISOLATIONREPEATABLEREAD",slug:"_6-4-isolation-repeatable-read",normalizedTitle:"6.4 isolationrepeatableread",charIndex:null},{level:3,title:"6.5 ISOLATION_SERIALIZABLE",slug:"_6-5-isolation-serializable",normalizedTitle:"6.5 isolation_serializable",charIndex:1839},{level:2,title:"7 Spring事务的7种传播行为",slug:"_7-spring事务的7种传播行为",normalizedTitle:"7 spring事务的7种传播行为",charIndex:1971},{level:3,title:"7.1 保证同一个事务中",slug:"_7-1-保证同一个事务中",normalizedTitle:"7.1 保证同一个事务中",charIndex:1993},{level:4,title:"1 PROPAGATION_REQUIRED",slug:"_1-propagation-required",normalizedTitle:"1 propagation_required",charIndex:2009},{level:4,title:"2 PROPAGATION_SUPPORTS",slug:"_2-propagation-supports",normalizedTitle:"2 propagation_supports",charIndex:2067},{level:4,title:"3 PROPAGATION_MANDATORY",slug:"_3-propagation-mandatory",normalizedTitle:"3 propagation_mandatory",charIndex:2125},{level:3,title:"7.1 保证没有在同一个事务中",slug:"_7-1-保证没有在同一个事务中",normalizedTitle:"7.1 保证没有在同一个事务中",charIndex:2183},{level:4,title:"PROPAGATIONREQUIRESNEW",slug:"propagation-requires-new",normalizedTitle:"propagationrequiresnew",charIndex:null},{level:4,title:"5.PROPAGATIONNOTSUPPORTED",slug:"_5-propagation-not-supported",normalizedTitle:"5.propagationnotsupported",charIndex:null},{level:4,title:"6.PROPAGATION_NEVER",slug:"_6-propagation-never",normalizedTitle:"6.propagation_never",charIndex:2315},{level:4,title:"7.PROPAGATION_NESTED",slug:"_7-propagation-nested",normalizedTitle:"7.propagation_nested",charIndex:2361},{level:3,title:"7.2 传播级别不生效原因？",slug:"_7-2-传播级别不生效原因",normalizedTitle:"7.2 传播级别不生效原因？",charIndex:2404}],excerpt:'<h2 id="_1-什么是事务"><a class="header-anchor" href="#_1-什么是事务">#</a> 1 什么是事务？</h2>\n<p>事务逻辑上的一组操作，组成这组操作的各个逻辑单元,要么一起成功,要么一起失败。</p>\n<h2 id="_2-事务有哪些特性"><a class="header-anchor" href="#_2-事务有哪些特性">#</a> 2 事务有哪些特性？</h2>\n<p><strong>事务的特性（ACID）</strong></p>\n<p><strong>原子性（atomicity）:</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用;</p>\n<p><strong>一致性（consistency）:</strong> 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的;</p>\n<p><strong>隔离性（isolation）:</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;</p>\n<p><strong>持久性（durability）:</strong> 事务一旦结束，数据就持久到数据库。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 什么是事务？ 2 事务有哪些特性？ 3 innodb怎么实现事务 4 并发事务带来的问题 4.1 脏读（Dirty read） 4.2 不可重复读（Nonrepeatable read） 4.3 幻影读（Phantom reads） 4.4 不可重复度和幻读区别 5 事务隔离级别 5.1 READ-UNCOMMITTED(读取未提交) 5.2 READ-COMMITTED(读取已提交) 5.3 REPEATABLE-READ(可重复读) 5.4 SERIALIZABLE(串行化) 5.5 数据库默认隔离级别 6 Spring 事务中的隔离级别 6.1 ISOLATION_DEFAULT 6.2 ISOLATIONREADUNCOMMITTED 6.3 ISOLATIONREADCOMMITTED 6.4 ISOLATIONREPEATABLEREAD 6.5 ISOLATION_SERIALIZABLE 7 Spring事务的7种传播行为 7.1 保证同一个事务中 1 PROPAGATION_REQUIRED 2 PROPAGATION_SUPPORTS 3 PROPAGATION_MANDATORY 7.1 保证没有在同一个事务中 PROPAGATIONREQUIRESNEW 5.PROPAGATIONNOTSUPPORTED 6.PROPAGATION_NEVER 7.PROPAGATION_NESTED 7.2 传播级别不生效原因？",content:"# 1 什么是事务？\n\n事务逻辑上的一组操作，组成这组操作的各个逻辑单元,要么一起成功,要么一起失败。\n\n\n# 2 事务有哪些特性？\n\n事务的特性（ACID）\n\n原子性（atomicity）: 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用;\n\n一致性（consistency）: 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的;\n\n隔离性（isolation）: 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;\n\n持久性（durability）: 事务一旦结束，数据就持久到数据库。\n\n\n# 3 innodb怎么实现事务\n\nACD三个特性是通过Redo log（重做日志）和Undo log实现的。 而隔离性是通过锁来实现的。\n\n\n# 4 并发事务带来的问题\n\n\n# 4.1 脏读（Dirty read）\n\n脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。\n\n\n# 4.2 不可重复读（Nonrepeatable read）\n\n不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。\n\n\n# 4.3 幻影读（Phantom reads）\n\n幻影读和不可重复读相似。当一个事务（T1）读取几行记录后，另一个并发事务（T2）插入了一些记录时，幻影读就发生了。在后来的查询中，第一个事务（T1）就会发现一些原来没有的额外记录。\n\n\n# 4.4 不可重复度和幻读区别\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n\n# 5 事务隔离级别\n\n\n# 5.1 READ-UNCOMMITTED(读取未提交)\n\n最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读\n\n\n# 5.2 READ-COMMITTED(读取已提交)\n\n允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生\n\n\n# 5.3 REPEATABLE-READ(可重复读)\n\n对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n\n# 5.4 SERIALIZABLE(串行化)\n\n最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\n\n\n# 5.5 数据库默认隔离级别\n\nMySQL InnoDB 存储引擎的默认支持的隔离级别是：REPEATABLE-READ（可重读）\n\nOracle 默认：READ-COMMITTED（读已提交）\n\n\n# 6 Spring 事务中的隔离级别\n\nTransactionDefinition 接口中定义了五个表示隔离级别的常量:\n\nTransactionDefinition.ISOLATION_DEFAULT\n\nTransactionDefinition.ISOLATION_READ_UNCOMMITTED\n\nTransactionDefinition.ISOLATION_READ_COMMITTED\n\nTransactionDefinition.ISOLATION_REPEATABLE_READ\n\nTransactionDefinition.ISOLATION_SERIALIZABLE\n\n\n# 6.1 ISOLATION_DEFAULT\n\n使用后端数据库默认的隔离级别。\n\nMysql 默认采用的 REPEATABLE_READ隔离级别。Oracle 默认采用的 READ_COMMITTED隔离级别。\n\n\n# 6.2 ISOLATION_READ_UNCOMMITTED\n\n最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\n\n\n# 6.3 ISOLATION_READ_COMMITTED\n\n允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\n\n\n# 6.4 ISOLATION_REPEATABLE_READ\n\n对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n\n# 6.5 ISOLATION_SERIALIZABLE\n\n最高的隔离级别，完全服从ACID的隔离级别。\n\n所有事务依次逐个执行，事务之间不产生干扰，也就是说该级别可以防止脏读、不可重复读以及幻读。\n\n但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n# 7 Spring事务的7种传播行为\n\n\n# 7.1 保证同一个事务中\n\n# 1 PROPAGATION_REQUIRED\n\n如果存在一个事务则支持当前事务，如果不存在就新建一个(默认)\n\n# 2 PROPAGATION_SUPPORTS\n\n如果存在一个事务则支持当前事务，如果不存在，就不使用事务\n\n\n\n# 3 PROPAGATION_MANDATORY\n\n如果存在一个事务则支持当前事务，如果不存在，抛出异常\n\n\n\n\n# 7.1 保证没有在同一个事务中\n\n# PROPAGATION_REQUIRES_NEW\n\n如果有事务存在，挂起当前事务，创建一个新的事务\n\n\n\n# 5.PROPAGATION_NOT_SUPPORTED\n\n以非事务方式运行，如果有事务存在，挂起当前事务\n\n\n\n# 6.PROPAGATION_NEVER\n\n以非事务方式运行，如果有事务存在，抛出异常\n\n# 7.PROPAGATION_NESTED\n\n如果当前事务存在，则嵌套事务执行\n\n\n# 7.2 传播级别不生效原因？\n\n必须用注入的实例（代理类实例，有代理事务逻辑处理），否则只是普通类实例会导致事务代码不生效。\n\n可以类自己注入自己实例。",normalizedContent:"# 1 什么是事务？\n\n事务逻辑上的一组操作，组成这组操作的各个逻辑单元,要么一起成功,要么一起失败。\n\n\n# 2 事务有哪些特性？\n\n事务的特性（acid）\n\n原子性（atomicity）: 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用;\n\n一致性（consistency）: 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的;\n\n隔离性（isolation）: 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;\n\n持久性（durability）: 事务一旦结束，数据就持久到数据库。\n\n\n# 3 innodb怎么实现事务\n\nacd三个特性是通过redo log（重做日志）和undo log实现的。 而隔离性是通过锁来实现的。\n\n\n# 4 并发事务带来的问题\n\n\n# 4.1 脏读（dirty read）\n\n脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。\n\n\n# 4.2 不可重复读（nonrepeatable read）\n\n不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。\n\n\n# 4.3 幻影读（phantom reads）\n\n幻影读和不可重复读相似。当一个事务（t1）读取几行记录后，另一个并发事务（t2）插入了一些记录时，幻影读就发生了。在后来的查询中，第一个事务（t1）就会发现一些原来没有的额外记录。\n\n\n# 4.4 不可重复度和幻读区别\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n\n# 5 事务隔离级别\n\n\n# 5.1 read-uncommitted(读取未提交)\n\n最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读\n\n\n# 5.2 read-committed(读取已提交)\n\n允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生\n\n\n# 5.3 repeatable-read(可重复读)\n\n对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n\n# 5.4 serializable(串行化)\n\n最高的隔离级别，完全服从acid的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\n\n\n# 5.5 数据库默认隔离级别\n\nmysql innodb 存储引擎的默认支持的隔离级别是：repeatable-read（可重读）\n\noracle 默认：read-committed（读已提交）\n\n\n# 6 spring 事务中的隔离级别\n\ntransactiondefinition 接口中定义了五个表示隔离级别的常量:\n\ntransactiondefinition.isolation_default\n\ntransactiondefinition.isolation_read_uncommitted\n\ntransactiondefinition.isolation_read_committed\n\ntransactiondefinition.isolation_repeatable_read\n\ntransactiondefinition.isolation_serializable\n\n\n# 6.1 isolation_default\n\n使用后端数据库默认的隔离级别。\n\nmysql 默认采用的 repeatable_read隔离级别。oracle 默认采用的 read_committed隔离级别。\n\n\n# 6.2 isolation_read_uncommitted\n\n最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\n\n\n# 6.3 isolation_read_committed\n\n允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\n\n\n# 6.4 isolation_repeatable_read\n\n对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n\n# 6.5 isolation_serializable\n\n最高的隔离级别，完全服从acid的隔离级别。\n\n所有事务依次逐个执行，事务之间不产生干扰，也就是说该级别可以防止脏读、不可重复读以及幻读。\n\n但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n# 7 spring事务的7种传播行为\n\n\n# 7.1 保证同一个事务中\n\n# 1 propagation_required\n\n如果存在一个事务则支持当前事务，如果不存在就新建一个(默认)\n\n# 2 propagation_supports\n\n如果存在一个事务则支持当前事务，如果不存在，就不使用事务\n\n\n\n# 3 propagation_mandatory\n\n如果存在一个事务则支持当前事务，如果不存在，抛出异常\n\n\n\n\n# 7.1 保证没有在同一个事务中\n\n# propagation_requires_new\n\n如果有事务存在，挂起当前事务，创建一个新的事务\n\n\n\n# 5.propagation_not_supported\n\n以非事务方式运行，如果有事务存在，挂起当前事务\n\n\n\n# 6.propagation_never\n\n以非事务方式运行，如果有事务存在，抛出异常\n\n# 7.propagation_nested\n\n如果当前事务存在，则嵌套事务执行\n\n\n# 7.2 传播级别不生效原因？\n\n必须用注入的实例（代理类实例，有代理事务逻辑处理），否则只是普通类实例会导致事务代码不生效。\n\n可以类自己注入自己实例。",charsets:{cjk:!0}},{title:"数据库锁",frontmatter:{title:"数据库锁",date:"2022-05-07T15:13:21.000Z",permalink:"/pages/d9091c/",categories:["学习笔记","持久化"],tags:["数据库"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/215.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81.html",relativePath:"01.学习笔记/20.持久化/215.数据库锁.md",key:"v-4a18d7fc",path:"/pages/d9091c/",headers:[{level:2,title:"1 事务一定会锁表吗?",slug:"_1-事务一定会锁表吗",normalizedTitle:"1 事务一定会锁表吗?",charIndex:2},{level:2,title:"2 锁分类",slug:"_2-锁分类",normalizedTitle:"2 锁分类",charIndex:164},{level:2,title:"3 锁优化建议",slug:"_3-锁优化建议",normalizedTitle:"3 锁优化建议",charIndex:623},{level:2,title:"4 MVCC",slug:"_4-mvcc",normalizedTitle:"4 mvcc",charIndex:770},{level:2,title:"5 undo日志版本链与read view机制详解",slug:"_5-undo日志版本链与read-view机制详解",normalizedTitle:"5 undo日志版本链与read view机制详解",charIndex:1239}],excerpt:'<h2 id="_1-事务一定会锁表吗"><a class="header-anchor" href="#_1-事务一定会锁表吗">#</a> 1 事务一定会锁表吗?</h2>\n<p>1、事务隔离级别是<strong>可重复读</strong>时，<strong>如果没有索引</strong>，更新数据时会锁住整张表。</p>\n<p>2、事务隔离级别为<strong>读未提交</strong>时，写数据只会<strong>锁住相应的行</strong>。</p>\n<p>3、事务隔离级别为串行化时，读写数据都会锁住整张表。</p>\n<p><strong>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁。</strong></p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 事务一定会锁表吗? 2 锁分类 3 锁优化建议 4 MVCC 5 undo日志版本链与read view机制详解",content:"# 1 事务一定会锁表吗?\n\n1、事务隔离级别是可重复读时，如果没有索引，更新数据时会锁住整张表。\n\n2、事务隔离级别为读未提交时，写数据只会锁住相应的行。\n\n3、事务隔离级别为串行化时，读写数据都会锁住整张表。\n\nInnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁。\n\n\n# 2 锁分类\n\n1.从性能上分为乐观锁(用版本对比来实现)和悲观锁\n\n2.从对数据操作的粒度分，分为表锁和行锁\n\n3.从对数据库操作的类型分，分为读锁和写锁(都属于悲观锁)\n\n读锁(共享锁，S锁(Shared)):针对同一份数据，多个读操作可以同时进行而不会互相影响\n\n写锁(排它锁，X锁(eXclusive)):当前写操作没有完成前，它会阻断其他写锁和读锁\n\n读锁和写锁都是行级锁，InnoDB的行锁是通过给索引上的索引项加锁来实现的，如果没有索引，InnoDB将通过隐藏的聚簇索引来对记录加锁，InnoDB行锁分为3中情形：\n\n1. Record Lock：对索引项加锁。\n\n2. Gap Lock（间隙锁）：对索引项之间的“间隙”、第一条记录前的“间隙”或最后一条记录后的“间隙”加锁。\n\n3. Next-key Lock（临键锁）：前两种的结合，对记录及其前面的间隙加锁。\n\nInnoDB这种行锁的实现特点意味着，如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟锁表一样。\n\n\n# 3 锁优化建议\n\n1.尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁\n\n2.合理设计索引，尽量缩小锁的范围\n\n3.尽可能减少检索条件范围，避免间隙锁\n\n4.尽量控制事务大小，减少锁定资源量和时间长度，涉及事务加锁的sql尽量放在事务最后执行\n\n5.尽可能低级别事务隔离\n\n\n# 4 MVCC\n\n所谓的MVCC（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用READ COMMITTD、REPEATABLE READ这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。\n\nREAD COMMITTD、REPEATABLE READ这两个隔离级别的一个很大不同就是生成ReadView的时机不同，\n\nREAD COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，\n\n而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复这个ReadView就好了。\n\nMVCC，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。\n\n\n# 5 undo日志版本链与read view机制详解\n\nundo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，Mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段trx_id和roll_pointer把这些undo日志串联起来形成一个历史记录版本链。\n\n在可重复读隔离级别，当事务开启，执行任何查询sql时会生成当前事务的一致性视图read-view，该视图在事务结束之前都不会变化。\n\n如果是读已提交隔离级别在每次执行查询sql时都会重新生成。\n\nread-view视图由执行查询时所有未提交事务id数组(数组里最小的id为min_id)和已创建的最大事务id(max_id)组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条跟read-view做比对从而得到最终的快照结果。\n\n总结: MVCC机制的实现就是通过read-view机制与undo版本链比对机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上的不同版本数据。\n\n注意:begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个修改操作InnoDB表的语句，事务才真正启动，才会向mysql申请事务id，mysql内部是严格按照事务的启动顺序来分配事务id的。",normalizedContent:"# 1 事务一定会锁表吗?\n\n1、事务隔离级别是可重复读时，如果没有索引，更新数据时会锁住整张表。\n\n2、事务隔离级别为读未提交时，写数据只会锁住相应的行。\n\n3、事务隔离级别为串行化时，读写数据都会锁住整张表。\n\ninnodb的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁。\n\n\n# 2 锁分类\n\n1.从性能上分为乐观锁(用版本对比来实现)和悲观锁\n\n2.从对数据操作的粒度分，分为表锁和行锁\n\n3.从对数据库操作的类型分，分为读锁和写锁(都属于悲观锁)\n\n读锁(共享锁，s锁(shared)):针对同一份数据，多个读操作可以同时进行而不会互相影响\n\n写锁(排它锁，x锁(exclusive)):当前写操作没有完成前，它会阻断其他写锁和读锁\n\n读锁和写锁都是行级锁，innodb的行锁是通过给索引上的索引项加锁来实现的，如果没有索引，innodb将通过隐藏的聚簇索引来对记录加锁，innodb行锁分为3中情形：\n\n1. record lock：对索引项加锁。\n\n2. gap lock（间隙锁）：对索引项之间的“间隙”、第一条记录前的“间隙”或最后一条记录后的“间隙”加锁。\n\n3. next-key lock（临键锁）：前两种的结合，对记录及其前面的间隙加锁。\n\ninnodb这种行锁的实现特点意味着，如果不通过索引条件检索数据，那么innodb将对表中的所有记录加锁，实际效果跟锁表一样。\n\n\n# 3 锁优化建议\n\n1.尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁\n\n2.合理设计索引，尽量缩小锁的范围\n\n3.尽可能减少检索条件范围，避免间隙锁\n\n4.尽量控制事务大小，减少锁定资源量和时间长度，涉及事务加锁的sql尽量放在事务最后执行\n\n5.尽可能低级别事务隔离\n\n\n# 4 mvcc\n\n所谓的mvcc（multi-version concurrency control ，多版本并发控制）指的就是在使用read committd、repeatable read这两种隔离级别的事务在执行普通的seelct操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。\n\nread committd、repeatable read这两个隔离级别的一个很大不同就是生成readview的时机不同，\n\nread committd在每一次进行普通select操作前都会生成一个readview，\n\n而repeatable read只在第一次进行普通select操作前生成一个readview，之后的查询操作都重复这个readview就好了。\n\nmvcc，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。mysql在读已提交和可重复读隔离级别下都实现了mvcc机制。\n\n\n# 5 undo日志版本链与read view机制详解\n\nundo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段trx_id和roll_pointer把这些undo日志串联起来形成一个历史记录版本链。\n\n在可重复读隔离级别，当事务开启，执行任何查询sql时会生成当前事务的一致性视图read-view，该视图在事务结束之前都不会变化。\n\n如果是读已提交隔离级别在每次执行查询sql时都会重新生成。\n\nread-view视图由执行查询时所有未提交事务id数组(数组里最小的id为min_id)和已创建的最大事务id(max_id)组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条跟read-view做比对从而得到最终的快照结果。\n\n总结: mvcc机制的实现就是通过read-view机制与undo版本链比对机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上的不同版本数据。\n\n注意:begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个修改操作innodb表的语句，事务才真正启动，才会向mysql申请事务id，mysql内部是严格按照事务的启动顺序来分配事务id的。",charsets:{cjk:!0}},{title:"Elasticsearch",frontmatter:{title:"Elasticsearch",date:"2022-04-28T18:14:29.000Z",permalink:"/pages/649d86/",categories:["学习笔记","持久化"],tags:["ES"],author:{name:"luoxiaofeng"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%8C%81%E4%B9%85%E5%8C%96/250.Elasticsearch.html",relativePath:"01.学习笔记/20.持久化/250.Elasticsearch.md",key:"v-02156f86",path:"/pages/649d86/",headers:[{level:2,title:"1 canal",slug:"_1-canal",normalizedTitle:"1 canal",charIndex:2},{level:3,title:"1.1 什么是canal？",slug:"_1-1-什么是canal",normalizedTitle:"1.1 什么是canal？",charIndex:14},{level:3,title:"1.2 canal的工作原理？",slug:"_1-2-canal的工作原理",normalizedTitle:"1.2 canal的工作原理？",charIndex:163},{level:3,title:"1.3 canal高可用？",slug:"_1-3-canal高可用",normalizedTitle:"1.3 canal高可用？",charIndex:519},{level:3,title:"1.4 canal投递消息到kafka",slug:"_1-4-canal投递消息到kafka",normalizedTitle:"1.4 canal投递消息到kafka",charIndex:763},{level:2,title:"2 mysql的binlog",slug:"_2-mysql的binlog",normalizedTitle:"2 mysql的binlog",charIndex:1935},{level:3,title:"2.1 什么是binlog？",slug:"_2-1-什么是binlog",normalizedTitle:"2.1 什么是binlog？",charIndex:1954},{level:3,title:"2.2 怎么开启binlog？",slug:"_2-2-怎么开启binlog",normalizedTitle:"2.2 怎么开启binlog？",charIndex:2293},{level:3,title:"2.3 binlog有几种格式？",slug:"_2-3-binlog有几种格式",normalizedTitle:"2.3 binlog有几种格式？",charIndex:2468},{level:3,title:"2.4 binlog格式怎么选择？",slug:"_2-4-binlog格式怎么选择",normalizedTitle:"2.4 binlog格式怎么选择？",charIndex:2527},{level:2,title:"3 Oracle GoldenGate（ogg）",slug:"_3-oracle-goldengate-ogg",normalizedTitle:"3 oracle goldengate（ogg）",charIndex:2592},{level:3,title:"3.1 什么是ogg？",slug:"_3-1-什么是ogg",normalizedTitle:"3.1 什么是ogg？",charIndex:2621},{level:2,title:"4 日志系统实现思路",slug:"_4-日志系统实现思路",normalizedTitle:"4 日志系统实现思路",charIndex:2783},{level:2,title:"5 Elasticsearch",slug:"_5-elasticsearch",normalizedTitle:"5 elasticsearch",charIndex:2991},{level:3,title:"5.1 elasticsearch的倒排索引是什么？",slug:"_5-1-elasticsearch的倒排索引是什么",normalizedTitle:"5.1 elasticsearch的倒排索引是什么？",charIndex:3011},{level:3,title:"5.2 elasticsearch索引数据多了怎么办？",slug:"_5-2-elasticsearch索引数据多了怎么办",normalizedTitle:"5.2 elasticsearch索引数据多了怎么办？",charIndex:3123},{level:3,title:"5.3 ES的集群架构，索引数据大小，分片有多少？",slug:"_5-3-es的集群架构-索引数据大小-分片有多少",normalizedTitle:"5.3 es的集群架构，索引数据大小，分片有多少？",charIndex:3232},{level:2,title:"6 RestHighLevelClient的使用",slug:"_6-resthighlevelclient的使用",normalizedTitle:"6 resthighlevelclient的使用",charIndex:3426},{level:3,title:"6.1 查询",slug:"_6-1-查询",normalizedTitle:"6.1 查询",charIndex:3553}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 canal 1.1 什么是canal？ 1.2 canal的工作原理？ 1.3 canal高可用？ 1.4 canal投递消息到kafka 2 mysql的binlog 2.1 什么是binlog？ 2.2 怎么开启binlog？ 2.3 binlog有几种格式？ 2.4 binlog格式怎么选择？ 3 Oracle GoldenGate（ogg） 3.1 什么是ogg？ 4 日志系统实现思路 5 Elasticsearch 5.1 elasticsearch的倒排索引是什么？ 5.2 elasticsearch索引数据多了怎么办？ 5.3 ES的集群架构，索引数据大小，分片有多少？ 6 RestHighLevelClient的使用 6.1 查询",content:'# 1 canal\n\n\n# 1.1 什么是canal？\n\ncanal是用java开发的基于数据库增量日志解析，提供增量数据订阅&消费的中间件。\n\n目前，canal主要支持MySQL的binlog解析，解析完成才利用canal client用来处理获得的相关数据。数据库同步需要阿里的otter中间件，基于canal。\n\n\n# 1.2 canal的工作原理？\n\n首先了解一下mysql主备复制原理：\n\n（1）master主库将改变记录，发送到二进制文件（binary log）中\n\n（2）slave从库向mysql Master发送dump协议，将master主库的binary log events拷贝到它的中继日志（relay log）\n\n（3）slave从库读取并重做中继日志中的事件，将改变的数据同步到自己的数据库\n\ncanal的工作原理\n\n把自己伪装成slave，从master复制数据。读取binlog是需要master授权的，因为binlog是加密的，授权分用户名密码才能读。\n\nmaster授权后不知道读他的binlog的是从机还是canal，他的所有传输协议都符合从机的标准，所以master一直以为是从机读的。\n\n\n# 1.3 canal高可用？\n\n有两个canal服务器都监控一个或多个mysql服务器的binlog，这两个canal服务同时只能有一个提供服务。\n\n当提供服务的这个宕机时，zookeeper能知道，zookeeper就通知另一个canal服务器让他提供服务。\n\n当原来宕机的那个再启动起来时，是抢占模式的，谁抢到就谁上，没抢到就standy模式。\n\ncanal本身就是一个工具不存数据，宕机了就宕机，只有还有另外一个能提供服务就行，所以没有什么同步问题（不像数据库有同步问题）。\n\n\n# 1.4 canal投递消息到kafka\n\n1.canal投递消息到kafka，可指定mysql库表，支持按库表指定字段hash投递的kafka的partition。\n\n2.canal投递到kafka的消息体，例如：\n\nConsumerRecord(topic = binlog, partition = 0, offset = 29, CreateTime = 1647331490778, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"event":"datatest.user.update","value":[999,"ccc"]})\n\nConsumerRecord(topic = binlog, partition = 1, offset = 21, CreateTime = 1647331490777, serialized key size = -1, serialized value size = 62, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = "{\\"event\\":\\"datatest.user.update\\",\\"value\\":[999,\\"ccc\\"]}")\n\nConsumerRecord(topic = binlog, partition = 0, offset = 30, CreateTime = 1647268549467, serialized key size = -1, serialized value size = 276, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":[{"id":"999","name":"ccc"}],"database":"datatest","es":1647331490000,"id":8,"isDdl":false,"mysqlType":{"id":"int(11)","name":"varchar(50)"},"old":[{"name":"bbb"}],"pkNames":["id"],"sql":"","sqlType":{"id":4,"name":12},"table":"user","ts":1647268549466,"type":"UPDATE"})\n\n\n# 2 mysql的binlog\n\n\n# 2.1 什么是binlog？\n\nmysql的二进制日志，记录了所有的DDL和DML（除了数据查询语句），以事件的形式进行记录，包含语句执行消耗的时间，mysql的二进制日志是事务安全型的。\n\n开启二进制日志大概会有1%的性能损坏。\n\n二进制日志有2个主要的使用场景：\n\n① mysql的主备复制\n\n② 数据恢复，通过使用mysqlbinlog工具来恢复数据\n\n（用这个做恢复是备选方案，主方案还是定期快照，定期执行脚本导数据，其实就是把当前所有数据导成insert，这个量少）\n\n二进制日志包括2类文件：\n\n①二进制日志索引文件（后缀为.index）用于记录所有的二进制文件\n\n②二进制日志文件（后缀为.00000*）记录数据库所有的DDL和DML（除了数据查询语句）\n\n\n# 2.2 怎么开启binlog？\n\n1.修改my.cnf配置\n\n2.重启mysql\n\n3.查看开启状态\n\n输入 show variables like \'log_bin\'; 查看binlog开启状态。如下图所示。\n\n输入 show variables like \'binlog_format\'; 查看Binary Log记录方式。如下图所示。\n\n\n# 2.3 binlog有几种格式？\n\nbinlog的格式有三种：STATEMENT,MIXED,ROW对比如下\n\n\n# 2.4 binlog格式怎么选择？\n\n如果只考虑主从复制的话可以用mixed。\n\n抽取数据用于统计分析之类的话用row。\n\n\n# 3 Oracle GoldenGate（ogg）\n\n\n# 3.1 什么是ogg？\n\nGoldenGate软件是一种基于日志的结构化数据复制软件，它通过解析源数据库在线日志或归档日志获得数据的增量变化，再将这些变化应用到目标 数据库，从而实现源数据库与目标数据库同步。\n\nGoldenGate可以实现一对一、广播(一对多)、聚合(多对一)、双向、点对点、级联等多种拓扑结构。\n\n\n# 4 日志系统实现思路\n\n1.业务入口生成唯一traceId -> 发送kafka落日志文件（包含此次操作的用户信息）\n\n-> 数据变更落数据库（包含traceId）\n\n2.binglog -> kafka -> 有traceId变更的数据解析落日志文件（包含本次变更的所有字段）\n\n3.flume收集日志 -> kafka -> flink接收日志并清洗 -> 写入es（相同traceId关联成一条数据）\n\n\n# 5 Elasticsearch\n\n\n# 5.1 elasticsearch的倒排索引是什么？\n\n例如：查询指定关键词的文章。\n\n传统的检索是：遍历文章找到有对应的关键词。\n\n倒排索引：通过分词策略，形成词和文章的映射关系表，这种词典+映射表即为倒排索引。\n\n\n# 5.2 elasticsearch索引数据多了怎么办？\n\n1.使用滚动索引。基于模板+时间+rollover api滚动创建索引。\n\n2.只保留指定时间范围内数据。\n\n3.动态增加节点。ES自身支持动态扩展。\n\n\n# 5.3 ES的集群架构，索引数据大小，分片有多少？\n\n集群架构\n\nES的集群架构有23个节点，节点配置是16核64G的。\n\n索引数据大小\n\n该集群架构包括了订单服务和运单服务的索引，其中负责的运单服务包括寄件运单和派件运单索引。\n\n索引根据录入时间每日递增（滚动索引）。当时每日新增数据两个索引大概四五千万，数据大小几十G。\n\n分片数量\n\n10个分片。5个主分片和5个副本分片。\n\n\n# 6 RestHighLevelClient的使用\n\n提示\n\nES官网推荐的ES客户端组件RestHighLevelClient， 其封装了操作ES的CRUD方法，底层原理就是模拟各种ES需要的请求，如PUT，POST，DELETE，GET等方式\n\n\n# 6.1 查询\n\n<dependency>\n  <groupId>org.elasticsearch.client</groupId>\n  <artifactId>elasticsearch-rest-high-level-client</artifactId>\n  <version>6.8.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\npublic class Test {\n  public void search() {\n    // 构建查询参数\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    // 指定返回字段\n    String[] includes = new String[]{"name", "age"};\n    String[] excludes = new String[]{"sex"};\n    searchSourceBuilder.fetchSource(includes, excludes);\n    // 构建条件查询\n    // and = filter/must; or = should\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    searchSourceBuilder.query(boolQueryBuilder.filter(QueryBuilders.termsQuery("id", ids)));\n    // 时间范围查询\n    searchSourceBuilder.query(boolQueryBuilder.filter(QueryBuilders.rangeQuery("created_time").from(queryVO.getCreatedTime())));\n    searchSourceBuilder.query(boolQueryBuilder.filter(QueryBuilders.rangeQuery("created_time").to(queryVO.getEndTime())));\n    // 分页\n    Integer size = queryVO.getSize();\n    Integer from = (queryVO.getPage() - 1) * queryVO.getSize();\n    if (size + from > 10000) {\n      throw new RRException("分页参数不合理,暂不处理");\n    }\n    searchSourceBuilder.size(size);\n    searchSourceBuilder.from(from);\n    searchSourceBuilder.query(boolQueryBuilder);\n    // 构建请求\n    SearchRequest searchRequest = new SearchRequest(EsOperateTables.EXCEPTION_HANDLE.getAlias());// ES索引别名\n    searchRequest.source(searchSourceBuilder);\n    // 发起请求\n    SearchResponse searchResponse = new SearchResponse();\n    try {\n      searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n      log.error(ErrorMsgConstant.ES_QUERY_ERROR, e);\n      throw new RRException(ErrorMsgConstant.ES_QUERY_ERROR);\n    }\n    // 解析SearchResponse\n    long totalHits = searchResponse.getHits().getTotalHits();\n    List<Map<String, Object>> mapList = Lists.newArrayListWithCapacity(searchResponse.getHits().getHits().length);\n    Arrays.stream(searchResponse.getHits().getHits()).forEach(hit -> mapList.add(hit.getSourceAsMap()));\n    List<ResInfo> resInfos = new ArrayList<>();\n    if (CollectionUtils.isNotEmpty(mapList)) {\n      resInfos = JSON.parseArray(JSON.toJSONString(mapList), ResInfo.class);\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n',normalizedContent:'# 1 canal\n\n\n# 1.1 什么是canal？\n\ncanal是用java开发的基于数据库增量日志解析，提供增量数据订阅&消费的中间件。\n\n目前，canal主要支持mysql的binlog解析，解析完成才利用canal client用来处理获得的相关数据。数据库同步需要阿里的otter中间件，基于canal。\n\n\n# 1.2 canal的工作原理？\n\n首先了解一下mysql主备复制原理：\n\n（1）master主库将改变记录，发送到二进制文件（binary log）中\n\n（2）slave从库向mysql master发送dump协议，将master主库的binary log events拷贝到它的中继日志（relay log）\n\n（3）slave从库读取并重做中继日志中的事件，将改变的数据同步到自己的数据库\n\ncanal的工作原理\n\n把自己伪装成slave，从master复制数据。读取binlog是需要master授权的，因为binlog是加密的，授权分用户名密码才能读。\n\nmaster授权后不知道读他的binlog的是从机还是canal，他的所有传输协议都符合从机的标准，所以master一直以为是从机读的。\n\n\n# 1.3 canal高可用？\n\n有两个canal服务器都监控一个或多个mysql服务器的binlog，这两个canal服务同时只能有一个提供服务。\n\n当提供服务的这个宕机时，zookeeper能知道，zookeeper就通知另一个canal服务器让他提供服务。\n\n当原来宕机的那个再启动起来时，是抢占模式的，谁抢到就谁上，没抢到就standy模式。\n\ncanal本身就是一个工具不存数据，宕机了就宕机，只有还有另外一个能提供服务就行，所以没有什么同步问题（不像数据库有同步问题）。\n\n\n# 1.4 canal投递消息到kafka\n\n1.canal投递消息到kafka，可指定mysql库表，支持按库表指定字段hash投递的kafka的partition。\n\n2.canal投递到kafka的消息体，例如：\n\nconsumerrecord(topic = binlog, partition = 0, offset = 29, createtime = 1647331490778, serialized key size = -1, serialized value size = 52, headers = recordheaders(headers = [], isreadonly = false), key = null, value = {"event":"datatest.user.update","value":[999,"ccc"]})\n\nconsumerrecord(topic = binlog, partition = 1, offset = 21, createtime = 1647331490777, serialized key size = -1, serialized value size = 62, headers = recordheaders(headers = [], isreadonly = false), key = null, value = "{\\"event\\":\\"datatest.user.update\\",\\"value\\":[999,\\"ccc\\"]}")\n\nconsumerrecord(topic = binlog, partition = 0, offset = 30, createtime = 1647268549467, serialized key size = -1, serialized value size = 276, headers = recordheaders(headers = [], isreadonly = false), key = null, value = {"data":[{"id":"999","name":"ccc"}],"database":"datatest","es":1647331490000,"id":8,"isddl":false,"mysqltype":{"id":"int(11)","name":"varchar(50)"},"old":[{"name":"bbb"}],"pknames":["id"],"sql":"","sqltype":{"id":4,"name":12},"table":"user","ts":1647268549466,"type":"update"})\n\n\n# 2 mysql的binlog\n\n\n# 2.1 什么是binlog？\n\nmysql的二进制日志，记录了所有的ddl和dml（除了数据查询语句），以事件的形式进行记录，包含语句执行消耗的时间，mysql的二进制日志是事务安全型的。\n\n开启二进制日志大概会有1%的性能损坏。\n\n二进制日志有2个主要的使用场景：\n\n① mysql的主备复制\n\n② 数据恢复，通过使用mysqlbinlog工具来恢复数据\n\n（用这个做恢复是备选方案，主方案还是定期快照，定期执行脚本导数据，其实就是把当前所有数据导成insert，这个量少）\n\n二进制日志包括2类文件：\n\n①二进制日志索引文件（后缀为.index）用于记录所有的二进制文件\n\n②二进制日志文件（后缀为.00000*）记录数据库所有的ddl和dml（除了数据查询语句）\n\n\n# 2.2 怎么开启binlog？\n\n1.修改my.cnf配置\n\n2.重启mysql\n\n3.查看开启状态\n\n输入 show variables like \'log_bin\'; 查看binlog开启状态。如下图所示。\n\n输入 show variables like \'binlog_format\'; 查看binary log记录方式。如下图所示。\n\n\n# 2.3 binlog有几种格式？\n\nbinlog的格式有三种：statement,mixed,row对比如下\n\n\n# 2.4 binlog格式怎么选择？\n\n如果只考虑主从复制的话可以用mixed。\n\n抽取数据用于统计分析之类的话用row。\n\n\n# 3 oracle goldengate（ogg）\n\n\n# 3.1 什么是ogg？\n\ngoldengate软件是一种基于日志的结构化数据复制软件，它通过解析源数据库在线日志或归档日志获得数据的增量变化，再将这些变化应用到目标 数据库，从而实现源数据库与目标数据库同步。\n\ngoldengate可以实现一对一、广播(一对多)、聚合(多对一)、双向、点对点、级联等多种拓扑结构。\n\n\n# 4 日志系统实现思路\n\n1.业务入口生成唯一traceid -> 发送kafka落日志文件（包含此次操作的用户信息）\n\n-> 数据变更落数据库（包含traceid）\n\n2.binglog -> kafka -> 有traceid变更的数据解析落日志文件（包含本次变更的所有字段）\n\n3.flume收集日志 -> kafka -> flink接收日志并清洗 -> 写入es（相同traceid关联成一条数据）\n\n\n# 5 elasticsearch\n\n\n# 5.1 elasticsearch的倒排索引是什么？\n\n例如：查询指定关键词的文章。\n\n传统的检索是：遍历文章找到有对应的关键词。\n\n倒排索引：通过分词策略，形成词和文章的映射关系表，这种词典+映射表即为倒排索引。\n\n\n# 5.2 elasticsearch索引数据多了怎么办？\n\n1.使用滚动索引。基于模板+时间+rollover api滚动创建索引。\n\n2.只保留指定时间范围内数据。\n\n3.动态增加节点。es自身支持动态扩展。\n\n\n# 5.3 es的集群架构，索引数据大小，分片有多少？\n\n集群架构\n\nes的集群架构有23个节点，节点配置是16核64g的。\n\n索引数据大小\n\n该集群架构包括了订单服务和运单服务的索引，其中负责的运单服务包括寄件运单和派件运单索引。\n\n索引根据录入时间每日递增（滚动索引）。当时每日新增数据两个索引大概四五千万，数据大小几十g。\n\n分片数量\n\n10个分片。5个主分片和5个副本分片。\n\n\n# 6 resthighlevelclient的使用\n\n提示\n\nes官网推荐的es客户端组件resthighlevelclient， 其封装了操作es的crud方法，底层原理就是模拟各种es需要的请求，如put，post，delete，get等方式\n\n\n# 6.1 查询\n\n<dependency>\n  <groupid>org.elasticsearch.client</groupid>\n  <artifactid>elasticsearch-rest-high-level-client</artifactid>\n  <version>6.8.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\npublic class test {\n  public void search() {\n    // 构建查询参数\n    searchsourcebuilder searchsourcebuilder = new searchsourcebuilder();\n    // 指定返回字段\n    string[] includes = new string[]{"name", "age"};\n    string[] excludes = new string[]{"sex"};\n    searchsourcebuilder.fetchsource(includes, excludes);\n    // 构建条件查询\n    // and = filter/must; or = should\n    boolquerybuilder boolquerybuilder = querybuilders.boolquery();\n    searchsourcebuilder.query(boolquerybuilder.filter(querybuilders.termsquery("id", ids)));\n    // 时间范围查询\n    searchsourcebuilder.query(boolquerybuilder.filter(querybuilders.rangequery("created_time").from(queryvo.getcreatedtime())));\n    searchsourcebuilder.query(boolquerybuilder.filter(querybuilders.rangequery("created_time").to(queryvo.getendtime())));\n    // 分页\n    integer size = queryvo.getsize();\n    integer from = (queryvo.getpage() - 1) * queryvo.getsize();\n    if (size + from > 10000) {\n      throw new rrexception("分页参数不合理,暂不处理");\n    }\n    searchsourcebuilder.size(size);\n    searchsourcebuilder.from(from);\n    searchsourcebuilder.query(boolquerybuilder);\n    // 构建请求\n    searchrequest searchrequest = new searchrequest(esoperatetables.exception_handle.getalias());// es索引别名\n    searchrequest.source(searchsourcebuilder);\n    // 发起请求\n    searchresponse searchresponse = new searchresponse();\n    try {\n      searchresponse = resthighlevelclient.search(searchrequest, requestoptions.default);\n    } catch (ioexception e) {\n      log.error(errormsgconstant.es_query_error, e);\n      throw new rrexception(errormsgconstant.es_query_error);\n    }\n    // 解析searchresponse\n    long totalhits = searchresponse.gethits().gettotalhits();\n    list<map<string, object>> maplist = lists.newarraylistwithcapacity(searchresponse.gethits().gethits().length);\n    arrays.stream(searchresponse.gethits().gethits()).foreach(hit -> maplist.add(hit.getsourceasmap()));\n    list<resinfo> resinfos = new arraylist<>();\n    if (collectionutils.isnotempty(maplist)) {\n      resinfos = json.parsearray(json.tojsonstring(maplist), resinfo.class);\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n',charsets:{cjk:!0}},{title:"排序算法",frontmatter:{title:"排序算法",date:"2022-04-28T18:06:58.000Z",permalink:"/pages/86f5d7/",categories:["学习笔记"],tags:["算法"],author:{name:"luoxiaofeng"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E7%AE%97%E6%B3%95/403.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html",relativePath:"01.学习笔记/40.算法/403.排序算法.md",key:"v-d42d859a",path:"/pages/86f5d7/",headers:[{level:2,title:"时间复杂度",slug:"时间复杂度",normalizedTitle:"时间复杂度",charIndex:2},{level:2,title:"1 冒泡排序",slug:"_1-冒泡排序",normalizedTitle:"1 冒泡排序",charIndex:177},{level:2,title:"2 选择排序",slug:"_2-选择排序",normalizedTitle:"2 选择排序",charIndex:766},{level:2,title:"3 快速排序",slug:"_3-快速排序",normalizedTitle:"3 快速排序",charIndex:1454},{level:2,title:"4 插入排序",slug:"_4-插入排序",normalizedTitle:"4 插入排序",charIndex:2902},{level:2,title:"5 希尔排序",slug:"_5-希尔排序",normalizedTitle:"5 希尔排序",charIndex:3473},{level:2,title:"6 归并排序",slug:"_6-归并排序",normalizedTitle:"6 归并排序",charIndex:4399},{level:2,title:"7 堆排序",slug:"_7-堆排序",normalizedTitle:"7 堆排序",charIndex:6558}],excerpt:'<h2 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">#</a> 时间复杂度</h2>\n<img src="/img/media/1f7a22193e484ea8f16567bfdc515ef9.png" class="imgcss" width="70%">\n<p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。<br>\n不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。<br>\n时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。<br>\n空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"时间复杂度 1 冒泡排序 2 选择排序 3 快速排序 4 插入排序 5 希尔排序 6 归并排序 7 堆排序",content:'# 时间复杂度\n\n稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。\n不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。\n时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。\n空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。\n\n\n# 七种经典排序\n\n\n# 1 冒泡排序\n\npublic class BubbleSort {\n  public static void main(String[] args) {\n    int[] array = {3, 5, 90, 1, 6, 43, 2};\n    bubbleSort(array);\n  }\n\n  public static void bubbleSort(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n      for (int j = 0; j < array.length - 1 - i; j++) {\n        if (array[j] > array[j + 1]) {\n          int tmp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = tmp;\n        }\n      }\n    }\n    for (int k : array) {\n      System.out.print(k + " ");\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 2 选择排序\n\n遍历数组，每次找出当次循环中最小的数\n\n  public class SelectSort {\n  public static void main(String[] args) {\n    int[] array = {3, 50, 90, 1, 6, 43, 2};\n    selectSort(array);\n  }\n\n  public static void selectSort(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j < array.length; j++) {\n        if (array[index] > array[j]) {\n          index = j;\n        }\n      }\n      if (index != i) {\n        int tmp = array[i];\n        array[i] = array[index];\n        array[index] = tmp;\n      }\n    }\n    for (int k : array) {\n      System.out.print(k + " ");\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 3 快速排序\n\n分别从初始序列“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从右往左找一个小于6的数，再从左往右找一个大于6的数，然后交换他们。\n\n首先哨兵j开始出动。因为此处设置的基准数是最左边的数，所以需要让哨兵j先出动，这一点非常重要（请自己想一想为什么）。哨兵j一步一步地向左挪动（即j–），直到找到一个小于6的数停下来。接下来哨兵i再一步一步向右挪动（即i++），直到找到一个数大于6的数停下来。最后哨兵j停在了数字5面前，哨兵i停在了数字7面前。交换哨兵i和哨兵j所指向的元素的值。\n\n到此，第一次交换结束。接下来开始哨兵j继续向左挪动（再友情提醒，每次必须是哨兵j先出发）。他发现了4（比基准数6要小，满足要求）之后停了下来。哨兵i也继续向右挪动的，他发现了9（比基准数6要大，满足要求）之后停了下来。此时再次进行交换。\n\n第二次交换结束，“探测”继续。哨兵j继续向左挪动，他发现了3（比基准数6要小，满足要求）之后又停了下来。哨兵i继续向右移动，糟啦！此时哨兵i和哨兵j相遇了，哨兵i和哨兵j都走到3面前。说明此时“探测”结束。我们将基准数6和3进行交换。\n\n到此第一轮“探测”真正结束。此时以基准数6为分界点，6左边的数都小于等于6，6右边的数都大于等于6。\n\n public class QuickSort {\n  public static void main(String[] args) {\n    int[] array = {3, 50, 90, 1, 6, 43, 27};\n    quickSort(array, 0, array.length - 1);\n    for (int k : array) {\n      System.out.print(k + " ");\n    }\n  }\n\n  public static void quickSort(int[] array, int left, int right) {\n    if (left >= right) {\n      return;\n    }\n    int index = left;\n    int l = left;\n    int r = right;\n    while (l < r) {\n      while (l < r && array[r] >= array[index]) {\n        r--;\n      }\n      while (l < r && array[l] <= array[index]) {\n        l++;\n      }\n      int temp = array[r];\n      array[r] = array[l];\n      array[l] = temp;\n    }\n    int temp = array[index];\n    array[index] = array[l];\n    array[l] = temp;\n\n    quickSort(array, left, l);\n    quickSort(array, l + 1, right);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 4 插入排序\n\npublic class InsertSort {\n  public static void main(String[] args) {\n    int[] array = {4, 8, 6, 1, 2, 3};\n    insertSort(array);\n    for (int k : array) {\n      System.out.print(k + " ");\n    }\n  }\n\n  public static void insertSort(int[] a) {\n    for (int i = 0; i < a.length; i++) {\n      for (int j = i; j > 0; j--) {\n        if (a[j] < a[j - 1]) {\n          int temp = a[j];\n          a[j] = a[j - 1];\n          a[j - 1] = temp;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 5 希尔排序\n\n希尔排序也成为“缩小增量排序”，其基本原理是，现将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序列“基本有序”后，最后在对所有元素进行一次直接插入排序。\n\npublic class ShellSort {\n  public static void main(String[] args) {\n    int[] data = new int[]{26, 53, 67, 48, 57, 13, 48, 32, 60, 50};\n    shellSortSmallToBig(data);\n    for (int k : data) {\n      System.out.print(k + " ");\n    }\n  }\n\n  public static void shellSortSmallToBig(int[] data) {\n    int j = 0;\n    int temp = 0;\n    for (int increment = data.length / 2; increment > 0; increment /= 2) {\n      for (int i = increment; i < data.length; i++) {\n        temp = data[i];\n        for (j = i - increment; j >= 0; j -= increment) {\n          if (temp < data[j]) {\n            data[j + increment] = data[j];\n          } else {\n            break;\n          }\n        }\n        data[j + increment] = temp;\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 6 归并排序\n\n可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。\n\n归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。\n\npublic class MergeSort {\n  public static void main(String[] args) {\n    int[] a = {5, 9, 11, 13, 12, 88, 1, 8, 7};\n    System.out.println("初始：" + printArray(a));\n    recursive(a, 0, a.length - 1);\n    System.out.println("排序：" + printArray(a));\n  }\n\n  public static void recursive(int[] array, int left, int right) {\n\n    if (left < right) {\n      int mid = (left + right) / 2;\n      recursive(array, left, mid);\n      recursive(array, mid + 1, right);\n      merge(array, left, mid, right);\n    }\n  }\n\n  public static void merge(int[] array, int left, int middle, int right) {\n    int array_l = left;\n    int array_r = middle + 1;\n    int[] temp = new int[right - left + 1]; //临时数组，存放比较后结果  \n    int temp_l = 0; //临时数组左下标  \n    while (array_l <= middle && array_r <= right) {\n      if (array[array_l] <= array[array_r]) {\n        temp[temp_l++] = array[array_l++];\n      } else {\n        temp[temp_l++] = array[array_r++];\n      }\n    }\n    while (array_l <= middle) {\n      temp[temp_l++] = array[array_l++];\n    }\n    while (array_r <= right) {\n      temp[temp_l++] = array[array_r++];\n    }\n    System.out.println("left:" + left + " middle:" + middle + " right:" + right);\n    System.out.println(printArray(temp));\n    System.out.println("----------------------------");\n    //临时数组数据塞回原数组  \n    temp_l = 0;\n    while (left <= right) {\n      array[left++] = temp[temp_l++];\n    }\n  }\n\n  public static String printArray(int[] array) {\n    StringBuilder sb = new StringBuilder();\n    sb.append("【");\n    for (int i = 0; i < array.length; i++) {\n      sb.append(array[i]);\n      if (i != array.length - 1) {\n        sb.append(",");\n      }\n    }\n    sb.append("】");\n    return sb.toString();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 7 堆排序\n\n什么是堆？\n\n堆是一种非线性结构，可以把堆看作一个数组，也可以被看作一个完全二叉树，通俗来讲堆其实就是利用完全二叉树的结构来维护的一维数组但堆并不一定是完全二叉树\n\n按照堆的特点可以把堆分为大顶堆和小顶堆\n\n**大顶堆：**每个结点的值都大于或等于其左右孩子结点的值\n\n**小顶堆：**每个结点的值都小于或等于其左右孩子结点的值\n\n使用堆的原因？\n\n如果仅仅是需要得到一个有序的序列，使用排序就可以很快完成，并不需要去组织一个新的数据结构。但是如果我们的需求是对于一个随时会有更新的序列，我要随时知道这个序列的最小值或最大值是什么。显然如果是线性结构，每次插入之后，假设原数组是有序的，那使用二分把它放在正确的位置也未尝不可，但是插入的时候从数组中留出空位就需要O(n)的时间复杂度，删除的时候亦然。\n\n可是如果我们将序列看作是一个集合，我们需要的是这个集合的一个最小值或者最大值，并且，在它被任意划分成为若干个子集的时候，这些子集的最小值或者最大值我们也是知道的，这些子集被不断划分，我们依然知道这些再次被划分出来的子集的最小值或者最大值。而且我们去想办法去保持这样的一个性质，那么这个问题是不是变得非常好解决了呢？那么问题就转换成了一种集合之间的关系，并且是非常明显的一种包含关系，那么最适合于解决这种集合上的关系的数据结构是什么呢？那么就是树，所以就形成了这样的一种树，他的每一个节点都比它的子节点们小或者大。 当我们插入一个新的节点的时候，实际上我们需要去调整的大部分时候只是这棵树上的一条路径，也就是决定它在哪一个集合里面，树上的路径长度相对于这个集合，由于是对数级别的，所以非常可以接受，那么这种数据结构也就应运而生，而这个数据结构为什么叫做堆，那就不知道了。\n\npublic class HeapSort {\n  public static void main(String[] args) {\n    int[] array = {20, 7, 18, 2, 5, 17, 16};\n    for (int i = array.length / 2 - 1; i >= 0; i--) {\n      adjust(array, i, array.length);\n    }\n    for (int pos = array.length - 1; pos > 0; pos--) {\n      int temp = array[0];\n      array[0] = array[pos];\n      array[pos] = temp;\n      adjust(array, 0, pos);\n    }\n\n    for (int k : array) {\n      System.out.print(k + " ");\n    }\n  }\n\n  public static void adjust(int[] a, int index, int len) {\n    int endPos = len - 1;\n    int left = 2 * index + 1; //左节点  \n\n    int pos = left; //指针指向左节点  \n    if (left > endPos) { //左节点超过数组长度  \n      return;\n    }\n    if (left < endPos && a[left + 1] > a[left]) {\n      pos = left + 1; //指针指向右节点  \n    }\n    if (a[index] < a[pos]) {\n      int temp = a[index];\n      a[index] = a[pos];\n      a[pos] = temp;\n      adjust(a, pos, len);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n',normalizedContent:'# 时间复杂度\n\n稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。\n不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。\n时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。\n空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。\n\n\n# 七种经典排序\n\n\n# 1 冒泡排序\n\npublic class bubblesort {\n  public static void main(string[] args) {\n    int[] array = {3, 5, 90, 1, 6, 43, 2};\n    bubblesort(array);\n  }\n\n  public static void bubblesort(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n      for (int j = 0; j < array.length - 1 - i; j++) {\n        if (array[j] > array[j + 1]) {\n          int tmp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = tmp;\n        }\n      }\n    }\n    for (int k : array) {\n      system.out.print(k + " ");\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 2 选择排序\n\n遍历数组，每次找出当次循环中最小的数\n\n  public class selectsort {\n  public static void main(string[] args) {\n    int[] array = {3, 50, 90, 1, 6, 43, 2};\n    selectsort(array);\n  }\n\n  public static void selectsort(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j < array.length; j++) {\n        if (array[index] > array[j]) {\n          index = j;\n        }\n      }\n      if (index != i) {\n        int tmp = array[i];\n        array[i] = array[index];\n        array[index] = tmp;\n      }\n    }\n    for (int k : array) {\n      system.out.print(k + " ");\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 3 快速排序\n\n分别从初始序列“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从右往左找一个小于6的数，再从左往右找一个大于6的数，然后交换他们。\n\n首先哨兵j开始出动。因为此处设置的基准数是最左边的数，所以需要让哨兵j先出动，这一点非常重要（请自己想一想为什么）。哨兵j一步一步地向左挪动（即j–），直到找到一个小于6的数停下来。接下来哨兵i再一步一步向右挪动（即i++），直到找到一个数大于6的数停下来。最后哨兵j停在了数字5面前，哨兵i停在了数字7面前。交换哨兵i和哨兵j所指向的元素的值。\n\n到此，第一次交换结束。接下来开始哨兵j继续向左挪动（再友情提醒，每次必须是哨兵j先出发）。他发现了4（比基准数6要小，满足要求）之后停了下来。哨兵i也继续向右挪动的，他发现了9（比基准数6要大，满足要求）之后停了下来。此时再次进行交换。\n\n第二次交换结束，“探测”继续。哨兵j继续向左挪动，他发现了3（比基准数6要小，满足要求）之后又停了下来。哨兵i继续向右移动，糟啦！此时哨兵i和哨兵j相遇了，哨兵i和哨兵j都走到3面前。说明此时“探测”结束。我们将基准数6和3进行交换。\n\n到此第一轮“探测”真正结束。此时以基准数6为分界点，6左边的数都小于等于6，6右边的数都大于等于6。\n\n public class quicksort {\n  public static void main(string[] args) {\n    int[] array = {3, 50, 90, 1, 6, 43, 27};\n    quicksort(array, 0, array.length - 1);\n    for (int k : array) {\n      system.out.print(k + " ");\n    }\n  }\n\n  public static void quicksort(int[] array, int left, int right) {\n    if (left >= right) {\n      return;\n    }\n    int index = left;\n    int l = left;\n    int r = right;\n    while (l < r) {\n      while (l < r && array[r] >= array[index]) {\n        r--;\n      }\n      while (l < r && array[l] <= array[index]) {\n        l++;\n      }\n      int temp = array[r];\n      array[r] = array[l];\n      array[l] = temp;\n    }\n    int temp = array[index];\n    array[index] = array[l];\n    array[l] = temp;\n\n    quicksort(array, left, l);\n    quicksort(array, l + 1, right);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 4 插入排序\n\npublic class insertsort {\n  public static void main(string[] args) {\n    int[] array = {4, 8, 6, 1, 2, 3};\n    insertsort(array);\n    for (int k : array) {\n      system.out.print(k + " ");\n    }\n  }\n\n  public static void insertsort(int[] a) {\n    for (int i = 0; i < a.length; i++) {\n      for (int j = i; j > 0; j--) {\n        if (a[j] < a[j - 1]) {\n          int temp = a[j];\n          a[j] = a[j - 1];\n          a[j - 1] = temp;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 5 希尔排序\n\n希尔排序也成为“缩小增量排序”，其基本原理是，现将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序列“基本有序”后，最后在对所有元素进行一次直接插入排序。\n\npublic class shellsort {\n  public static void main(string[] args) {\n    int[] data = new int[]{26, 53, 67, 48, 57, 13, 48, 32, 60, 50};\n    shellsortsmalltobig(data);\n    for (int k : data) {\n      system.out.print(k + " ");\n    }\n  }\n\n  public static void shellsortsmalltobig(int[] data) {\n    int j = 0;\n    int temp = 0;\n    for (int increment = data.length / 2; increment > 0; increment /= 2) {\n      for (int i = increment; i < data.length; i++) {\n        temp = data[i];\n        for (j = i - increment; j >= 0; j -= increment) {\n          if (temp < data[j]) {\n            data[j + increment] = data[j];\n          } else {\n            break;\n          }\n        }\n        data[j + increment] = temp;\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 6 归并排序\n\n可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。\n\n归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中arrays.sort()采用了一种名为timsort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为o(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为o(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为o(nlogn)。\n\npublic class mergesort {\n  public static void main(string[] args) {\n    int[] a = {5, 9, 11, 13, 12, 88, 1, 8, 7};\n    system.out.println("初始：" + printarray(a));\n    recursive(a, 0, a.length - 1);\n    system.out.println("排序：" + printarray(a));\n  }\n\n  public static void recursive(int[] array, int left, int right) {\n\n    if (left < right) {\n      int mid = (left + right) / 2;\n      recursive(array, left, mid);\n      recursive(array, mid + 1, right);\n      merge(array, left, mid, right);\n    }\n  }\n\n  public static void merge(int[] array, int left, int middle, int right) {\n    int array_l = left;\n    int array_r = middle + 1;\n    int[] temp = new int[right - left + 1]; //临时数组，存放比较后结果  \n    int temp_l = 0; //临时数组左下标  \n    while (array_l <= middle && array_r <= right) {\n      if (array[array_l] <= array[array_r]) {\n        temp[temp_l++] = array[array_l++];\n      } else {\n        temp[temp_l++] = array[array_r++];\n      }\n    }\n    while (array_l <= middle) {\n      temp[temp_l++] = array[array_l++];\n    }\n    while (array_r <= right) {\n      temp[temp_l++] = array[array_r++];\n    }\n    system.out.println("left:" + left + " middle:" + middle + " right:" + right);\n    system.out.println(printarray(temp));\n    system.out.println("----------------------------");\n    //临时数组数据塞回原数组  \n    temp_l = 0;\n    while (left <= right) {\n      array[left++] = temp[temp_l++];\n    }\n  }\n\n  public static string printarray(int[] array) {\n    stringbuilder sb = new stringbuilder();\n    sb.append("【");\n    for (int i = 0; i < array.length; i++) {\n      sb.append(array[i]);\n      if (i != array.length - 1) {\n        sb.append(",");\n      }\n    }\n    sb.append("】");\n    return sb.tostring();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 7 堆排序\n\n什么是堆？\n\n堆是一种非线性结构，可以把堆看作一个数组，也可以被看作一个完全二叉树，通俗来讲堆其实就是利用完全二叉树的结构来维护的一维数组但堆并不一定是完全二叉树\n\n按照堆的特点可以把堆分为大顶堆和小顶堆\n\n**大顶堆：**每个结点的值都大于或等于其左右孩子结点的值\n\n**小顶堆：**每个结点的值都小于或等于其左右孩子结点的值\n\n使用堆的原因？\n\n如果仅仅是需要得到一个有序的序列，使用排序就可以很快完成，并不需要去组织一个新的数据结构。但是如果我们的需求是对于一个随时会有更新的序列，我要随时知道这个序列的最小值或最大值是什么。显然如果是线性结构，每次插入之后，假设原数组是有序的，那使用二分把它放在正确的位置也未尝不可，但是插入的时候从数组中留出空位就需要o(n)的时间复杂度，删除的时候亦然。\n\n可是如果我们将序列看作是一个集合，我们需要的是这个集合的一个最小值或者最大值，并且，在它被任意划分成为若干个子集的时候，这些子集的最小值或者最大值我们也是知道的，这些子集被不断划分，我们依然知道这些再次被划分出来的子集的最小值或者最大值。而且我们去想办法去保持这样的一个性质，那么这个问题是不是变得非常好解决了呢？那么问题就转换成了一种集合之间的关系，并且是非常明显的一种包含关系，那么最适合于解决这种集合上的关系的数据结构是什么呢？那么就是树，所以就形成了这样的一种树，他的每一个节点都比它的子节点们小或者大。 当我们插入一个新的节点的时候，实际上我们需要去调整的大部分时候只是这棵树上的一条路径，也就是决定它在哪一个集合里面，树上的路径长度相对于这个集合，由于是对数级别的，所以非常可以接受，那么这种数据结构也就应运而生，而这个数据结构为什么叫做堆，那就不知道了。\n\npublic class heapsort {\n  public static void main(string[] args) {\n    int[] array = {20, 7, 18, 2, 5, 17, 16};\n    for (int i = array.length / 2 - 1; i >= 0; i--) {\n      adjust(array, i, array.length);\n    }\n    for (int pos = array.length - 1; pos > 0; pos--) {\n      int temp = array[0];\n      array[0] = array[pos];\n      array[pos] = temp;\n      adjust(array, 0, pos);\n    }\n\n    for (int k : array) {\n      system.out.print(k + " ");\n    }\n  }\n\n  public static void adjust(int[] a, int index, int len) {\n    int endpos = len - 1;\n    int left = 2 * index + 1; //左节点  \n\n    int pos = left; //指针指向左节点  \n    if (left > endpos) { //左节点超过数组长度  \n      return;\n    }\n    if (left < endpos && a[left + 1] > a[left]) {\n      pos = left + 1; //指针指向右节点  \n    }\n    if (a[index] < a[pos]) {\n      int temp = a[index];\n      a[index] = a[pos];\n      a[pos] = temp;\n      adjust(a, pos, len);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n',charsets:{cjk:!0}},{title:"场景题",frontmatter:{title:"场景题",date:"2022-05-07T15:21:38.000Z",permalink:"/pages/4245a9/",categories:["学习笔记","算法"],tags:["算法"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E7%AE%97%E6%B3%95/406.%E5%9C%BA%E6%99%AF%E9%A2%98.html",relativePath:"01.学习笔记/40.算法/406.场景题.md",key:"v-28118ddf",path:"/pages/4245a9/",headers:[{level:2,title:"1 一亿数据取最大前10000个",slug:"_1-一亿数据取最大前10000个",normalizedTitle:"1 一亿数据取最大前10000个",charIndex:2},{level:2,title:"2 一百亿数据排序",slug:"_2-一百亿数据排序",normalizedTitle:"2 一百亿数据排序",charIndex:261},{level:2,title:"3 链表反转",slug:"_3-链表反转",normalizedTitle:"3 链表反转",charIndex:889}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 一亿数据取最大前10000个 2 一百亿数据排序 3 链表反转",content:"# 1 一亿数据取最大前10000个\n\n采用最小堆法，首先读入前 10000 个数来创建大小为 10000 的最小堆，建堆的时间复 杂度为 O(mlogm)(m 为数组的大小即为 10000)，然后遍历后续的数字，并于堆顶(最小)数字进行比较。如果比最小的数小，则继续读取后续数字;如果比堆顶数字大，则替换堆顶元素并重新调整堆为最小堆。整个过程直至1亿个数全部遍历完为止。然后按照中序遍历的方式输出当前堆中的所有 10000 个数字。该算法的时间复杂度为 O (nmlogm)，空间复杂度是 10000(常数)。\n\n\n# 2 一百亿数据排序\n\n假设为int型，则：\n\n100亿数字 = 4 * 100 0000 0000 B = 4 * 9765625K（约等于400 0000 0 K） = 4 * 9536M（约等于40000M） = 37.25G（约等于40G）\n\n1.把这个37GB的大文件，用哈希分成1000个小文件，每个小文件平均37MB左右（理想情况），把100亿个数字对1000取模，模出来的结果在0到999之间，每个结果对应一个文件，所以我这里取的哈希函数是 h = x % 1000，哈希函数取得”好”，能使冲突减小，结果分布均匀。\n\n2.拆分完了之后，得到一些几十MB的小文件，那么就可以放进内存里排序了，可以用快速排序，归并排序，堆排序等等。\n\n3.1000个小文件内部排好序之后，就要把这些内部有序的小文件，合并成一个大的文件，可以用二叉堆来做1000路合并的操作，每个小文件是一路，合并后的大文件仍然有序。\n\n首先遍历1000个文件，每个文件里面取第一个数字，组成 (数字, 文件号) 这样的组合加入到堆里（假设是从小到大排序，用小顶堆），遍历完后堆里有1000个 (数字，文件号) 这样的元素\n\n然后不断从堆顶拿元素出来，每拿出一个元素，把它的文件号读取出来，然后去对应的文件里，加一个元素进入堆，直到那个文件被读取完。拿出来的元素当然追加到最终结果的文件里。\n\n按照上面的操作，直到堆被取空了，此时最终结果文件里的全部数字就是有序的了。\n\n\n# 3 链表反转\n\n public static void main(String[]args){\n        Node node3=new Node(3,null);\n        Node node2=new Node(2,node3);\n        Node node1=new Node(1,node2);\n        reverse(node1);\n        Node current=node3;\n        while(current!=null){\n        System.out.println(current.getCurrentId());\n        current=current.getNext();\n        }\n        }\n\npublic static void reverse(Node head){\n        Node current=head;\n        Node prev=null;\n        Node next=null;\n        while(current!=null){\n        next=current.getNext();\n        current.setNext(prev);\n        prev=current;\n        current=next;\n        }\n        }\n\npublic class Node {\n  private Node next;\n  private Integer currentId;\n\n  public Node(Integer currentId, Node next) {\n    this.next = next;\n    this.currentId currentId;\n  }\n\n  public Node getNext() {\n    return this.next;\n  }\n\n  public void setNext(Node next) {\n    this.next = next;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n",normalizedContent:"# 1 一亿数据取最大前10000个\n\n采用最小堆法，首先读入前 10000 个数来创建大小为 10000 的最小堆，建堆的时间复 杂度为 o(mlogm)(m 为数组的大小即为 10000)，然后遍历后续的数字，并于堆顶(最小)数字进行比较。如果比最小的数小，则继续读取后续数字;如果比堆顶数字大，则替换堆顶元素并重新调整堆为最小堆。整个过程直至1亿个数全部遍历完为止。然后按照中序遍历的方式输出当前堆中的所有 10000 个数字。该算法的时间复杂度为 o (nmlogm)，空间复杂度是 10000(常数)。\n\n\n# 2 一百亿数据排序\n\n假设为int型，则：\n\n100亿数字 = 4 * 100 0000 0000 b = 4 * 9765625k（约等于400 0000 0 k） = 4 * 9536m（约等于40000m） = 37.25g（约等于40g）\n\n1.把这个37gb的大文件，用哈希分成1000个小文件，每个小文件平均37mb左右（理想情况），把100亿个数字对1000取模，模出来的结果在0到999之间，每个结果对应一个文件，所以我这里取的哈希函数是 h = x % 1000，哈希函数取得”好”，能使冲突减小，结果分布均匀。\n\n2.拆分完了之后，得到一些几十mb的小文件，那么就可以放进内存里排序了，可以用快速排序，归并排序，堆排序等等。\n\n3.1000个小文件内部排好序之后，就要把这些内部有序的小文件，合并成一个大的文件，可以用二叉堆来做1000路合并的操作，每个小文件是一路，合并后的大文件仍然有序。\n\n首先遍历1000个文件，每个文件里面取第一个数字，组成 (数字, 文件号) 这样的组合加入到堆里（假设是从小到大排序，用小顶堆），遍历完后堆里有1000个 (数字，文件号) 这样的元素\n\n然后不断从堆顶拿元素出来，每拿出一个元素，把它的文件号读取出来，然后去对应的文件里，加一个元素进入堆，直到那个文件被读取完。拿出来的元素当然追加到最终结果的文件里。\n\n按照上面的操作，直到堆被取空了，此时最终结果文件里的全部数字就是有序的了。\n\n\n# 3 链表反转\n\n public static void main(string[]args){\n        node node3=new node(3,null);\n        node node2=new node(2,node3);\n        node node1=new node(1,node2);\n        reverse(node1);\n        node current=node3;\n        while(current!=null){\n        system.out.println(current.getcurrentid());\n        current=current.getnext();\n        }\n        }\n\npublic static void reverse(node head){\n        node current=head;\n        node prev=null;\n        node next=null;\n        while(current!=null){\n        next=current.getnext();\n        current.setnext(prev);\n        prev=current;\n        current=next;\n        }\n        }\n\npublic class node {\n  private node next;\n  private integer currentid;\n\n  public node(integer currentid, node next) {\n    this.next = next;\n    this.currentid currentid;\n  }\n\n  public node getnext() {\n    return this.next;\n  }\n\n  public void setnext(node next) {\n    this.next = next;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n",charsets:{cjk:!0}},{title:"网络模型",frontmatter:{title:"网络模型",date:"2022-05-07T18:14:20.000Z",permalink:"/pages/86a1eb/",categories:["学习笔记","网络"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.%E7%BD%91%E7%BB%9C/503.%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html",relativePath:"01.学习笔记/50.网络/503.网络模型.md",key:"v-aa824af0",path:"/pages/86a1eb/",headers:[{level:2,title:"1 OSI七层模型",slug:"_1-osi七层模型",normalizedTitle:"1 osi七层模型",charIndex:2},{level:2,title:"2 TCP/IP四层模型",slug:"_2-tcp-ip四层模型",normalizedTitle:"2 tcp/ip四层模型",charIndex:16}],excerpt:'<h2 id="_1-osi七层模型"><a class="header-anchor" href="#_1-osi七层模型">#</a> 1 OSI七层模型</h2>\n<img src="/img/media/d113fe5b6903acbf0293305c3024c7c1.png" class="imgcss" width="60%"> \n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 OSI七层模型 2 TCP/IP四层模型",content:"# 1 OSI七层模型\n\n\n# 2 TCP/IP四层模型\n\n1.应用层 2.传输层 3.网络层 4.网络接口层",normalizedContent:"# 1 osi七层模型\n\n\n# 2 tcp/ip四层模型\n\n1.应用层 2.传输层 3.网络层 4.网络接口层",charsets:{cjk:!0}},{title:"HTTPS",frontmatter:{title:"HTTPS",date:"2022-05-07T18:16:10.000Z",permalink:"/pages/dcc15b/",categories:["学习笔记","网络"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.%E7%BD%91%E7%BB%9C/506.HTTPS.html",relativePath:"01.学习笔记/50.网络/506.HTTPS.md",key:"v-53e2808a",path:"/pages/dcc15b/",headers:[{level:2,title:"1 什么是HTTP？",slug:"_1-什么是http",normalizedTitle:"1 什么是http？",charIndex:2},{level:2,title:"2 什么是HTTPS？",slug:"_2-什么是https",normalizedTitle:"2 什么是https？",charIndex:210},{level:2,title:"3 什么是对称加密？",slug:"_3-什么是对称加密",normalizedTitle:"3 什么是对称加密？",charIndex:354},{level:2,title:"4 什么是非对称加密？",slug:"_4-什么是非对称加密",normalizedTitle:"4 什么是非对称加密？",charIndex:415},{level:2,title:"5 HTTPS加解密过程？",slug:"_5-https加解密过程",normalizedTitle:"5 https加解密过程？",charIndex:483}],excerpt:'<h2 id="_1-什么是http"><a class="header-anchor" href="#_1-什么是http">#</a> 1 什么是HTTP？</h2>\n<p>HTTP（Hypertext Transfer Protocol）超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议，可以说HTTP是当代互联网通信的基础。</p>\n<p>但是，HTTP 有着一个致命的缺陷，那就是内容是明文传输的，没有经过任何加密，而这些明文数据会经过WiFi、路由器、运营商、机房等多个物理设备节点，如果在这中间任意一个节点被监听，传输的内容就会完全暴露。</p>\n<h2 id="_2-什么是https"><a class="header-anchor" href="#_2-什么是https">#</a> 2 什么是HTTPS？</h2>\n<p>HTTPS其实就是将HTTP的数据包再通过SSL/TLS加密后传输，那么SSL/TLS又是什么呢？</p>\n<p>SSL（Secure Sockets Layer）安全套接层和TLS（Transport Layer Security）传输层安全协议其实是一套东西。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 什么是HTTP？ 2 什么是HTTPS？ 3 什么是对称加密？ 4 什么是非对称加密？ 5 HTTPS加解密过程？",content:"# 1 什么是HTTP？\n\nHTTP（Hypertext Transfer Protocol）超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议，可以说HTTP是当代互联网通信的基础。\n\n但是，HTTP 有着一个致命的缺陷，那就是内容是明文传输的，没有经过任何加密，而这些明文数据会经过WiFi、路由器、运营商、机房等多个物理设备节点，如果在这中间任意一个节点被监听，传输的内容就会完全暴露。\n\n\n# 2 什么是HTTPS？\n\nHTTPS其实就是将HTTP的数据包再通过SSL/TLS加密后传输，那么SSL/TLS又是什么呢？\n\nSSL（Secure Sockets Layer）安全套接层和TLS（Transport Layer Security）传输层安全协议其实是一套东西。\n\n\n# 3 什么是对称加密？\n\n对称加密是指有一个密钥，用它可以对一段明文加密，加密之后也只能用这个密钥来解密得到明文。\n\n\n# 4 什么是非对称加密？\n\n非对称加密有两个密钥，一个是公钥，另一个是私钥。一般来说，公钥用来加密，这时密文只能用私钥才能解开。\n\n\n# 5 HTTPS加解密过程？\n\n1.服务端有非对称加密的公钥A1，私钥A2。\n\n2.客户端有非对称加密的公钥B1，私钥B2。\n\n3.客户端向服务端发起请求，服务端将公钥A1返回给客户端。\n\n4.浏览器收到公钥A1，将自己保存的公钥B1发送给服务端。\n\n5.之后浏览器所有向客户端发送的数据，使用公钥B1加密，客户端可以使用私钥B2解密。\n\n6.客户端所有向服务端发送的数据，使用公钥A1加密，服务端可以使用私钥A2解密。\n\n此时，两条传输方向的数据都经过非对称加密，都能保证安全性，那么为什么不采用这种方案呢？\n\n最主要的原因是非对称加解密耗时要远大于对称加解密，对性能有很大损耗，大家的使用体验很差。\n\n所以，我们才最终选用了上文介绍到非对称加密+对称加密的方案：\n\n1.服务端有非对称加密的公钥A1，私钥A2。\n\n2.客户端发起请求，服务端将公钥A1返回给客户端。\n\n3.客户端随机生成一个对称加密的密钥K，用公钥A1加密后发送给服务端。\n\n4.服务端收到密文后用自己的私钥A2解密，得到对称密钥K，此时完成了安全的对称密钥交换，解决了对称加密时密钥传输被人窃取的问题。\n\n5.之后双方通信都使用密钥K进行对称加解密。\n\n看起来是一个非常完美的方案，兼顾了安全性和性能，但是，真的就安全了么？\n\n依然考虑中间人攻击的情况，非对称加密的算法都是公开的，所有人都可以自己生成一对公钥私钥。\n\n当服务端向客户端返回公钥A1的时候，中间人将其替换成自己的公钥B1传送给浏览器。\n\n而浏览器此时一无所知，傻乎乎地使用公钥B1加密了密钥K发送出去，又被中间人截获。\n\n出现这一问题的核心原因是客户端无法确认收到的公钥是不是真的是服务端发来的。为了解决这个问题，互联网引入了一个公信机构，这就是CA。",normalizedContent:"# 1 什么是http？\n\nhttp（hypertext transfer protocol）超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议，可以说http是当代互联网通信的基础。\n\n但是，http 有着一个致命的缺陷，那就是内容是明文传输的，没有经过任何加密，而这些明文数据会经过wifi、路由器、运营商、机房等多个物理设备节点，如果在这中间任意一个节点被监听，传输的内容就会完全暴露。\n\n\n# 2 什么是https？\n\nhttps其实就是将http的数据包再通过ssl/tls加密后传输，那么ssl/tls又是什么呢？\n\nssl（secure sockets layer）安全套接层和tls（transport layer security）传输层安全协议其实是一套东西。\n\n\n# 3 什么是对称加密？\n\n对称加密是指有一个密钥，用它可以对一段明文加密，加密之后也只能用这个密钥来解密得到明文。\n\n\n# 4 什么是非对称加密？\n\n非对称加密有两个密钥，一个是公钥，另一个是私钥。一般来说，公钥用来加密，这时密文只能用私钥才能解开。\n\n\n# 5 https加解密过程？\n\n1.服务端有非对称加密的公钥a1，私钥a2。\n\n2.客户端有非对称加密的公钥b1，私钥b2。\n\n3.客户端向服务端发起请求，服务端将公钥a1返回给客户端。\n\n4.浏览器收到公钥a1，将自己保存的公钥b1发送给服务端。\n\n5.之后浏览器所有向客户端发送的数据，使用公钥b1加密，客户端可以使用私钥b2解密。\n\n6.客户端所有向服务端发送的数据，使用公钥a1加密，服务端可以使用私钥a2解密。\n\n此时，两条传输方向的数据都经过非对称加密，都能保证安全性，那么为什么不采用这种方案呢？\n\n最主要的原因是非对称加解密耗时要远大于对称加解密，对性能有很大损耗，大家的使用体验很差。\n\n所以，我们才最终选用了上文介绍到非对称加密+对称加密的方案：\n\n1.服务端有非对称加密的公钥a1，私钥a2。\n\n2.客户端发起请求，服务端将公钥a1返回给客户端。\n\n3.客户端随机生成一个对称加密的密钥k，用公钥a1加密后发送给服务端。\n\n4.服务端收到密文后用自己的私钥a2解密，得到对称密钥k，此时完成了安全的对称密钥交换，解决了对称加密时密钥传输被人窃取的问题。\n\n5.之后双方通信都使用密钥k进行对称加解密。\n\n看起来是一个非常完美的方案，兼顾了安全性和性能，但是，真的就安全了么？\n\n依然考虑中间人攻击的情况，非对称加密的算法都是公开的，所有人都可以自己生成一对公钥私钥。\n\n当服务端向客户端返回公钥a1的时候，中间人将其替换成自己的公钥b1传送给浏览器。\n\n而浏览器此时一无所知，傻乎乎地使用公钥b1加密了密钥k发送出去，又被中间人截获。\n\n出现这一问题的核心原因是客户端无法确认收到的公钥是不是真的是服务端发来的。为了解决这个问题，互联网引入了一个公信机构，这就是ca。",charsets:{cjk:!0}},{title:"TCP交互",frontmatter:{title:"TCP交互",date:"2022-05-07T18:19:50.000Z",permalink:"/pages/73d39c/",categories:["学习笔记","网络"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.%E7%BD%91%E7%BB%9C/509.TCP%E4%BA%A4%E4%BA%92.html",relativePath:"01.学习笔记/50.网络/509.TCP交互.md",key:"v-37b14583",path:"/pages/73d39c/",headers:[{level:2,title:"1 TCP三次握手",slug:"_1-tcp三次握手",normalizedTitle:"1 tcp三次握手",charIndex:2},{level:2,title:"2 四次挥手",slug:"_2-四次挥手",normalizedTitle:"2 四次挥手",charIndex:223}],excerpt:'<h2 id="_1-tcp三次握手"><a class="header-anchor" href="#_1-tcp三次握手">#</a> 1 TCP三次握手</h2>\n<img src="/img/media/103d3cfb5df3aaac8b136c99a1a6c6d6.png" class="imgcss" width="60%">\n<p>第一次握手:Client <strong>什么都不能确认</strong>;Server 确认了:<strong>对方发送正常，自己接收正常</strong>。</p>\n<p>第二次握手:Client 确认了:<strong>自己发送、接收正常</strong>，<strong>对方发送、接收正常</strong>;Server 确认了:<strong>自己接收正常</strong>，<strong>对方发送正常</strong>。</p>\n<p>第三次握手:Client 确认了:<strong>自己发送、接收正常</strong>，<strong>对方发送、接收正常</strong>;Server 确认了:<strong>自己发送、接收正常</strong>，<strong>对方发送、接收正常</strong>。所以三次握手就能确认双发收发功能都正常，缺一不可。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 TCP三次握手 2 四次挥手",content:"# 1 TCP三次握手\n\n第一次握手:Client 什么都不能确认;Server 确认了:对方发送正常，自己接收正常。\n\n第二次握手:Client 确认了:自己发送、接收正常，对方发送、接收正常;Server 确认了:自己接收正常，对方发送正常。\n\n第三次握手:Client 确认了:自己发送、接收正常，对方发送、接收正常;Server 确认了:自己发送、接收正常，对方发送、接收正常。所以三次握手就能确认双发收发功能都正常，缺一不可。\n\n\n# 2 四次挥手\n\n举个例子:A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的 话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道 了”，这样通话才算结束。",normalizedContent:"# 1 tcp三次握手\n\n第一次握手:client 什么都不能确认;server 确认了:对方发送正常，自己接收正常。\n\n第二次握手:client 确认了:自己发送、接收正常，对方发送、接收正常;server 确认了:自己接收正常，对方发送正常。\n\n第三次握手:client 确认了:自己发送、接收正常，对方发送、接收正常;server 确认了:自己发送、接收正常，对方发送、接收正常。所以三次握手就能确认双发收发功能都正常，缺一不可。\n\n\n# 2 四次挥手\n\n举个例子:a 和 b 打电话，通话即将结束后，a 说“我没啥要说的了”，b回答“我知道了”，但是 b 可能还会有要说的 话，a 不能要求 b 跟着自己的节奏结束通话，于是 b 可能又巴拉巴拉说了一通，最后 b 说“我说完了”，a 回答“知道 了”，这样通话才算结束。",charsets:{cjk:!0}},{title:"代理",frontmatter:{title:"代理",date:"2022-05-07T18:21:13.000Z",permalink:"/pages/97f034/",categories:["学习笔记","网络"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.%E7%BD%91%E7%BB%9C/512.%E4%BB%A3%E7%90%86.html",relativePath:"01.学习笔记/50.网络/512.代理.md",key:"v-3eaebf16",path:"/pages/97f034/",headers:[{level:2,title:"正向代理、反向代理",slug:"正向代理、反向代理",normalizedTitle:"正向代理、反向代理",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"正向代理、反向代理",content:"# 正向代理、反向代理\n\n1.正向代理其实是客户端代理，帮助客户端访问其无法访问到的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。\n\n\n2.正向代理一般是客户端架设，比如在自己的机器上安装一个代理软件。反向代理一般是服务器架设的，比如在自己机器集群中部署一个反向代理服务器。\n\n3.正向代理中，服务器不知道真正的客户端到底是谁。反向代理中客户端不知道真正的服务端是谁。\n\n4.正向代理主要用来解决访问限制问题。反向代理则是提供负载均衡、安全防护等作用。\n\nnginx\n\n反向代理：proxy_pass\n\n负载均衡：upstream",normalizedContent:"# 正向代理、反向代理\n\n1.正向代理其实是客户端代理，帮助客户端访问其无法访问到的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。\n\n\n2.正向代理一般是客户端架设，比如在自己的机器上安装一个代理软件。反向代理一般是服务器架设的，比如在自己机器集群中部署一个反向代理服务器。\n\n3.正向代理中，服务器不知道真正的客户端到底是谁。反向代理中客户端不知道真正的服务端是谁。\n\n4.正向代理主要用来解决访问限制问题。反向代理则是提供负载均衡、安全防护等作用。\n\nnginx\n\n反向代理：proxy_pass\n\n负载均衡：upstream",charsets:{cjk:!0}},{title:"架构设计",frontmatter:{title:"架构设计",date:"2022-04-28T18:08:07.000Z",permalink:"/pages/427643/",sticky:3,categories:["学习笔记","系统架构"],tags:["系统架构"],author:{name:"luoxiaofeng"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/60.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/02.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",relativePath:"01.学习笔记/60.系统架构/02.架构设计.md",key:"v-62f31d68",path:"/pages/427643/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:13},{level:2,title:"1 高性能",slug:"_1-高性能",normalizedTitle:"1 高性能",charIndex:80},{level:3,title:"1.1 服务拆分",slug:"_1-1-服务拆分",normalizedTitle:"1.1 服务拆分",charIndex:90},{level:3,title:"1.2 缓存",slug:"_1-2-缓存",normalizedTitle:"1.2 缓存",charIndex:141},{level:3,title:"1.3 消息队列解耦削峰",slug:"_1-3-消息队列解耦削峰",normalizedTitle:"1.3 消息队列解耦削峰",charIndex:184},{level:3,title:"1.4 负载均衡",slug:"_1-4-负载均衡",normalizedTitle:"1.4 负载均衡",charIndex:224},{level:3,title:"1.5 读写分离&分库分表",slug:"_1-5-读写分离-分库分表",normalizedTitle:"1.5 读写分离&amp;分库分表",charIndex:null},{level:4,title:"1.5.1 读写分离会带来的问题",slug:"_1-5-1-读写分离会带来的问题",normalizedTitle:"1.5.1 读写分离会带来的问题",charIndex:371},{level:4,title:"1.5.2 主从复制原理",slug:"_1-5-2-主从复制原理",normalizedTitle:"1.5.2 主从复制原理",charIndex:522},{level:4,title:"1.5.3 分库分表带来的问题",slug:"_1-5-3-分库分表带来的问题",normalizedTitle:"1.5.3 分库分表带来的问题",charIndex:699},{level:4,title:"1.5.4 分库分表后，数据怎么迁移？",slug:"_1-5-4-分库分表后-数据怎么迁移",normalizedTitle:"1.5.4 分库分表后，数据怎么迁移？",charIndex:810},{level:2,title:"2 高可用",slug:"_2-高可用",normalizedTitle:"2 高可用",charIndex:883},{level:3,title:"2.1 衡量高可用",slug:"_2-1-衡量高可用",normalizedTitle:"2.1 衡量高可用",charIndex:893},{level:3,title:"2.2 硬件层面保证高可用",slug:"_2-2-硬件层面保证高可用",normalizedTitle:"2.2 硬件层面保证高可用",charIndex:1120},{level:4,title:"2.2.1 灾备设计",slug:"_2-2-1-灾备设计",normalizedTitle:"2.2.1 灾备设计",charIndex:1137},{level:4,title:"2.2.2 异地多活",slug:"_2-2-2-异地多活",normalizedTitle:"2.2.2 异地多活",charIndex:1228},{level:4,title:"2.2.3 灾备到异地多活的演变过程",slug:"_2-2-3-灾备到异地多活的演变过程",normalizedTitle:"2.2.3 灾备到异地多活的演变过程",charIndex:1297},{level:3,title:"2.3 系统及代码层面保证高可用",slug:"_2-3-系统及代码层面保证高可用",normalizedTitle:"2.3 系统及代码层面保证高可用",charIndex:2015},{level:4,title:"2.3.1 集群",slug:"_2-3-1-集群",normalizedTitle:"2.3.1 集群",charIndex:2035},{level:4,title:"2.3.2 版本可回滚",slug:"_2-3-2-版本可回滚",normalizedTitle:"2.3.2 版本可回滚",charIndex:2061},{level:4,title:"2.3.3 超时重试",slug:"_2-3-3-超时重试",normalizedTitle:"2.3.3 超时重试",charIndex:2105},{level:4,title:"2.3.4 降级",slug:"_2-3-4-降级",normalizedTitle:"2.3.4 降级",charIndex:2131},{level:4,title:"2.3.5 熔断",slug:"_2-3-5-熔断",normalizedTitle:"2.3.5 熔断",charIndex:2196},{level:4,title:"2.3.6 限流",slug:"_2-3-6-限流",normalizedTitle:"2.3.6 限流",charIndex:2268},{level:5,title:"2.3.6.1 常见限流方案",slug:"_2-3-6-1-常见限流方案",normalizedTitle:"2.3.6.1 常见限流方案",charIndex:2280},{level:6,title:"1.计数器法",slug:"_1-计数器法",normalizedTitle:"1.计数器法",charIndex:2298},{level:6,title:"2.漏桶算法",slug:"_2-漏桶算法",normalizedTitle:"2.漏桶算法",charIndex:2461},{level:6,title:"3.令牌桶算法（推荐）",slug:"_3-令牌桶算法-推荐",normalizedTitle:"3.令牌桶算法（推荐）",charIndex:2603},{level:5,title:"2.3.6.2 Guava限流工具类",slug:"_2-3-6-2-guava限流工具类",normalizedTitle:"2.3.6.2 guava限流工具类",charIndex:2782},{level:6,title:"1.说明",slug:"_1-说明",normalizedTitle:"1.说明",charIndex:2804},{level:6,title:"2.代码示例",slug:"_2-代码示例",normalizedTitle:"2.代码示例",charIndex:3270}],excerpt:'<h1 id="系统架构设计"><a class="header-anchor" href="#系统架构设计">#</a> 系统架构设计</h1>\n<h2 id="前言"><a class="header-anchor" href="#前言">#</a> 前言</h2>\n<p>一个好的软件架构，应该遵循<strong>高性能、高可用、易扩展</strong> 3 大原则，其中「高可用」在系统规模变得越来越大时，变得尤为重要。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"前言 1 高性能 1.1 服务拆分 1.2 缓存 1.3 消息队列解耦削峰 1.4 负载均衡 1.5 读写分离&分库分表 1.5.1 读写分离会带来的问题 1.5.2 主从复制原理 1.5.3 分库分表带来的问题 1.5.4 分库分表后，数据怎么迁移？ 2 高可用 2.1 衡量高可用 2.2 硬件层面保证高可用 2.2.1 灾备设计 2.2.2 异地多活 2.2.3 灾备到异地多活的演变过程 2.3 系统及代码层面保证高可用 2.3.1 集群 2.3.2 版本可回滚 2.3.3 超时重试 2.3.4 降级 2.3.5 熔断 2.3.6 限流 2.3.6.1 常见限流方案 1.计数器法 2.漏桶算法 3.令牌桶算法（推荐） 2.3.6.2 Guava限流工具类 1.说明 2.代码示例",content:"# 系统架构设计\n\n\n# 前言\n\n一个好的软件架构，应该遵循高性能、高可用、易扩展 3 大原则，其中「高可用」在系统规模变得越来越大时，变得尤为重要。\n\n\n# 1 高性能\n\n\n# 1.1 服务拆分\n\n按功能纬度、读写维度（如yl-nwm-waybillouter-api）\n\n\n# 1.2 缓存\n\n浏览器缓存、cdn缓存、应用层缓存（redis、内存缓存等）\n\n\n# 1.3 消息队列解耦削峰\n\n运单收发到派签消息通过RabbitMQ发送\n\n\n# 1.4 负载均衡\n\n常见的负载均衡系统包括3种：\n\nDNS负载均衡：一般用来实现地理级别的均衡。\n\n硬件负载均衡：通过独立的硬件设备，比如F5，实现负载均衡功能（硬件价格一般较贵）。\n\n软件负载均衡：通过软件的方式，比如Nginx，实现负载均衡功能。\n\n\n# 1.5 读写分离&分库分表\n\n# 1.5.1 读写分离会带来的问题\n\n主库和从库数据同步存在延迟，写完数据马上读取时可能读不到最新数据。\n\n解决方法：\n\n1.强制将读请求路由到主库处理\n\n比如 Sharding-JDBC，可以通过 HintManager 分片键值管理器强制使用主库。\n\n2.延迟读取\n\n这种方式不太合适 ...\n\n# 1.5.2 主从复制原理\n\n1.主库将数据变化写入binlog。\n\n2.从库创建一个I/O线程向主库请求更新的binlog。\n\n3.主库创建一个线程发送binlog，从库I/O线程负责接收。\n\n4.从库I/O线程接收的binlog写入到relay log中。\n\n5.从库的SQL线程读取relay log同步数据到本地（也就是再执行一遍SQL）。\n\n# 1.5.3 分库分表带来的问题\n\n1.join操作：表分布到不同数据库，导致无法进行连表操作。\n\n2.事务问题：操作不同数据库的表，自带的事务无法支持。\n\n3.分布式id：自增主键等方式无法使用，需引入分布式ID。\n\n# 1.5.4 分库分表后，数据怎么迁移？\n\n使用数据库同步工具 Canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。\n\n\n# 2 高可用\n\n\n# 2.1 衡量高可用\n\n高可用通常通常用两个指标来衡量。\n\n平均故障时间间隔：表示两次故障的时间间隔，也就是系统正常运行平均时间。这个时间越长越稳定。\n\n故障恢复时间：系统发生故障后的恢复时间。这个时间越短，对用户影响越小。\n\n可用性跟这两个指标之间的关系为：\n\n可用性 = 平均故障时间间隔 / (平均故障时间间隔 + 故障恢复时间) * 100%\n\n这个公式得出的结果是一个「比例」，通常我们会用**「N 个 9」**来描述一个系统的可用性。\n\n\n# 2.2 硬件层面保证高可用\n\n# 2.2.1 灾备设计\n\n灾备设计 = 容灾 + 备份\n\n容灾：建立两个相同的系统。当其中一个系统出问题时，可以直接切换另一个系统使用。\n\n备份：将系统产生的重要数据进行备份。\n\n# 2.2.2 异地多活\n\n将服务部署到异地，并且多地服务能同时对外提供服务。\n\n异地多活主要应对突发情况，如火灾、地震、人为灾害等。\n\n# 2.2.3 灾备到异地多活的演变过程\n\n同城灾备分为「冷备」和「热备」，「冷备」只备份数据，不提供服务。「热备」实时同步数据，做好随时切换的准备。\n\n同城双活比同城灾备的优势在于，两个机房都可以接入「读写」流量。提高可用性的同时也提高系统性能。（由于机房部署同一城市，可不考虑网络延迟问题。光纤传输的速度大概为 300km/ms）\n\n两地三中心是在同城双活基础上再部署一个异地机房做「灾备」，用来抵御「城市」级别的灾害。但启用灾备机房需要耗费一定时间。（两地是指两个城市，三中心是指三个机房）\n\n异地双活才是抵御「城市」级别灾害的更好方案。异地两个机房同时提供服务，有故障随时切换，可用性高。但是实现也很复杂。异地双活要两个机房都可以读写（不同城市的两个机房如果只有一个机房数据库做主库，会导致另一个只读的机房查数据延迟很高）。MySQL本身提供了双主架构，支持双向复制数据，但是像redis、mq等都不支持双向同步数据，需要另外开发。\n\n此外，还需要在业务上将数据区分开，保证指定数据操作指定机房，避免各种脏数据的产生。这样，需要在接入层之上再部署一个**「路由层」（通常部署在云服务器上）**，自己可以配置不同路由规则，将用户分流到不同的机房内。\n\n异地多活是在异地双活的基础上扩展多个机房，这样不仅保证了高可用，还保证了高性能，可以应对更大规模的流量压力。是实现高可用的最终方案。\n\n这种星状的方案必须要设立一个**「中心机房」**，任意机房写入数据后要先同步到中心机房，再由中心机房同步到其他机房。中心机房的稳定性要求比较高，不过中心机房如果发生故障的话，可以把任意一个机房提升为中心机房，继续按照之前的架构提供服务。\n\n\n# 2.3 系统及代码层面保证高可用\n\n# 2.3.1 集群\n\n使用集群，减少单点故障。\n\n# 2.3.2 版本可回滚\n\n应用部署支持版本回滚。\n\n数据库脚本也需要有回滚脚本。\n\n# 2.3.3 超时重试\n\n重试次数一般为3次。\n\n# 2.3.4 降级\n\n同步改异步（如同步导出通过配置调整成异步导出）。\n\n直接读缓存（关键功能本来查库的调整成临时查缓存）。\n\n# 2.3.5 熔断\n\n熔断和降级是两个容易混淆的概念，这两者的含义并不一样。\n\n降级针对的是自身系统的故障，而熔断是要应对其他系统的故障。\n\n# 2.3.6 限流\n\n# 2.3.6.1 常见限流方案\n\n# 1.计数器法\n\n原理：在单位时间段内，对请求数进行计数，如果数量超过了单位时间的限制，则执行限流策略，当单位时间结束后，计数器清零，这个过程周而复始，就是计数器法。\n\n缺点：不能均衡限流，在一个单位时间的末尾和下一个单位时间的开始，很可能会有两个访问的峰值，导致系统崩溃。\n\n改进方式：可以通过减小单位时间来提高精度。\n\n# 2.漏桶算法\n\n原理：假设有一个水桶，水桶有一定的容量，所有请求不论速度都会注入到水桶中，然后水桶以一个恒定的速度向外将请求放出，当水桶满了的时候，新的请求被丢弃。\n\n优点：可以平滑请求，削减峰值。\n\n缺点：瓶颈会在漏出的速度，可能会拖慢整个系统，且不能有效地利用系统的资源。\n\n# 3.令牌桶算法（推荐）\n\n原理：有一个令牌桶，单位时间内令牌会以恒定的数量（即令牌的加入速度）加入到令牌桶中，所有请求都需要获取令牌才可正常访问。当令牌桶中没有令牌可取的时候，则拒绝请求。\n\n优点：相比漏桶算法，令牌桶算法允许一定的突发流量，但是又不会让突发流量超过我们给定的限制（单位时间窗口内的令牌数）。即限制了我们所说的 QPS(每秒查询率)。\n\n# 2.3.6.2 Guava限流工具类\n\n# 1.说明\n\nGoogle开源工具包Guava提供了限流工具类RateLimiter，基于令牌桶算法实现。\n\n常用方法：\n\ncreate(Double permitsPerSecond) 方法根据参数（令牌:单位时间（1s））比例为令牌生成速率。\ntryAcquire() 方法尝试获取一个令牌，立即返回true/false，不阻塞，重载方法具备设置获取令牌个数、获取最大等待时间等参数。\nacquire() 方法与tryAcquire类似，但是会阻塞，尝试获取一个令牌，没有时则阻塞直到获取成功。\n\n可能有人在想既然是令牌桶算法，应该有个类似定时器的东东来持续往桶放令牌才对啊，我刚开始也是这么想的，看了代码觉得自己还是太嫩了，如果开启一个定时器无可厚非，但如果系统需要N个不同速率的桶来针对不同的场景或用户，就会极大的消耗系统资源。\n\nRateLimiter用了一种类似于延迟计算的方法，把桶里令牌数量的计算放在下一个请求中计算，即桶里的令牌数 storedPermits 不是实时更新的，而是等到下一个请求过来时才更新。\n\n# 2.代码示例\n\n需关注好服务监控指标，如qps，响应时间，tomcat线程信息等（acceptcount,maxConnections）",normalizedContent:"# 系统架构设计\n\n\n# 前言\n\n一个好的软件架构，应该遵循高性能、高可用、易扩展 3 大原则，其中「高可用」在系统规模变得越来越大时，变得尤为重要。\n\n\n# 1 高性能\n\n\n# 1.1 服务拆分\n\n按功能纬度、读写维度（如yl-nwm-waybillouter-api）\n\n\n# 1.2 缓存\n\n浏览器缓存、cdn缓存、应用层缓存（redis、内存缓存等）\n\n\n# 1.3 消息队列解耦削峰\n\n运单收发到派签消息通过rabbitmq发送\n\n\n# 1.4 负载均衡\n\n常见的负载均衡系统包括3种：\n\ndns负载均衡：一般用来实现地理级别的均衡。\n\n硬件负载均衡：通过独立的硬件设备，比如f5，实现负载均衡功能（硬件价格一般较贵）。\n\n软件负载均衡：通过软件的方式，比如nginx，实现负载均衡功能。\n\n\n# 1.5 读写分离&分库分表\n\n# 1.5.1 读写分离会带来的问题\n\n主库和从库数据同步存在延迟，写完数据马上读取时可能读不到最新数据。\n\n解决方法：\n\n1.强制将读请求路由到主库处理\n\n比如 sharding-jdbc，可以通过 hintmanager 分片键值管理器强制使用主库。\n\n2.延迟读取\n\n这种方式不太合适 ...\n\n# 1.5.2 主从复制原理\n\n1.主库将数据变化写入binlog。\n\n2.从库创建一个i/o线程向主库请求更新的binlog。\n\n3.主库创建一个线程发送binlog，从库i/o线程负责接收。\n\n4.从库i/o线程接收的binlog写入到relay log中。\n\n5.从库的sql线程读取relay log同步数据到本地（也就是再执行一遍sql）。\n\n# 1.5.3 分库分表带来的问题\n\n1.join操作：表分布到不同数据库，导致无法进行连表操作。\n\n2.事务问题：操作不同数据库的表，自带的事务无法支持。\n\n3.分布式id：自增主键等方式无法使用，需引入分布式id。\n\n# 1.5.4 分库分表后，数据怎么迁移？\n\n使用数据库同步工具 canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。\n\n\n# 2 高可用\n\n\n# 2.1 衡量高可用\n\n高可用通常通常用两个指标来衡量。\n\n平均故障时间间隔：表示两次故障的时间间隔，也就是系统正常运行平均时间。这个时间越长越稳定。\n\n故障恢复时间：系统发生故障后的恢复时间。这个时间越短，对用户影响越小。\n\n可用性跟这两个指标之间的关系为：\n\n可用性 = 平均故障时间间隔 / (平均故障时间间隔 + 故障恢复时间) * 100%\n\n这个公式得出的结果是一个「比例」，通常我们会用**「n 个 9」**来描述一个系统的可用性。\n\n\n# 2.2 硬件层面保证高可用\n\n# 2.2.1 灾备设计\n\n灾备设计 = 容灾 + 备份\n\n容灾：建立两个相同的系统。当其中一个系统出问题时，可以直接切换另一个系统使用。\n\n备份：将系统产生的重要数据进行备份。\n\n# 2.2.2 异地多活\n\n将服务部署到异地，并且多地服务能同时对外提供服务。\n\n异地多活主要应对突发情况，如火灾、地震、人为灾害等。\n\n# 2.2.3 灾备到异地多活的演变过程\n\n同城灾备分为「冷备」和「热备」，「冷备」只备份数据，不提供服务。「热备」实时同步数据，做好随时切换的准备。\n\n同城双活比同城灾备的优势在于，两个机房都可以接入「读写」流量。提高可用性的同时也提高系统性能。（由于机房部署同一城市，可不考虑网络延迟问题。光纤传输的速度大概为 300km/ms）\n\n两地三中心是在同城双活基础上再部署一个异地机房做「灾备」，用来抵御「城市」级别的灾害。但启用灾备机房需要耗费一定时间。（两地是指两个城市，三中心是指三个机房）\n\n异地双活才是抵御「城市」级别灾害的更好方案。异地两个机房同时提供服务，有故障随时切换，可用性高。但是实现也很复杂。异地双活要两个机房都可以读写（不同城市的两个机房如果只有一个机房数据库做主库，会导致另一个只读的机房查数据延迟很高）。mysql本身提供了双主架构，支持双向复制数据，但是像redis、mq等都不支持双向同步数据，需要另外开发。\n\n此外，还需要在业务上将数据区分开，保证指定数据操作指定机房，避免各种脏数据的产生。这样，需要在接入层之上再部署一个**「路由层」（通常部署在云服务器上）**，自己可以配置不同路由规则，将用户分流到不同的机房内。\n\n异地多活是在异地双活的基础上扩展多个机房，这样不仅保证了高可用，还保证了高性能，可以应对更大规模的流量压力。是实现高可用的最终方案。\n\n这种星状的方案必须要设立一个**「中心机房」**，任意机房写入数据后要先同步到中心机房，再由中心机房同步到其他机房。中心机房的稳定性要求比较高，不过中心机房如果发生故障的话，可以把任意一个机房提升为中心机房，继续按照之前的架构提供服务。\n\n\n# 2.3 系统及代码层面保证高可用\n\n# 2.3.1 集群\n\n使用集群，减少单点故障。\n\n# 2.3.2 版本可回滚\n\n应用部署支持版本回滚。\n\n数据库脚本也需要有回滚脚本。\n\n# 2.3.3 超时重试\n\n重试次数一般为3次。\n\n# 2.3.4 降级\n\n同步改异步（如同步导出通过配置调整成异步导出）。\n\n直接读缓存（关键功能本来查库的调整成临时查缓存）。\n\n# 2.3.5 熔断\n\n熔断和降级是两个容易混淆的概念，这两者的含义并不一样。\n\n降级针对的是自身系统的故障，而熔断是要应对其他系统的故障。\n\n# 2.3.6 限流\n\n# 2.3.6.1 常见限流方案\n\n# 1.计数器法\n\n原理：在单位时间段内，对请求数进行计数，如果数量超过了单位时间的限制，则执行限流策略，当单位时间结束后，计数器清零，这个过程周而复始，就是计数器法。\n\n缺点：不能均衡限流，在一个单位时间的末尾和下一个单位时间的开始，很可能会有两个访问的峰值，导致系统崩溃。\n\n改进方式：可以通过减小单位时间来提高精度。\n\n# 2.漏桶算法\n\n原理：假设有一个水桶，水桶有一定的容量，所有请求不论速度都会注入到水桶中，然后水桶以一个恒定的速度向外将请求放出，当水桶满了的时候，新的请求被丢弃。\n\n优点：可以平滑请求，削减峰值。\n\n缺点：瓶颈会在漏出的速度，可能会拖慢整个系统，且不能有效地利用系统的资源。\n\n# 3.令牌桶算法（推荐）\n\n原理：有一个令牌桶，单位时间内令牌会以恒定的数量（即令牌的加入速度）加入到令牌桶中，所有请求都需要获取令牌才可正常访问。当令牌桶中没有令牌可取的时候，则拒绝请求。\n\n优点：相比漏桶算法，令牌桶算法允许一定的突发流量，但是又不会让突发流量超过我们给定的限制（单位时间窗口内的令牌数）。即限制了我们所说的 qps(每秒查询率)。\n\n# 2.3.6.2 guava限流工具类\n\n# 1.说明\n\ngoogle开源工具包guava提供了限流工具类ratelimiter，基于令牌桶算法实现。\n\n常用方法：\n\ncreate(double permitspersecond) 方法根据参数（令牌:单位时间（1s））比例为令牌生成速率。\ntryacquire() 方法尝试获取一个令牌，立即返回true/false，不阻塞，重载方法具备设置获取令牌个数、获取最大等待时间等参数。\nacquire() 方法与tryacquire类似，但是会阻塞，尝试获取一个令牌，没有时则阻塞直到获取成功。\n\n可能有人在想既然是令牌桶算法，应该有个类似定时器的东东来持续往桶放令牌才对啊，我刚开始也是这么想的，看了代码觉得自己还是太嫩了，如果开启一个定时器无可厚非，但如果系统需要n个不同速率的桶来针对不同的场景或用户，就会极大的消耗系统资源。\n\nratelimiter用了一种类似于延迟计算的方法，把桶里令牌数量的计算放在下一个请求中计算，即桶里的令牌数 storedpermits 不是实时更新的，而是等到下一个请求过来时才更新。\n\n# 2.代码示例\n\n需关注好服务监控指标，如qps，响应时间，tomcat线程信息等（acceptcount,maxconnections）",charsets:{cjk:!0}},{title:"分布式",frontmatter:{title:"分布式",date:"2022-04-28T18:10:01.000Z",permalink:"/pages/c0fe60/",categories:["学习笔记","系统架构"],tags:["系统架构"],author:{name:"luoxiaofeng"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/60.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/603.%E5%88%86%E5%B8%83%E5%BC%8F.html",relativePath:"01.学习笔记/60.系统架构/603.分布式.md",key:"v-03b93eb2",path:"/pages/c0fe60/",headers:[{level:2,title:"1 RPC的工作过程",slug:"_1-rpc的工作过程",normalizedTitle:"1 rpc的工作过程",charIndex:2},{level:2,title:"2 雪花算法",slug:"_2-雪花算法",normalizedTitle:"2 雪花算法",charIndex:501},{level:2,title:"3 什么是跨域？跨域问题怎么解决？",slug:"_3-什么是跨域-跨域问题怎么解决",normalizedTitle:"3 什么是跨域？跨域问题怎么解决？",charIndex:946},{level:2,title:"4 CAP理论，Eureka与Zookeeper区别？",slug:"_4-cap理论-eureka与zookeeper区别",normalizedTitle:"4 cap理论，eureka与zookeeper区别？",charIndex:1145},{level:2,title:"5 SOA和微服务架构的区别？",slug:"_5-soa和微服务架构的区别",normalizedTitle:"5 soa和微服务架构的区别？",charIndex:1710}],excerpt:'<h2 id="_1-rpc的工作过程"><a class="header-anchor" href="#_1-rpc的工作过程">#</a> 1 RPC的工作过程</h2>\n<p>RPC(Remote Procedure Call)即远程过程调用，允许一台计算机调用另一台计算机上的程序得到结果，而代码中不需要做额外的编程，就像在本地调用一样。</p>\n<p>现在互联网应用的量级越来越大，单台计算机的能力有限，需要借助可扩展的计算机集群来完成，分布式的应用可以借助RPC来完成机器之间的调用。</p>\n<p><strong>在RPC框架中主要有三个角色：Provider、Consumer和Registry。如下图所示：</strong></p>\n<p><strong><img src="/img/media/90f0ea4d5cb045235d28b7623fd99388.png" class="imgcss" width="50%"></strong></p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 RPC的工作过程 2 雪花算法 3 什么是跨域？跨域问题怎么解决？ 4 CAP理论，Eureka与Zookeeper区别？ 5 SOA和微服务架构的区别？",content:"# 1 RPC的工作过程\n\nRPC(Remote Procedure Call)即远程过程调用，允许一台计算机调用另一台计算机上的程序得到结果，而代码中不需要做额外的编程，就像在本地调用一样。\n\n现在互联网应用的量级越来越大，单台计算机的能力有限，需要借助可扩展的计算机集群来完成，分布式的应用可以借助RPC来完成机器之间的调用。\n\n在RPC框架中主要有三个角色：Provider、Consumer和Registry。如下图所示：\n\n\n\nRPC调用流程:\n\n1）服务消费方（client）调用以本地调用方式调用服务；\n\n2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；\n\n3）client stub找到服务地址，并将消息发送到服务端；\n\n4）server stub收到消息后进行解码；\n\n5）server stub根据解码结果调用本地的服务；\n\n6）本地服务执行并将结果返回给server stub；\n\n7）server stub将返回结果打包成消息并发送至消费方；\n\n8）client stub接收到消息，并进行解码；\n\n9）服务消费方得到最终结果。\n\n\n# 2 雪花算法\n\n41bit时间戳：这里采用的就是当前系统的具体时间，单位为毫秒。\n\n10bit工作机器ID（workerId）：每台机器分配一个id，标示不同的机器，上限1024，标示一个集群某个业务最多部署的机器个数上限。\n\n12bit序列号（自增域）：表示在某一毫秒下，这个自增域最大可以分配的bit个数，在当前这种配置下，每一毫秒可以分配2^12个数据，也就是说QPS可以到 409.6 w/s。\n\n存在问题\n\n时间回拨问题：由于机器的时间是动态的调整的，有可能会出现时间跑到之前几毫秒，如果这个时候获取到了这种时间，则会出现数据重复。\n\n机器id分配及回收问题：目前机器id需要每台机器不一样，这样的方式分配需要有方案进行处理，同时也要考虑，如果改机器宕机了，对应的workerId分配后的回收问题。\n\n机器id上限：机器id是固定的bit，那么也就是对应的机器个数是有上限的，在有些业务场景下，需要所有机器共享同一个业务空间，那么10bit表示的1024台机器是不够的。\n\n\n# 3 什么是跨域？跨域问题怎么解决？\n\n协议、域名、端口号有一个不一样就是跨域。\n\n跨域：跨域访问，简单来说就是A网站的javascript代码试图访问B网站，包括提交内容和获取内容。由于安全原因，跨域访问是被各大浏览器所默认禁止的。\n\n目前我了解的解决跨域的几种方式：\n\n1）手写过滤器\n\n2）手写拦截器\n\n3）jsonp\n\n4）注解方式\n\n5）配置nginx反向代理\n\n共五种解决方式。\n\n\n# 4 CAP理论，Eureka与Zookeeper区别？\n\n著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性Consistency)、A(可用性Availability)和P(分区容错性Partition tolerance)。\n由于分区容错性在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。\n在此Zookeeper保证的是CP, 而Eureka则是AP。\n1）当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。\n但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。\n问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。\n2）Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。\n而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。\n\n\n# 5 SOA和微服务架构的区别？\n\nSOA (全称:Service Oriented Architecture)\n\n一、架构划分不同\n\n1、SOA强调按水平架构划分为：前、后端、数据库、测试等；\n\n2、微服务强调按垂直架构划分，按业务能力划分，每个服务完成一种特定的功能，服务即产品。\n\n二、技术平台选择不同\n\n1、SOA应用倾向于使用统一的技术平台来解决所有问题；\n\n2、微服务可以针对不同业务特征选择不同技术平台，去中心统一化，发挥各种技术平台的特长。\n\n三、系统间边界处理机制不同\n\n1、SOA架构强调的是异构系统之间的通信和解耦合；（一种粗粒度、松耦合的服务架构）；\n\n2、微服务架构强调的是系统按业务边界做细粒度的拆分和部署。\n\n四、主要目标不同\n\n1、SOA架构，主要目标是确保应用能够交互操作；\n\n2、微服务架构，主要目标是实现新功能、并可以快速拓展开发团队。",normalizedContent:"# 1 rpc的工作过程\n\nrpc(remote procedure call)即远程过程调用，允许一台计算机调用另一台计算机上的程序得到结果，而代码中不需要做额外的编程，就像在本地调用一样。\n\n现在互联网应用的量级越来越大，单台计算机的能力有限，需要借助可扩展的计算机集群来完成，分布式的应用可以借助rpc来完成机器之间的调用。\n\n在rpc框架中主要有三个角色：provider、consumer和registry。如下图所示：\n\n\n\nrpc调用流程:\n\n1）服务消费方（client）调用以本地调用方式调用服务；\n\n2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；\n\n3）client stub找到服务地址，并将消息发送到服务端；\n\n4）server stub收到消息后进行解码；\n\n5）server stub根据解码结果调用本地的服务；\n\n6）本地服务执行并将结果返回给server stub；\n\n7）server stub将返回结果打包成消息并发送至消费方；\n\n8）client stub接收到消息，并进行解码；\n\n9）服务消费方得到最终结果。\n\n\n# 2 雪花算法\n\n41bit时间戳：这里采用的就是当前系统的具体时间，单位为毫秒。\n\n10bit工作机器id（workerid）：每台机器分配一个id，标示不同的机器，上限1024，标示一个集群某个业务最多部署的机器个数上限。\n\n12bit序列号（自增域）：表示在某一毫秒下，这个自增域最大可以分配的bit个数，在当前这种配置下，每一毫秒可以分配2^12个数据，也就是说qps可以到 409.6 w/s。\n\n存在问题\n\n时间回拨问题：由于机器的时间是动态的调整的，有可能会出现时间跑到之前几毫秒，如果这个时候获取到了这种时间，则会出现数据重复。\n\n机器id分配及回收问题：目前机器id需要每台机器不一样，这样的方式分配需要有方案进行处理，同时也要考虑，如果改机器宕机了，对应的workerid分配后的回收问题。\n\n机器id上限：机器id是固定的bit，那么也就是对应的机器个数是有上限的，在有些业务场景下，需要所有机器共享同一个业务空间，那么10bit表示的1024台机器是不够的。\n\n\n# 3 什么是跨域？跨域问题怎么解决？\n\n协议、域名、端口号有一个不一样就是跨域。\n\n跨域：跨域访问，简单来说就是a网站的javascript代码试图访问b网站，包括提交内容和获取内容。由于安全原因，跨域访问是被各大浏览器所默认禁止的。\n\n目前我了解的解决跨域的几种方式：\n\n1）手写过滤器\n\n2）手写拦截器\n\n3）jsonp\n\n4）注解方式\n\n5）配置nginx反向代理\n\n共五种解决方式。\n\n\n# 4 cap理论，eureka与zookeeper区别？\n\n著名的cap理论指出，一个分布式系统不可能同时满足c(一致性consistency)、a(可用性availability)和p(分区容错性partition tolerance)。\n由于分区容错性在是分布式系统中必须要保证的，因此我们只能在a和c之间进行权衡。\n在此zookeeper保证的是cp, 而eureka则是ap。\n1）当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。\n但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。\n问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。\n2）eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。\n而eureka的客户端在向某个eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。\n\n\n# 5 soa和微服务架构的区别？\n\nsoa (全称:service oriented architecture)\n\n一、架构划分不同\n\n1、soa强调按水平架构划分为：前、后端、数据库、测试等；\n\n2、微服务强调按垂直架构划分，按业务能力划分，每个服务完成一种特定的功能，服务即产品。\n\n二、技术平台选择不同\n\n1、soa应用倾向于使用统一的技术平台来解决所有问题；\n\n2、微服务可以针对不同业务特征选择不同技术平台，去中心统一化，发挥各种技术平台的特长。\n\n三、系统间边界处理机制不同\n\n1、soa架构强调的是异构系统之间的通信和解耦合；（一种粗粒度、松耦合的服务架构）；\n\n2、微服务架构强调的是系统按业务边界做细粒度的拆分和部署。\n\n四、主要目标不同\n\n1、soa架构，主要目标是确保应用能够交互操作；\n\n2、微服务架构，主要目标是实现新功能、并可以快速拓展开发团队。",charsets:{cjk:!0}},{title:"机器评估",frontmatter:{title:"机器评估",date:"2022-05-07T23:24:26.000Z",permalink:"/pages/68d51a/",categories:["学习笔记","系统架构"],tags:["系统架构","tomcat"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/01.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/60.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/606.%E6%9C%BA%E5%99%A8%E8%AF%84%E4%BC%B0.html",relativePath:"01.学习笔记/60.系统架构/606.机器评估.md",key:"v-2eb0b0ea",path:"/pages/68d51a/",headers:[{level:2,title:"1 pv｜qps｜tps",slug:"_1-pv-qps-tps",normalizedTitle:"1 pv｜qps｜tps",charIndex:2},{level:2,title:"2 如何进行容量设计",slug:"_2-如何进行容量设计",normalizedTitle:"2 如何进行容量设计",charIndex:558},{level:2,title:"3 tomcat",slug:"_3-tomcat",normalizedTitle:"3 tomcat",charIndex:1060},{level:3,title:"3.1 tomcat支持多少并发量",slug:"_3-1-tomcat支持多少并发量",normalizedTitle:"3.1 tomcat支持多少并发量",charIndex:1073},{level:3,title:"3.2 tomcat参数",slug:"_3-2-tomcat参数",normalizedTitle:"3.2 tomcat参数",charIndex:1508}],excerpt:'<h2 id="_1-pv-qps-tps"><a class="header-anchor" href="#_1-pv-qps-tps">#</a> 1 pv｜qps｜tps</h2>\n<p><strong>pv</strong> Page view，即页面浏览量。</p>\n<p><strong>qps</strong> Queries Per Second 秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。</p>\n\x3c!--beforebegin--\x3e<div class="language- line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-text"><code>每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间\n\n公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)\n\n机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器\n\n问：每天300w PV 的在单台机器上，这台机器需要多少QPS？\n\n答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)\n\n问：如果一台机器的QPS是58，需要几台机器来支持？\n\n答：139 / 58 = 3\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p><strong>tps</strong> Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。</p>\n<p>一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 pv｜qps｜tps 2 如何进行容量设计 3 tomcat 3.1 tomcat支持多少并发量 3.2 tomcat参数",content:"# 1 pv｜qps｜tps\n\npv Page view，即页面浏览量。\n\nqps Queries Per Second 秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。\n\n每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间\n\n公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)\n\n机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器\n\n问：每天300w PV 的在单台机器上，这台机器需要多少QPS？\n\n答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)\n\n问：如果一台机器的QPS是58，需要几台机器来支持？\n\n答：139 / 58 = 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\ntps Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。\n\n一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。\n\n\n# 2 如何进行容量设计\n\n**1.评估总访问量：**询问业务、产品、运营\n\n2.评估平均QPS：假设按天来计算，\n\n1天的总访问量（假设8000w） / 12小时（假设只有白天有流量）\n\n= 8000w / 约4万秒\n\n= 2000QPS\n\n3.评估高峰的QPS：需要根据具体业务特性，通过业务访问曲线来评估，\n\n如：\n\n峰值QPS约为平均QPS的2.5倍，即2000 * 2.5 = 5000QPS\n\n4.评估系统、单机的极限QPS：需要通过压测\n\n假设系统架构如上图，5000QPS的1%流量打到mysql，即500QPS，mysql还是可以轻松应对，另外99%打到redis也没有任何问题。则需要考虑的主要在web层，tomcat能不能扛的住。假设通过压测发现tomcat能扛1200QPS，线上系统一般不会泡满到极限，大概打个8折，差不多1000QPS。所以单机线上允许跑1000QPS。\n\n5.线上机器评估：假设线上部署了2台机器，\n\n1）机器能扛得住吗：峰值5000QPS，单机能扛1000QPS，2台机器扛不住。\n\n2）扛不住要加多少机器：需要额外3台，另外预留多1台，给4台更稳。\n\n\n# 3 tomcat\n\n\n# 3.1 tomcat支持多少并发量\n\nTomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。\n\nTomcat默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。Tomcat 默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。\n\n当某个应用拥有 250 个以上并发的时候，应考虑应用服务器的集群。\n\n操作系统对于进程中的线程数有一定的限制：\n\nWindows 每个进程中的线程数不允许超过 2000\n\nLinux 每个进程中的线程数不允许超过 1000\n\n在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。\n\n\n# 3.2 tomcat参数\n\nmaxConnections、maxThreads、acceptCount关系\n\n用一个形象的比喻，通俗易懂的解释一下tomcat的最大线程数（maxThreads）、**最大等待数（acceptCount）和最大连接数（maxConnections）**三者之间的关系。\n\n我们可以把tomcat比做一个火锅店，流程是取号、入座、叫服务员，可以做一下三个形象的类比：\n\n（1）acceptCount 最大等待数\n\n可以类比为火锅店的排号处能够容纳排号的最大数量；排号的数量不是无限制的，火锅店的排号到了一定数据量之后，服务往往会说：已经客满。\n\n（2）maxConnections 最大连接数\n\n可以类比为火锅店的大堂的餐桌数量，也就是可以就餐的桌数。如果所有的桌子都已经坐满，则表示餐厅已满，已经达到了服务的数量上线，不能再有顾客进入餐厅了。\n\n（3）maxThreads：最大线程数\n\n可以类比为厨师的个数。每一个厨师，在同一时刻，只能给一张餐桌炒菜，就像极了JVM中的一条线程。\n\n整个就餐的流程，大致如下：\n\n（1）取号：\n\n如果maxConnections连接数没有满，就不需要取号，因为还有空余的餐桌，直接被大堂服务员领上餐桌，就餐即可。\n\n如果 maxConnections 连接数满了，但是取号人数没有达到 acceptCount，则取号成功。如果取号人数已达到acceptCount，则拿号失败，会得到Tomcat的Connection refused connect 的回复信息。\n\n（2）上桌：如果有餐桌空出来了，表示maxConnections连接数没有满，排队的人，可以进入大堂上桌就餐。\n\n（3）就餐：就餐需要厨师炒菜。厨师的数量，比顾客的数量，肯定会少一些。一个厨师一定需要给多张餐桌炒菜，如果就餐的人越多，厨师也会忙不过来。这时候就可以增加厨师，一增加到上限maxThreads的值，如果还是不够，只能是拖慢每一张餐桌的上菜速度，这种情况，就是大家常见的“上一道菜吃光了，下一道菜还没有上”尴尬场景。",normalizedContent:"# 1 pv｜qps｜tps\n\npv page view，即页面浏览量。\n\nqps queries per second 秒查询率qps是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。\n\n每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间\n\n公式：( 总pv数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(qps)\n\n机器：峰值时间每秒qps / 单台机器的qps = 需要的机器\n\n问：每天300w pv 的在单台机器上，这台机器需要多少qps？\n\n答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (qps)\n\n问：如果一台机器的qps是58，需要几台机器来支持？\n\n答：139 / 58 = 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\ntps transactions per second（每秒传输的事物处理个数），即服务器每秒处理的事务数。tps包括一条消息入和一条消息出，加上一次用户数据库访问。\n\n一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的tps值。\n\n\n# 2 如何进行容量设计\n\n**1.评估总访问量：**询问业务、产品、运营\n\n2.评估平均qps：假设按天来计算，\n\n1天的总访问量（假设8000w） / 12小时（假设只有白天有流量）\n\n= 8000w / 约4万秒\n\n= 2000qps\n\n3.评估高峰的qps：需要根据具体业务特性，通过业务访问曲线来评估，\n\n如：\n\n峰值qps约为平均qps的2.5倍，即2000 * 2.5 = 5000qps\n\n4.评估系统、单机的极限qps：需要通过压测\n\n假设系统架构如上图，5000qps的1%流量打到mysql，即500qps，mysql还是可以轻松应对，另外99%打到redis也没有任何问题。则需要考虑的主要在web层，tomcat能不能扛的住。假设通过压测发现tomcat能扛1200qps，线上系统一般不会泡满到极限，大概打个8折，差不多1000qps。所以单机线上允许跑1000qps。\n\n5.线上机器评估：假设线上部署了2台机器，\n\n1）机器能扛得住吗：峰值5000qps，单机能扛1000qps，2台机器扛不住。\n\n2）扛不住要加多少机器：需要额外3台，另外预留多1台，给4台更稳。\n\n\n# 3 tomcat\n\n\n# 3.1 tomcat支持多少并发量\n\ntomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和cpu数量都有很大关系的。更好的硬件，更多的处理器都会使tomcat支持更多的并发。\n\ntomcat默认的http实现是采用阻塞式的socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。tomcat 默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，cpu越多性能越高，分配给jvm的内存越多性能也就越高，但也会加重gc的负担。\n\n当某个应用拥有 250 个以上并发的时候，应考虑应用服务器的集群。\n\n操作系统对于进程中的线程数有一定的限制：\n\nwindows 每个进程中的线程数不允许超过 2000\n\nlinux 每个进程中的线程数不允许超过 1000\n\n在java中每开启一个线程需要耗用1mb的jvm内存空间用于作为线程栈之用，此处也应考虑。\n\n\n# 3.2 tomcat参数\n\nmaxconnections、maxthreads、acceptcount关系\n\n用一个形象的比喻，通俗易懂的解释一下tomcat的最大线程数（maxthreads）、**最大等待数（acceptcount）和最大连接数（maxconnections）**三者之间的关系。\n\n我们可以把tomcat比做一个火锅店，流程是取号、入座、叫服务员，可以做一下三个形象的类比：\n\n（1）acceptcount 最大等待数\n\n可以类比为火锅店的排号处能够容纳排号的最大数量；排号的数量不是无限制的，火锅店的排号到了一定数据量之后，服务往往会说：已经客满。\n\n（2）maxconnections 最大连接数\n\n可以类比为火锅店的大堂的餐桌数量，也就是可以就餐的桌数。如果所有的桌子都已经坐满，则表示餐厅已满，已经达到了服务的数量上线，不能再有顾客进入餐厅了。\n\n（3）maxthreads：最大线程数\n\n可以类比为厨师的个数。每一个厨师，在同一时刻，只能给一张餐桌炒菜，就像极了jvm中的一条线程。\n\n整个就餐的流程，大致如下：\n\n（1）取号：\n\n如果maxconnections连接数没有满，就不需要取号，因为还有空余的餐桌，直接被大堂服务员领上餐桌，就餐即可。\n\n如果 maxconnections 连接数满了，但是取号人数没有达到 acceptcount，则取号成功。如果取号人数已达到acceptcount，则拿号失败，会得到tomcat的connection refused connect 的回复信息。\n\n（2）上桌：如果有餐桌空出来了，表示maxconnections连接数没有满，排队的人，可以进入大堂上桌就餐。\n\n（3）就餐：就餐需要厨师炒菜。厨师的数量，比顾客的数量，肯定会少一些。一个厨师一定需要给多张餐桌炒菜，如果就餐的人越多，厨师也会忙不过来。这时候就可以增加厨师，一增加到上限maxthreads的值，如果还是不够，只能是拖慢每一张餐桌的上菜速度，这种情况，就是大家常见的“上一道菜吃光了，下一道菜还没有上”尴尬场景。",charsets:{cjk:!0}},{title:"ES查询压测",frontmatter:{title:"ES查询压测",date:"2022-04-29T18:31:15.000Z",permalink:"/pages/6e6e98/",sticky:1,categories:["技术应用","工作杂货"],tags:["测试"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/02.ES%E6%9F%A5%E8%AF%A2%E5%8E%8B%E6%B5%8B.html",relativePath:"02.技术应用/01.工作杂货/02.ES查询压测.md",key:"v-e6b0d9dc",path:"/pages/6e6e98/",headers:[{level:2,title:"1 概述",slug:"_1-概述",normalizedTitle:"1 概述",charIndex:2},{level:2,title:"2 测试环境及工具",slug:"_2-测试环境及工具",normalizedTitle:"2 测试环境及工具",charIndex:43},{level:2,title:"3 测试类型",slug:"_3-测试类型",normalizedTitle:"3 测试类型",charIndex:144},{level:3,title:"3.1 按单号查询-6字段",slug:"_3-1-按单号查询-6字段",normalizedTitle:"3.1 按单号查询-6字段",charIndex:155},{level:4,title:"3.1.1 按单号查询-145字段",slug:"_3-1-1-按单号查询-145字段",normalizedTitle:"3.1.1 按单号查询-145字段",charIndex:557},{level:3,title:"3.2 按时间范围查询-6字段",slug:"_3-2-按时间范围查询-6字段",normalizedTitle:"3.2 按时间范围查询-6字段",charIndex:696},{level:4,title:"3.2.1 按时间范围查询-145字段",slug:"_3-2-1-按时间范围查询-145字段",normalizedTitle:"3.2.1 按时间范围查询-145字段",charIndex:1136},{level:2,title:"4 测试结果与分析",slug:"_4-测试结果与分析",normalizedTitle:"4 测试结果与分析",charIndex:1283}],excerpt:'<h2 id="_1-概述"><a class="header-anchor" href="#_1-概述">#</a> 1 概述</h2>\n<p>测试ES在各个数据体量下,单号查询,时间范围查询的性能指标。</p>\n<h2 id="_2-测试环境及工具"><a class="header-anchor" href="#_2-测试环境及工具">#</a> 2 测试环境及工具</h2>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">数据库</th>\n<th style="text-align:left">版本</th>\n<th style="text-align:left">硬件</th>\n<th style="text-align:left">测试工具</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">Elasticsearch</td>\n<td style="text-align:left">6.8.1</td>\n<td style="text-align:left">32核48G内存3台</td>\n<td style="text-align:left">Jmeter</td>\n</tr>\n</tbody>\n</table>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 概述 2 测试环境及工具 3 测试类型 3.1 按单号查询-6字段 3.1.1 按单号查询-145字段 3.2 按时间范围查询-6字段 3.2.1 按时间范围查询-145字段 4 测试结果与分析",content:"# 1 概述\n\n测试ES在各个数据体量下,单号查询,时间范围查询的性能指标。\n\n\n# 2 测试环境及工具\n\n数据库             版本      硬件           测试工具\nElasticsearch   6.8.1   32核48G内存3台   Jmeter\n\n\n# 3 测试类型\n\n\n# 3.1 按单号查询-6字段\n\n查询类型   数据量     总数据大小      平均响应时间（MS）   吞吐量（/SEC）\n单号查询   5000万   5.7 GB     3.63         4925.3\n       1亿      11.3 GB    4.7          4909.18\n       2亿      22.5 GB    15.74        3443.13\n       4亿      44.9 GB    40.11        1869.74\n       8亿      89.1 GB    73.51        1172.52\n       10亿     111.6 GB   84.37        1035.8\n\nJmeter测试结果截图如下:\n\n5千万数据量-单号查询\n\n4亿数据量-单号查询\n\n10亿数据量-单号查询\n\n# 3.1.1 按单号查询-145字段\n\n查询类型   字段数   数据量   总数据大小    平均响应时间（MS）   吞吐量（/SEC）\n单号查询   145   10亿   1.4 TB   214.18       437.11\n\nJmeter测试结果截图如下:\n\n\n# 3.2 按时间范围查询-6字段\n\n查询类型        数据量     总数据大小      平均响应时间(MS)   吞吐量(/SEC)\n时间范围查询-7天   5000万   5.7 GB     40.45        1748.35\n            1亿      11.3 GB    64.48        1260.98\n            2亿      22.5 GB    177.99       511.58\n            4亿      44.9 GB    346.39       275\n            8亿      89.1 GB    702.22       138.98\n            10亿     111.6 GB   757.83       129.06\n\nJmeter测试结果截图如下:\n\n5千万数据量-时间范围查询\n\n4亿数据量-时间范围查询\n\n10亿数据量-时间范围查询\n\n# 3.2.1 按时间范围查询-145字段\n\n查询类型       字段数   数据量   总数据大小   平均响应时间（MS）   吞吐量（/SEC）\n按范围查询-7天   145   10亿   1.4T    645.54       151.68\n\nJmeter测试结果截图如下:\n\n\n# 4 测试结果与分析\n\n 1. 字段数对精确查询性能影响较大，范围查询没有明显影响\n\n 2. 数据量对精确查询和范围查询均有较大影响",normalizedContent:"# 1 概述\n\n测试es在各个数据体量下,单号查询,时间范围查询的性能指标。\n\n\n# 2 测试环境及工具\n\n数据库             版本      硬件           测试工具\nelasticsearch   6.8.1   32核48g内存3台   jmeter\n\n\n# 3 测试类型\n\n\n# 3.1 按单号查询-6字段\n\n查询类型   数据量     总数据大小      平均响应时间（ms）   吞吐量（/sec）\n单号查询   5000万   5.7 gb     3.63         4925.3\n       1亿      11.3 gb    4.7          4909.18\n       2亿      22.5 gb    15.74        3443.13\n       4亿      44.9 gb    40.11        1869.74\n       8亿      89.1 gb    73.51        1172.52\n       10亿     111.6 gb   84.37        1035.8\n\njmeter测试结果截图如下:\n\n5千万数据量-单号查询\n\n4亿数据量-单号查询\n\n10亿数据量-单号查询\n\n# 3.1.1 按单号查询-145字段\n\n查询类型   字段数   数据量   总数据大小    平均响应时间（ms）   吞吐量（/sec）\n单号查询   145   10亿   1.4 tb   214.18       437.11\n\njmeter测试结果截图如下:\n\n\n# 3.2 按时间范围查询-6字段\n\n查询类型        数据量     总数据大小      平均响应时间(ms)   吞吐量(/sec)\n时间范围查询-7天   5000万   5.7 gb     40.45        1748.35\n            1亿      11.3 gb    64.48        1260.98\n            2亿      22.5 gb    177.99       511.58\n            4亿      44.9 gb    346.39       275\n            8亿      89.1 gb    702.22       138.98\n            10亿     111.6 gb   757.83       129.06\n\njmeter测试结果截图如下:\n\n5千万数据量-时间范围查询\n\n4亿数据量-时间范围查询\n\n10亿数据量-时间范围查询\n\n# 3.2.1 按时间范围查询-145字段\n\n查询类型       字段数   数据量   总数据大小   平均响应时间（ms）   吞吐量（/sec）\n按范围查询-7天   145   10亿   1.4t    645.54       151.68\n\njmeter测试结果截图如下:\n\n\n# 4 测试结果与分析\n\n 1. 字段数对精确查询性能影响较大，范围查询没有明显影响\n\n 2. 数据量对精确查询和范围查询均有较大影响",charsets:{cjk:!0}},{title:"阿尔萨斯(Arthas)",frontmatter:{title:"阿尔萨斯(Arthas)",date:"2022-05-07T14:36:19.000Z",permalink:"/pages/41333d/",sticky:2,categories:["技术应用","工作杂货"],tags:["Arthas"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/03.%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF(Arthas).html",relativePath:"02.技术应用/01.工作杂货/03.阿尔萨斯(Arthas).md",key:"v-e6126e6e",path:"/pages/41333d/",headers:[{level:2,title:"1 trace",slug:"_1-trace",normalizedTitle:"1 trace",charIndex:2},{level:2,title:"2 reset",slug:"_2-reset",normalizedTitle:"2 reset",charIndex:237},{level:2,title:"3 quit-stop",slug:"_3-quit-stop",normalizedTitle:"3 quit-stop",charIndex:386},{level:2,title:"4 thread",slug:"_4-thread",normalizedTitle:"4 thread",charIndex:591},{level:2,title:"5 sysprop",slug:"_5-sysprop",normalizedTitle:"5 sysprop",charIndex:649},{level:2,title:"6 heapdump",slug:"_6-heapdump",normalizedTitle:"6 heapdump",charIndex:678},{level:2,title:"7 dashboard",slug:"_7-dashboard",normalizedTitle:"7 dashboard",charIndex:742},{level:2,title:"8 watch",slug:"_8-watch",normalizedTitle:"8 watch",charIndex:787}],excerpt:'<h2 id="_1-trace"><a class="header-anchor" href="#_1-trace">#</a> 1 trace</h2>\n<p>利用trace命令追踪方法耗时。</p>\n<p>https://arthas.aliyun.com/doc/trace.html</p>\n<img src="/img/media/5f987fcb30fb938420581eb30ec32d1f.png" class="imgcss">\n<p>curl -O https://arthas.aliyun.com/arthas-boot.jar</p>\n<p>java -jar arthas-boot.jar</p>\n<p>trace com.yl.mhs.api.stream.kafka.receiver.WaybillOggApiReceiver doOggWaybillHandel</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 trace 2 reset 3 quit-stop 4 thread 5 sysprop 6 heapdump 7 dashboard 8 watch",content:'# 1 trace\n\n利用trace命令追踪方法耗时。\n\nhttps://arthas.aliyun.com/doc/trace.html\n\ncurl -O https://arthas.aliyun.com/arthas-boot.jar\n\njava -jar arthas-boot.jar\n\ntrace com.yl.mhs.api.stream.kafka.receiver.WaybillOggApiReceiver doOggWaybillHandel\n\n\n# 2 reset\n\n通过reset命令可以重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭 时会重置所有增强过的类。\n\nArthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行reset命令，可以清除掉这些增强代码。\n\n\n# 3 quit-stop\n\n退出Arthas\n\n用exit或者quit命令可以退出Arthas。\n\nexit quit\n\n退出Arthas之后，还可以再次用 java -jar arthas-boot.jar来连接。\n\n彻底退出Arthas\n\nexit/quit命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完成退出Arthas，可以执行stop命令。\n\nstop\n\n\n# 4 thread\n\n查看当前线程信息，查看线程的堆栈。\n\nthread -b\n\n找出当前阻塞其他线程的线程\n\n\n# 5 sysprop\n\n查看当前JVM的系统属性。\n\n\n# 6 heapdump\n\n类似jmap命令的heap dump功能。\n\nheapdump /tmp/dump.hprof\n\n\n# 7 dashboard\n\ndashboard命令可以查看当前系统的实时数据面板。\n\n\n# 8 watch\n\n观察指定方法的调用情况。能观察到的范围为：返回值、抛出异常、入参，通过编写 OGNL 表达式进行对应变量的查看。\n\n观察异常信息的例子：\n\nwatch demo.MathGame primeFactors "{params[0],throwExp}" -e -x 2',normalizedContent:'# 1 trace\n\n利用trace命令追踪方法耗时。\n\nhttps://arthas.aliyun.com/doc/trace.html\n\ncurl -o https://arthas.aliyun.com/arthas-boot.jar\n\njava -jar arthas-boot.jar\n\ntrace com.yl.mhs.api.stream.kafka.receiver.waybilloggapireceiver dooggwaybillhandel\n\n\n# 2 reset\n\n通过reset命令可以重置增强类，将被 arthas 增强过的类全部还原，arthas 服务端关闭 时会重置所有增强过的类。\n\narthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行reset命令，可以清除掉这些增强代码。\n\n\n# 3 quit-stop\n\n退出arthas\n\n用exit或者quit命令可以退出arthas。\n\nexit quit\n\n退出arthas之后，还可以再次用 java -jar arthas-boot.jar来连接。\n\n彻底退出arthas\n\nexit/quit命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完成退出arthas，可以执行stop命令。\n\nstop\n\n\n# 4 thread\n\n查看当前线程信息，查看线程的堆栈。\n\nthread -b\n\n找出当前阻塞其他线程的线程\n\n\n# 5 sysprop\n\n查看当前jvm的系统属性。\n\n\n# 6 heapdump\n\n类似jmap命令的heap dump功能。\n\nheapdump /tmp/dump.hprof\n\n\n# 7 dashboard\n\ndashboard命令可以查看当前系统的实时数据面板。\n\n\n# 8 watch\n\n观察指定方法的调用情况。能观察到的范围为：返回值、抛出异常、入参，通过编写 ognl 表达式进行对应变量的查看。\n\n观察异常信息的例子：\n\nwatch demo.mathgame primefactors "{params[0],throwexp}" -e -x 2',charsets:{cjk:!0}},{title:"Jprofiler排查",frontmatter:{title:"Jprofiler排查",date:"2022-04-29T18:31:15.000Z",permalink:"/pages/f811c1/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/01.Jprofiler%E6%8E%92%E6%9F%A5.html",relativePath:"02.技术应用/01.工作杂货/01.Jprofiler排查.md",key:"v-5ed32899",path:"/pages/f811c1/",headers:[{level:2,title:"Jprofiler",slug:"jprofiler",normalizedTitle:"jprofiler",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"Jprofiler",content:"# Jprofiler\n\n记一次线上内存问题排查。获取线上应用dump文件分析。\n\n选中大对象，通过引用分析该对象。\n\nincoming：显示这个对象被谁引用。\n\noutcoming：显示这个对象引用的其他对象。\n\n找到引用该对象的业务代码。\n\n通过代码定位到缺少查询条件导致查询库表所有数据。解决方案：增加限制条件。",normalizedContent:"# jprofiler\n\n记一次线上内存问题排查。获取线上应用dump文件分析。\n\n选中大对象，通过引用分析该对象。\n\nincoming：显示这个对象被谁引用。\n\noutcoming：显示这个对象引用的其他对象。\n\n找到引用该对象的业务代码。\n\n通过代码定位到缺少查询条件导致查询库表所有数据。解决方案：增加限制条件。",charsets:{cjk:!0}},{title:"定时任务",frontmatter:{title:"定时任务",date:"2022-04-28T18:09:13.000Z",permalink:"/pages/67b177/",categories:["技术应用","工作杂货"],tags:["定时任务"],author:{name:"luoxiaofeng"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/07.%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html",relativePath:"02.技术应用/01.工作杂货/07.定时任务.md",key:"v-695a399e",path:"/pages/67b177/",headers:[{level:2,title:"定时任务",slug:"定时任务",normalizedTitle:"定时任务",charIndex:2},{level:3,title:"1、xxl-job",slug:"_1、xxl-job",normalizedTitle:"1、xxl-job",charIndex:11},{level:4,title:"1.1 xxl-job的优缺点",slug:"_1-1-xxl-job的优缺点",normalizedTitle:"1.1 xxl-job的优缺点",charIndex:92},{level:4,title:"1.2 xxl-job的一些特性",slug:"_1-2-xxl-job的一些特性",normalizedTitle:"1.2 xxl-job的一些特性",charIndex:251},{level:4,title:"1.3 定时任务可用CompletableFutrue并发执行",slug:"_1-3-定时任务可用completablefutrue并发执行",normalizedTitle:"1.3 定时任务可用completablefutrue并发执行",charIndex:452}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"定时任务 1、xxl-job 1.1 xxl-job的优缺点 1.2 xxl-job的一些特性 1.3 定时任务可用CompletableFutrue并发执行",content:"# 定时任务\n\n\n# 1、xxl-job\n\nXxl-Job分为执行器、调度器。而我们平时的客户端就属于一个执行器，执行器启动的时候会自动注册到调度器上，然后调度器进行远程调度。\n\n# 1.1 xxl-job的优缺点\n\n优点：\n\n1.支持集群部署。\n\n2.提供运维界面维护成本小。\n\n3.自带错误预警。\n\n4.相对elastic-job来说不需要额外的组件（zookeeper）。\n\n5.支持调度策略；\n\n6.支持分片。\n\n7.文档齐全。\n\n缺点：\n\n1.相对Quartz来说需要多部署调度中心。\n\n# 1.2 xxl-job的一些特性\n\n1、执行失败可以查看日志。\n\n2、支持邮件报警。\n\n3、路由策略支持轮询等策略，可以减轻执行服务器的压力。\n\n4、轮询时间等参数修改后立即生效。\n\n5、执行器有问题或新增，快速识别。\n\n6、调度中心高可用，调度中心可以集群部署（集群部署的机器时钟必须同步），如果调度中心没有做负载在执行器的配置中需要配多个地址，如果调度中心配置负载则执行器配置负载地址即可。\n\n# 1.3 定时任务可用CompletableFutrue并发执行",normalizedContent:"# 定时任务\n\n\n# 1、xxl-job\n\nxxl-job分为执行器、调度器。而我们平时的客户端就属于一个执行器，执行器启动的时候会自动注册到调度器上，然后调度器进行远程调度。\n\n# 1.1 xxl-job的优缺点\n\n优点：\n\n1.支持集群部署。\n\n2.提供运维界面维护成本小。\n\n3.自带错误预警。\n\n4.相对elastic-job来说不需要额外的组件（zookeeper）。\n\n5.支持调度策略；\n\n6.支持分片。\n\n7.文档齐全。\n\n缺点：\n\n1.相对quartz来说需要多部署调度中心。\n\n# 1.2 xxl-job的一些特性\n\n1、执行失败可以查看日志。\n\n2、支持邮件报警。\n\n3、路由策略支持轮询等策略，可以减轻执行服务器的压力。\n\n4、轮询时间等参数修改后立即生效。\n\n5、执行器有问题或新增，快速识别。\n\n6、调度中心高可用，调度中心可以集群部署（集群部署的机器时钟必须同步），如果调度中心没有做负载在执行器的配置中需要配多个地址，如果调度中心配置负载则执行器配置负载地址即可。\n\n# 1.3 定时任务可用completablefutrue并发执行",charsets:{cjk:!0}},{title:"DruidDataSource配置",frontmatter:{title:"DruidDataSource配置",date:"2022-05-05T11:29:54.000Z",permalink:"/pages/165fe3/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/09.DruidDataSource%E9%85%8D%E7%BD%AE.html",relativePath:"02.技术应用/01.工作杂货/09.DruidDataSource配置.md",key:"v-e618cdc6",path:"/pages/165fe3/",headers:[{level:3,title:"DruidDataSource通用配置参考",slug:"druiddatasource通用配置参考",normalizedTitle:"druiddatasource通用配置参考",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"DruidDataSource通用配置参考",content:'# DruidDataSource通用配置参考\n\nJDBC配置：\n\nspring.datasource.druid.url= # 或spring.datasource.url= \nspring.datasource.druid.username= # 或spring.datasource.username=\nspring.datasource.druid.password= # 或spring.datasource.password=\nspring.datasource.druid.driver-class-name= #或 spring.datasource.driver-class-name=\n\n\n1\n2\n3\n4\n\n\n连接池配置：\n\nspring.datasource.druid.initial-size=\nspring.datasource.druid.max-active=\nspring.datasource.druid.min-idle=\nspring.datasource.druid.max-wait=\nspring.datasource.druid.pool-prepared-statements=\nspring.datasource.druid.max-pool-prepared-statement-per-connection-size= \nspring.datasource.druid.max-open-prepared-statements= #和上面的等价\nspring.datasource.druid.validation-query=\nspring.datasource.druid.validation-query-timeout=\nspring.datasource.druid.test-on-borrow=\nspring.datasource.druid.test-on-return=\nspring.datasource.druid.test-while-idle=\nspring.datasource.druid.time-between-eviction-runs-millis=\nspring.datasource.druid.min-evictable-idle-time-millis=\nspring.datasource.druid.max-evictable-idle-time-millis=\nspring.datasource.druid.filters= #配置多个英文逗号分隔\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n监控配置:\n\n# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter\nspring.datasource.druid.web-stat-filter.enabled= #是否启用StatFilter默认值false\nspring.datasource.druid.web-stat-filter.url-pattern=\nspring.datasource.druid.web-stat-filter.exclusions=\nspring.datasource.druid.web-stat-filter.session-stat-enable=\nspring.datasource.druid.web-stat-filter.session-stat-max-count=\nspring.datasource.druid.web-stat-filter.principal-session-name=\nspring.datasource.druid.web-stat-filter.principal-cookie-name=\nspring.datasource.druid.web-stat-filter.profile-enable=\n\n# StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置\nspring.datasource.druid.stat-view-servlet.enabled= #是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）\nspring.datasource.druid.stat-view-servlet.url-pattern=\nspring.datasource.druid.stat-view-servlet.reset-enable=\nspring.datasource.druid.stat-view-servlet.login-username=\nspring.datasource.druid.stat-view-servlet.login-password=\nspring.datasource.druid.stat-view-servlet.allow=\nspring.datasource.druid.stat-view-servlet.deny=\n\n# Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置\nspring.datasource.druid.aop-patterns= # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n参考配置：\n\npom.xml\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>dynamic-datasource-spring-boot-starter</artifactId>\n            <version>${dynamic-ds.version}</version>\n            <exclusions>\n            \t<exclusion>\n                    <groupId>com.zaxxer</groupId>\n\t    <artifactId>HikariCP</artifactId>\t\n            \t</exclusion>\n            </exclusions>\n        </dependency>\n\n       <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.23</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\napollo配置：\n\nspring:\n  autoconfigure:\n    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure\n  datasource:\n    dynamic:\n      primary: main\n      datasource:\n        main:\n          driverClassName: oracle.jdbc.driver.OracleDriver\n          url: jdbc:oracle:thin:@192.168.1.248:1521:orcl  #修改\n          username: jms_test #修改\n          password: CEoJYzRMZ6WwhF0S #修改\n          type: com.alibaba.druid.pool.DruidDataSource\n        query:\n          driverClassName: oracle.jdbc.driver.OracleDriver\n          url: jdbc:oracle:thin:@192.168.1.248:1521:orcl #修改\n          username: jms_test #修改\n          password: CEoJYzRMZ6WwhF0S #修改\n          type: com.alibaba.druid.pool.DruidDataSource\n      druid:\n        initial-size: 5\n        min-idle: 1\n        max-active: 20\n        max-wait: 60000\n        time-between-eviction-runsMillis: 60000\n        min-evictable-idle-timeMillis: 300000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n参考代码：\n\nprivate void configDruidParams(DruidDataSource druidDataSource) {\n            druidDataSource.setMaxActive(20);\n            druidDataSource.setInitialSize(1);\n            // 配置获取连接等待超时的时间\n            druidDataSource.setMaxWait(10000);\n            druidDataSource.setMinIdle(1);\n            // 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n            druidDataSource.setTimeBetweenEvictionRunsMillis(60000);\n            // 配置一个连接在池中最小生存的时间，单位是毫秒 超过这个时间每次会回收默认3个连接\n            druidDataSource.setMinEvictableIdleTimeMillis(30000);\n            // 线上配置的mysql断开闲置连接时间为1小时,数据源配置回收时间为3分钟,以最后一次活跃时间开始算\n            druidDataSource.setMaxEvictableIdleTimeMillis(180000);\n            // 连接最大存活时间，默认是-1(不限制物理连接时间)，从创建连接开始计算，如果超过该时间，则会被清理\n            druidDataSource.setPhyTimeoutMillis(15000);\n            druidDataSource.setValidationQuery("select 1");\n            druidDataSource.setTestWhileIdle(true);\n            druidDataSource.setTestOnBorrow(false);\n            druidDataSource.setTestOnReturn(false);\n            druidDataSource.setPoolPreparedStatements(true);\n            druidDataSource.setMaxOpenPreparedStatements(20);\n            druidDataSource.setUseGlobalDataSourceStat(true);\n            druidDataSource.setKeepAlive(true);\n            druidDataSource.setRemoveAbandoned(true);\n            druidDataSource.setRemoveAbandonedTimeout(180);\n            try {\n                druidDataSource.setFilters("stat,slf4j");\n                List filterList = new ArrayList<>();\n                filterList.add(wallFilter());\n                druidDataSource.setProxyFilters(filterList);\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n',normalizedContent:'# druiddatasource通用配置参考\n\njdbc配置：\n\nspring.datasource.druid.url= # 或spring.datasource.url= \nspring.datasource.druid.username= # 或spring.datasource.username=\nspring.datasource.druid.password= # 或spring.datasource.password=\nspring.datasource.druid.driver-class-name= #或 spring.datasource.driver-class-name=\n\n\n1\n2\n3\n4\n\n\n连接池配置：\n\nspring.datasource.druid.initial-size=\nspring.datasource.druid.max-active=\nspring.datasource.druid.min-idle=\nspring.datasource.druid.max-wait=\nspring.datasource.druid.pool-prepared-statements=\nspring.datasource.druid.max-pool-prepared-statement-per-connection-size= \nspring.datasource.druid.max-open-prepared-statements= #和上面的等价\nspring.datasource.druid.validation-query=\nspring.datasource.druid.validation-query-timeout=\nspring.datasource.druid.test-on-borrow=\nspring.datasource.druid.test-on-return=\nspring.datasource.druid.test-while-idle=\nspring.datasource.druid.time-between-eviction-runs-millis=\nspring.datasource.druid.min-evictable-idle-time-millis=\nspring.datasource.druid.max-evictable-idle-time-millis=\nspring.datasource.druid.filters= #配置多个英文逗号分隔\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n监控配置:\n\n# webstatfilter配置，说明请参考druid wiki，配置_配置webstatfilter\nspring.datasource.druid.web-stat-filter.enabled= #是否启用statfilter默认值false\nspring.datasource.druid.web-stat-filter.url-pattern=\nspring.datasource.druid.web-stat-filter.exclusions=\nspring.datasource.druid.web-stat-filter.session-stat-enable=\nspring.datasource.druid.web-stat-filter.session-stat-max-count=\nspring.datasource.druid.web-stat-filter.principal-session-name=\nspring.datasource.druid.web-stat-filter.principal-cookie-name=\nspring.datasource.druid.web-stat-filter.profile-enable=\n\n# statviewservlet配置，说明请参考druid wiki，配置_statviewservlet配置\nspring.datasource.druid.stat-view-servlet.enabled= #是否启用statviewservlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）\nspring.datasource.druid.stat-view-servlet.url-pattern=\nspring.datasource.druid.stat-view-servlet.reset-enable=\nspring.datasource.druid.stat-view-servlet.login-username=\nspring.datasource.druid.stat-view-servlet.login-password=\nspring.datasource.druid.stat-view-servlet.allow=\nspring.datasource.druid.stat-view-servlet.deny=\n\n# spring监控配置，说明请参考druid github wiki，配置_druid和spring关联监控配置\nspring.datasource.druid.aop-patterns= # spring监控aop切入点，如x.y.z.service.*,配置多个英文逗号分隔\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n参考配置：\n\npom.xml\n\n        <dependency>\n            <groupid>com.baomidou</groupid>\n            <artifactid>dynamic-datasource-spring-boot-starter</artifactid>\n            <version>${dynamic-ds.version}</version>\n            <exclusions>\n            \t<exclusion>\n                    <groupid>com.zaxxer</groupid>\n\t    <artifactid>hikaricp</artifactid>\t\n            \t</exclusion>\n            </exclusions>\n        </dependency>\n\n       <dependency>\n            <groupid>com.alibaba</groupid>\n            <artifactid>druid-spring-boot-starter</artifactid>\n            <version>1.1.23</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\napollo配置：\n\nspring:\n  autoconfigure:\n    exclude: com.alibaba.druid.spring.boot.autoconfigure.druiddatasourceautoconfigure\n  datasource:\n    dynamic:\n      primary: main\n      datasource:\n        main:\n          driverclassname: oracle.jdbc.driver.oracledriver\n          url: jdbc:oracle:thin:@192.168.1.248:1521:orcl  #修改\n          username: jms_test #修改\n          password: ceojyzrmz6wwhf0s #修改\n          type: com.alibaba.druid.pool.druiddatasource\n        query:\n          driverclassname: oracle.jdbc.driver.oracledriver\n          url: jdbc:oracle:thin:@192.168.1.248:1521:orcl #修改\n          username: jms_test #修改\n          password: ceojyzrmz6wwhf0s #修改\n          type: com.alibaba.druid.pool.druiddatasource\n      druid:\n        initial-size: 5\n        min-idle: 1\n        max-active: 20\n        max-wait: 60000\n        time-between-eviction-runsmillis: 60000\n        min-evictable-idle-timemillis: 300000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n参考代码：\n\nprivate void configdruidparams(druiddatasource druiddatasource) {\n            druiddatasource.setmaxactive(20);\n            druiddatasource.setinitialsize(1);\n            // 配置获取连接等待超时的时间\n            druiddatasource.setmaxwait(10000);\n            druiddatasource.setminidle(1);\n            // 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n            druiddatasource.settimebetweenevictionrunsmillis(60000);\n            // 配置一个连接在池中最小生存的时间，单位是毫秒 超过这个时间每次会回收默认3个连接\n            druiddatasource.setminevictableidletimemillis(30000);\n            // 线上配置的mysql断开闲置连接时间为1小时,数据源配置回收时间为3分钟,以最后一次活跃时间开始算\n            druiddatasource.setmaxevictableidletimemillis(180000);\n            // 连接最大存活时间，默认是-1(不限制物理连接时间)，从创建连接开始计算，如果超过该时间，则会被清理\n            druiddatasource.setphytimeoutmillis(15000);\n            druiddatasource.setvalidationquery("select 1");\n            druiddatasource.settestwhileidle(true);\n            druiddatasource.settestonborrow(false);\n            druiddatasource.settestonreturn(false);\n            druiddatasource.setpoolpreparedstatements(true);\n            druiddatasource.setmaxopenpreparedstatements(20);\n            druiddatasource.setuseglobaldatasourcestat(true);\n            druiddatasource.setkeepalive(true);\n            druiddatasource.setremoveabandoned(true);\n            druiddatasource.setremoveabandonedtimeout(180);\n            try {\n                druiddatasource.setfilters("stat,slf4j");\n                list filterlist = new arraylist<>();\n                filterlist.add(wallfilter());\n                druiddatasource.setproxyfilters(filterlist);\n            } catch (sqlexception e) {\n                e.printstacktrace();\n            }\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n',charsets:{cjk:!0}},{title:"Spring Cloud Stream",frontmatter:{title:"Spring Cloud Stream",date:"2022-05-05T11:38:52.000Z",permalink:"/pages/c3ec16/",categories:["技术应用","工作杂货"],tags:["Spring Cloud"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/11.Spring%20Cloud%20Stream.html",relativePath:"02.技术应用/01.工作杂货/11.Spring Cloud Stream.md",key:"v-4b5192a6",path:"/pages/c3ec16/",headers:[{level:2,title:"1 简介",slug:"_1-简介",normalizedTitle:"1 简介",charIndex:2},{level:3,title:"1.1 概述",slug:"_1-1-概述",normalizedTitle:"1.1 概述",charIndex:11},{level:2,title:"2 快速搭建",slug:"_2-快速搭建",normalizedTitle:"2 快速搭建",charIndex:313},{level:3,title:"2.1 引入依赖",slug:"_2-1-引入依赖",normalizedTitle:"2.1 引入依赖",charIndex:409},{level:2,title:"3 开发指南",slug:"_3-开发指南",normalizedTitle:"3 开发指南",charIndex:1114},{level:3,title:"3.1 apollo 增加配置stream.yml",slug:"_3-1-apollo-增加配置stream-yml",normalizedTitle:"3.1 apollo 增加配置stream.yml",charIndex:1125},{level:3,title:"3.2: SpringBoot项目启动类,添加注解SpringBootApplication,EnableApolloConfig",slug:"_3-2-springboot项目启动类-添加注解springbootapplication-enableapolloconfig",normalizedTitle:"3.2: springboot项目启动类,添加注解springbootapplication,enableapolloconfig",charIndex:3723},{level:3,title:"3.3: 创建消息通道绑定的接口",slug:"_3-3-创建消息通道绑定的接口",normalizedTitle:"3.3: 创建消息通道绑定的接口",charIndex:4195},{level:3,title:"3.4 发送消息",slug:"_3-4-发送消息",normalizedTitle:"3.4 发送消息",charIndex:5361},{level:3,title:"3.5 接收消息",slug:"_3-5-接收消息",normalizedTitle:"3.5 接收消息",charIndex:6693},{level:3,title:"3.6 接口测试",slug:"_3-6-接口测试",normalizedTitle:"3.6 接口测试",charIndex:7259}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 简介 1.1 概述 2 快速搭建 2.1 引入依赖 3 开发指南 3.1 apollo 增加配置stream.yml 3.2: SpringBoot项目启动类,添加注解SpringBootApplication,EnableApolloConfig 3.3: 创建消息通道绑定的接口 3.4 发送消息 3.5 接收消息 3.6 接口测试",content:'# 1 简介\n\n\n# 1.1 概述\n\nSpring Cloud Stream 是一个用来为微服务应用构建消息驱动能力的框架。它可以基于 Spring Boot 来创建独立的、可用于生产的 Spring 应用程序。Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，并引入了发布-订阅、消费组、分区这三个核心概念。通过使用 Spring Cloud Stream，可以有效简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理。但是目前 Spring Cloud Stream 只支持 RabbitMQ 和 Kafka 的自动化配置。\n\n\n# 2 快速搭建\n\n我们通过一个简单的示例对 Spring Cloud Stream 有一个初步的认识。中间件使用 RabbitMQ，创建 spring-cloud-stream 模块。\n\n\n# 2.1 引入依赖\n\n编辑 pom.xml 文件，引入 Spring Cloud Stream 对 RabbitMQ 支持的 spring-cloud-starter-stream-rabbit 依赖，该依赖包是 Spring Cloud Stream 对 RabbitMQ 支持的封装，其中包含了对 RabbitMQ 的自动化配置等内容。\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-stream</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-stream-kafka</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 3 开发指南\n\n\n# 3.1 apollo 增加配置stream.yml\n\nspring:\n  cloud:\n    stream:\n      bindings:\n       #输入通道名称,对应java代码InputInterface定义的名称\n        rabbit-mq-demo-test-input:\n          #通道主题名\n          destination: rabbit-mq-demo-test\n          contentType: application/json\n          #消费组名称, 多节点消费保证唯一\n          group: rabbit-mq-demo-test\n          #绑定的QM配置\n          binder: rabbit-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n\n        rabbit-mq-demo-test-output:\n          destination: rabbit-mq-demo-test\n          contentType: application/json\n          group: \n          binder: rabbit-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n            \n        demo-test-input:\n          destination: demo-test\n          contentType: application/json\n          group: demo-test\n          binder: kafka-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n            \n        demo-test-output:\n          destination: demo-test\n          contentType: application/json\n          group: demo-test\n          binder: kafka-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n      #默认配置, 当存在多个配置事必须配置, 否则获取不到MQ配置\n      default-binder: rabbit-test    \n      binders:\n      #RabbitMQ配置\n        rabbit-test:\n          type: rabbit\n          environment:\n            spring:\n              rabbitmq:\n                host: 192.168.1.212\n                port: 5672\n                username: guest\n                password: guest\n                virtual-host: /\n        #Kafka配置     \n        kafka-test:\n          type: kafka\n          environment:\n            spring:\n              cloud:\n                stream:\n                  kafka:\n                    binder:\n                      brokers: 10.33.110.231:9092,10.33.110.232:9092,10.33.110.233:9092\n                      auto-add-partitions: true\n                      auto-create-topics: true\n                      min-partition-count: 1\n                      replication-factor: 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n\n\n\n# 3.2: SpringBoot项目启动类,添加注解SpringBootApplication,EnableApolloConfig\n\n@EnableApolloConfig({"stream.yml"})\n@SpringBootApplication(exclude = {RabbitAutoConfiguration.class}) \npublic class PlatformDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(PlatformDemoApplication.class, args);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n屏蔽Rabbit org.springframework.amqp.AmqpConnectException: java.net.ConnectException: Connection refused: connect 错误\n\n\n# 3.3: 创建消息通道绑定的接口\n\n创建 InputInterface 接口，通过 @Input 注解定义输入通道和输出通道，另外,@Input 注解都还有一个 value 属性，该属性可以用来设置消息通道的名称，\n\nRabbitMQ: rabbit-mq-demo-test-input\n\nKafka: demo-test-input\n\n@Component\npublic interface InputInterface {\n\n    //RabbitMQ接收者通道\n    String RABBIT_MQ_DEMO_TEST_INPUT = "rabbit-mq-demo-test-input";\n\n    //Kafka接收者通道\n    String KAFKA_DEMO_TEST_INPUT = "demo-test-input";\n\n\n    @Input(RABBIT_MQ_DEMO_TEST_INPUT)\n    SubscribableChannel rabbitMQInput();\n\n    @Input(KAFKA_DEMO_TEST_INPUT)\n    SubscribableChannel kafkaSendInput();\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n创建 OutputInterface接口，通过@Output 注解定义输入通道和输出通道，另外@Output 注解都还有一个 value 属性，该属性可以用来设置消息通道的名称，\n\nRabbitMQ: rabbit-mq-demo-test-output\n\nKafka: demo-test-output\n\n@Component\npublic interface OutputInterface {\n\n    //RabbitMQ接收者通道\n    String RABBIT_MQ_DEMO_TEST_INPUT = "rabbit-mq-demo-test-output";\n\n    //Kafka接收者通道\n    String KAFKA_DEMO_TEST_INPUT = "demo-test-output";\n\n\n    @Output(RABBIT_MQ_DEMO_TEST_INPUT)\n    SubscribableChannel rabbitMQSendMessage();\n\n    @Output(KAFKA_DEMO_TEST_INPUT)\n    SubscribableChannel kafkaSendMessage();\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 3.4 发送消息\n\n创建测试消息实体MessageDTO\n\n@Data\npublic class MessageDTO {\n\n    /**\n     * ID\n     */\n    private Integer id;\n    /**\n     * 编码\n     */\n    private String code;\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 模块名称\n     */\n    private String module;\n    /**\n     * 操作类型\n     */\n    private String operation;\n    /**\n     * 冗余字段\n     */\n    private String json;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n创建MqMessageService接口以及MqServiceImpl实现类\n\npublic interface MqMessageService {\n\n    boolean sendRabbitMqMessage(MessageDTO dto);\n\n    boolean sendKafkaMessage(MessageDTO dto);\n\n}\n@Slf4j\n@Service\n@EnableBinding(value = {OutputInterface.class})\npublic class MqMessageServiceImpl implements MqMessageService {\n\n    @Autowired\n    private OutputInterface outputInterface;\n\n    @Override\n    public boolean sendRabbitMqMessage(MessageDTO dto) {\n        Message message = MessageBuilder.withPayload(dto).build();\n        return outputInterface.rabbitMQSendMessage().send(message);\n    }\n\n    @Override\n    public boolean sendKafkaMessage(MessageDTO dto) {\n        Message message = MessageBuilder.withPayload(dto).build();\n        return outputInterface.kafkaSendMessage().send(message);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 3.5 接收消息\n\n创建监听器InputStreamListener\n\n@Slf4j\n@EnableBinding(InputInterface.class)\n@Component\npublic class InputStreamListener {\n\n    @StreamListener(value = InputInterface.RABBIT_MQ_DEMO_TEST_INPUT)\n    public void showRabbitMQMessage(@Payload MessageDTO dto) {\n        log.info("showRabbitMQMessage message :[{}]", dto);\n\n    }\n    \n    @StreamListener(value = InputInterface.KAFKA_DEMO_TEST_INPUT)\n    public void showKafkaMessage(@Payload MessageDTO dto) {\n        log.info("showKafkaMessage message:{}", dto);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 3.6 接口测试\n\n1.创建MQController\n\n@Api(value = "MQController", tags = "MQ测试")\n@RequestMapping("/mqDemo")\n@RestController\n@Slf4j\npublic class MQController {\n\n    @Autowired\n    private MqMessageService mqMessageService;\n\n\n    @ApiOperation(value = "发送RabbitMQ消息", notes = "发送RabbitMQ消息")\n    @PostMapping("sendRabbitMqMessage")\n    public Result<Boolean> sendRabbitMqMessage(@Valid @RequestBody MessageDTO messageDTO) {\n        return Result.success(mqMessageService.sendRabbitMqMessage(messageDTO));\n    }\n\n    @ApiOperation(value = "发送Kafka消息", notes = "发送Kafka消息")\n    @PostMapping("sendKafkaMessage")\n    public Result<Boolean> sendKafkaMessage(@Valid @RequestBody MessageDTO messageDTO) {\n        return Result.success(mqMessageService.sendKafkaMessage(messageDTO));\n    }\n    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n2.Postman测试\n\nRabbitMq\n\n发送接口:http://localhost:8080/demoapi/mqDemo/sendRabbitMqMessage\n\n测试数据\n\n{\n    "id":1,\n    "code":"code",\n    "name":"name",\n    "module":"module",\n    "operation":"INSERT",\n    "json":"发送RabbitMQ数据"\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n监听器接收RabbitMQ数据\n\nc.y.p.d.m.l.InputStreamListener - showRabbitMQMessage message :[MessageDTO(id=1, code=code, name=name, module=module, operation=INSERT, json=发送RabbitMQ数据)]\n\n\n1\n\n\nKafka\n\n发送接口:http://localhost:8080/demoapi/mqDemo/sendKafkaMessage\n\n{\n    "id":2,\n    "code":"code",\n    "name":"name",\n    "module":"module",\n    "operation":"INSERT",\n    "json":"发送Kafka数据"\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n监听器接收Kafka数据\n\nINFO  c.y.p.d.m.l.InputStreamListener - showKafkaMessage message:MessageDTO(id=2, code=code, name=name, module=module, operation=INSERT, json=发送Kafka数据)\n\n\n1\n',normalizedContent:'# 1 简介\n\n\n# 1.1 概述\n\nspring cloud stream 是一个用来为微服务应用构建消息驱动能力的框架。它可以基于 spring boot 来创建独立的、可用于生产的 spring 应用程序。spring cloud stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，并引入了发布-订阅、消费组、分区这三个核心概念。通过使用 spring cloud stream，可以有效简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理。但是目前 spring cloud stream 只支持 rabbitmq 和 kafka 的自动化配置。\n\n\n# 2 快速搭建\n\n我们通过一个简单的示例对 spring cloud stream 有一个初步的认识。中间件使用 rabbitmq，创建 spring-cloud-stream 模块。\n\n\n# 2.1 引入依赖\n\n编辑 pom.xml 文件，引入 spring cloud stream 对 rabbitmq 支持的 spring-cloud-starter-stream-rabbit 依赖，该依赖包是 spring cloud stream 对 rabbitmq 支持的封装，其中包含了对 rabbitmq 的自动化配置等内容。\n\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-stream</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-stream-rabbit</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-stream-kafka</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 3 开发指南\n\n\n# 3.1 apollo 增加配置stream.yml\n\nspring:\n  cloud:\n    stream:\n      bindings:\n       #输入通道名称,对应java代码inputinterface定义的名称\n        rabbit-mq-demo-test-input:\n          #通道主题名\n          destination: rabbit-mq-demo-test\n          contenttype: application/json\n          #消费组名称, 多节点消费保证唯一\n          group: rabbit-mq-demo-test\n          #绑定的qm配置\n          binder: rabbit-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n\n        rabbit-mq-demo-test-output:\n          destination: rabbit-mq-demo-test\n          contenttype: application/json\n          group: \n          binder: rabbit-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n            \n        demo-test-input:\n          destination: demo-test\n          contenttype: application/json\n          group: demo-test\n          binder: kafka-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n            \n        demo-test-output:\n          destination: demo-test\n          contenttype: application/json\n          group: demo-test\n          binder: kafka-test\n          consumer:\n            enable-auto-commit: false\n            auto-offset-reset: earliest\n            max-poll-records: 1000\n            concurrency: 6\n      #默认配置, 当存在多个配置事必须配置, 否则获取不到mq配置\n      default-binder: rabbit-test    \n      binders:\n      #rabbitmq配置\n        rabbit-test:\n          type: rabbit\n          environment:\n            spring:\n              rabbitmq:\n                host: 192.168.1.212\n                port: 5672\n                username: guest\n                password: guest\n                virtual-host: /\n        #kafka配置     \n        kafka-test:\n          type: kafka\n          environment:\n            spring:\n              cloud:\n                stream:\n                  kafka:\n                    binder:\n                      brokers: 10.33.110.231:9092,10.33.110.232:9092,10.33.110.233:9092\n                      auto-add-partitions: true\n                      auto-create-topics: true\n                      min-partition-count: 1\n                      replication-factor: 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n\n\n\n# 3.2: springboot项目启动类,添加注解springbootapplication,enableapolloconfig\n\n@enableapolloconfig({"stream.yml"})\n@springbootapplication(exclude = {rabbitautoconfiguration.class}) \npublic class platformdemoapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(platformdemoapplication.class, args);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n屏蔽rabbit org.springframework.amqp.amqpconnectexception: java.net.connectexception: connection refused: connect 错误\n\n\n# 3.3: 创建消息通道绑定的接口\n\n创建 inputinterface 接口，通过 @input 注解定义输入通道和输出通道，另外,@input 注解都还有一个 value 属性，该属性可以用来设置消息通道的名称，\n\nrabbitmq: rabbit-mq-demo-test-input\n\nkafka: demo-test-input\n\n@component\npublic interface inputinterface {\n\n    //rabbitmq接收者通道\n    string rabbit_mq_demo_test_input = "rabbit-mq-demo-test-input";\n\n    //kafka接收者通道\n    string kafka_demo_test_input = "demo-test-input";\n\n\n    @input(rabbit_mq_demo_test_input)\n    subscribablechannel rabbitmqinput();\n\n    @input(kafka_demo_test_input)\n    subscribablechannel kafkasendinput();\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n创建 outputinterface接口，通过@output 注解定义输入通道和输出通道，另外@output 注解都还有一个 value 属性，该属性可以用来设置消息通道的名称，\n\nrabbitmq: rabbit-mq-demo-test-output\n\nkafka: demo-test-output\n\n@component\npublic interface outputinterface {\n\n    //rabbitmq接收者通道\n    string rabbit_mq_demo_test_input = "rabbit-mq-demo-test-output";\n\n    //kafka接收者通道\n    string kafka_demo_test_input = "demo-test-output";\n\n\n    @output(rabbit_mq_demo_test_input)\n    subscribablechannel rabbitmqsendmessage();\n\n    @output(kafka_demo_test_input)\n    subscribablechannel kafkasendmessage();\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 3.4 发送消息\n\n创建测试消息实体messagedto\n\n@data\npublic class messagedto {\n\n    /**\n     * id\n     */\n    private integer id;\n    /**\n     * 编码\n     */\n    private string code;\n    /**\n     * 名称\n     */\n    private string name;\n    /**\n     * 模块名称\n     */\n    private string module;\n    /**\n     * 操作类型\n     */\n    private string operation;\n    /**\n     * 冗余字段\n     */\n    private string json;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n创建mqmessageservice接口以及mqserviceimpl实现类\n\npublic interface mqmessageservice {\n\n    boolean sendrabbitmqmessage(messagedto dto);\n\n    boolean sendkafkamessage(messagedto dto);\n\n}\n@slf4j\n@service\n@enablebinding(value = {outputinterface.class})\npublic class mqmessageserviceimpl implements mqmessageservice {\n\n    @autowired\n    private outputinterface outputinterface;\n\n    @override\n    public boolean sendrabbitmqmessage(messagedto dto) {\n        message message = messagebuilder.withpayload(dto).build();\n        return outputinterface.rabbitmqsendmessage().send(message);\n    }\n\n    @override\n    public boolean sendkafkamessage(messagedto dto) {\n        message message = messagebuilder.withpayload(dto).build();\n        return outputinterface.kafkasendmessage().send(message);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 3.5 接收消息\n\n创建监听器inputstreamlistener\n\n@slf4j\n@enablebinding(inputinterface.class)\n@component\npublic class inputstreamlistener {\n\n    @streamlistener(value = inputinterface.rabbit_mq_demo_test_input)\n    public void showrabbitmqmessage(@payload messagedto dto) {\n        log.info("showrabbitmqmessage message :[{}]", dto);\n\n    }\n    \n    @streamlistener(value = inputinterface.kafka_demo_test_input)\n    public void showkafkamessage(@payload messagedto dto) {\n        log.info("showkafkamessage message:{}", dto);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 3.6 接口测试\n\n1.创建mqcontroller\n\n@api(value = "mqcontroller", tags = "mq测试")\n@requestmapping("/mqdemo")\n@restcontroller\n@slf4j\npublic class mqcontroller {\n\n    @autowired\n    private mqmessageservice mqmessageservice;\n\n\n    @apioperation(value = "发送rabbitmq消息", notes = "发送rabbitmq消息")\n    @postmapping("sendrabbitmqmessage")\n    public result<boolean> sendrabbitmqmessage(@valid @requestbody messagedto messagedto) {\n        return result.success(mqmessageservice.sendrabbitmqmessage(messagedto));\n    }\n\n    @apioperation(value = "发送kafka消息", notes = "发送kafka消息")\n    @postmapping("sendkafkamessage")\n    public result<boolean> sendkafkamessage(@valid @requestbody messagedto messagedto) {\n        return result.success(mqmessageservice.sendkafkamessage(messagedto));\n    }\n    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n2.postman测试\n\nrabbitmq\n\n发送接口:http://localhost:8080/demoapi/mqdemo/sendrabbitmqmessage\n\n测试数据\n\n{\n    "id":1,\n    "code":"code",\n    "name":"name",\n    "module":"module",\n    "operation":"insert",\n    "json":"发送rabbitmq数据"\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n监听器接收rabbitmq数据\n\nc.y.p.d.m.l.inputstreamlistener - showrabbitmqmessage message :[messagedto(id=1, code=code, name=name, module=module, operation=insert, json=发送rabbitmq数据)]\n\n\n1\n\n\nkafka\n\n发送接口:http://localhost:8080/demoapi/mqdemo/sendkafkamessage\n\n{\n    "id":2,\n    "code":"code",\n    "name":"name",\n    "module":"module",\n    "operation":"insert",\n    "json":"发送kafka数据"\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n监听器接收kafka数据\n\ninfo  c.y.p.d.m.l.inputstreamlistener - showkafkamessage message:messagedto(id=2, code=code, name=name, module=module, operation=insert, json=发送kafka数据)\n\n\n1\n',charsets:{cjk:!0}},{title:"线上Tomcat配置参考",frontmatter:{title:"线上Tomcat配置参考",date:"2022-05-05T10:36:03.000Z",permalink:"/pages/a2ebd4/",categories:["技术应用","工作杂货"],tags:["tomcat"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/13.%E7%BA%BF%E4%B8%8ATomcat%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83.html",relativePath:"02.技术应用/01.工作杂货/13.线上Tomcat配置参考.md",key:"v-a3bcbd24",path:"/pages/a2ebd4/",headers:[{level:3,title:"1. Tomcat 主要配置说明",slug:"_1-tomcat-主要配置说明",normalizedTitle:"1. tomcat 主要配置说明",charIndex:2},{level:3,title:"2. maxThreads，acceptCount，maxConnections三者的关系",slug:"_2-maxthreads-acceptcount-maxconnections三者的关系",normalizedTitle:"2. maxthreads，acceptcount，maxconnections三者的关系",charIndex:968},{level:3,title:"3. 配置文件参考",slug:"_3-配置文件参考",normalizedTitle:"3. 配置文件参考",charIndex:1714}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1. Tomcat 主要配置说明 2. maxThreads，acceptCount，maxConnections三者的关系 3. 配置文件参考",content:"# 1. Tomcat 主要配置说明\n\n属性名                 说明                                                                               默认值       参考值\nminSpareThreads     最小空闲线程数                                                                          10        100\nmaxThreads          最大线程数                                                                            200       1000\nacceptCount         HTTP请求数达到最大线程数后，新请求被放入等待队列，该值为等待队列的最大等待数，队列一旦满了，后续请求会被tomcat拒绝SocketException:   100       1000\n                    Connection refused\nmaxConnections      某一时刻，能够接受的最大连接数, maxConnections满了之后一样是将新请求被放入等待队列,                               10000     10000\n                    不超过acceptCount\nmaxHttpPostSize     请求体最大长度kb                                                                        2097152   视情况\nmaxHttpHeaderSize   请求头最大长度kb                                                                        0         视情况\n\nMaxThreads取值可以按比例推算\n\n1c2g 200\n\n2c4g 400\n\n4c8g 800\n\n这里取整1000\n\n\n# 2. maxThreads，acceptCount，maxConnections三者的关系\n\n * 参数maxThreads是指线程池里最大的活跃线程数\n * 参数maxConnections是最大的tcp连接数，而不是最大的Http请求数，通常一个tcp连接可以处理多个http请求\n * 所以，无论maxThreads和maxConnections谁达到了最大值，Tomcat Server都会将后续的Http请求放入队列中，一旦队列满了，后续Http请求会被tomcat拒绝, 从而抛出SocketException: Connection refused异常\n * 按照多路复用模型，一个TCP连接的已连接、可读、可写事件都会交由线程池去分配和处理\n * 所以，所谓达到了maxThreads和maxConnections这两个阈值，只是一个当前值（瞬时值）\n * 线程池的忙闲程度（吞吐量）取决于可读可写操作的耗时（还包括错误率，断连等）\n * 所以，maxThreads>=maxConnections=资源浪费，maxConnections/maxThreads>10=担心它可能处理不过来，需要设置稍大的maxThreads\n * 系统吞吐量的3个指标 rt, cc, qps都达标的情况下，就不需要设置较大的maxThreads，这需要反复压测得出结论\n * 线程池吞吐量上不去，acceptCount设的再大也无济于事，当然应用服务内存足够大，acceptCount设的大也无妨，但是http客户端一旦超时一样会断开\n * http1.1协议默认都是tcp复用的，一旦超时就会主动断开连接再次重建影响性能，通常浏览器会在一个域名下会建立多个tcp连接提供并发性能\n\n\n# 3. 配置文件参考\n\nserver:\n  tomcat:\n    uri-encoding: UTF-8\n    #初始化线程数\n    min-spare-threads: 100\n    #最大线程数\n    max-threads: 1000\n    #最大链接数\n    max-connections: 10000\n    #最大等待队列长度\n    accept-count: 1000\n    #请求头最大长度kb\n    # max-http-header-size: 1048576\n    #请请求体最大长度kb\n    # max-http-post-size: 2097152\n  #服务http端口\n  port: 8080\n  #链接建立超时时间\n  connection-timeout: 10000\n  servlet:\n    #访问根路径\n    context-path: /test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n",normalizedContent:"# 1. tomcat 主要配置说明\n\n属性名                 说明                                                                               默认值       参考值\nminsparethreads     最小空闲线程数                                                                          10        100\nmaxthreads          最大线程数                                                                            200       1000\nacceptcount         http请求数达到最大线程数后，新请求被放入等待队列，该值为等待队列的最大等待数，队列一旦满了，后续请求会被tomcat拒绝socketexception:   100       1000\n                    connection refused\nmaxconnections      某一时刻，能够接受的最大连接数, maxconnections满了之后一样是将新请求被放入等待队列,                               10000     10000\n                    不超过acceptcount\nmaxhttppostsize     请求体最大长度kb                                                                        2097152   视情况\nmaxhttpheadersize   请求头最大长度kb                                                                        0         视情况\n\nmaxthreads取值可以按比例推算\n\n1c2g 200\n\n2c4g 400\n\n4c8g 800\n\n这里取整1000\n\n\n# 2. maxthreads，acceptcount，maxconnections三者的关系\n\n * 参数maxthreads是指线程池里最大的活跃线程数\n * 参数maxconnections是最大的tcp连接数，而不是最大的http请求数，通常一个tcp连接可以处理多个http请求\n * 所以，无论maxthreads和maxconnections谁达到了最大值，tomcat server都会将后续的http请求放入队列中，一旦队列满了，后续http请求会被tomcat拒绝, 从而抛出socketexception: connection refused异常\n * 按照多路复用模型，一个tcp连接的已连接、可读、可写事件都会交由线程池去分配和处理\n * 所以，所谓达到了maxthreads和maxconnections这两个阈值，只是一个当前值（瞬时值）\n * 线程池的忙闲程度（吞吐量）取决于可读可写操作的耗时（还包括错误率，断连等）\n * 所以，maxthreads>=maxconnections=资源浪费，maxconnections/maxthreads>10=担心它可能处理不过来，需要设置稍大的maxthreads\n * 系统吞吐量的3个指标 rt, cc, qps都达标的情况下，就不需要设置较大的maxthreads，这需要反复压测得出结论\n * 线程池吞吐量上不去，acceptcount设的再大也无济于事，当然应用服务内存足够大，acceptcount设的大也无妨，但是http客户端一旦超时一样会断开\n * http1.1协议默认都是tcp复用的，一旦超时就会主动断开连接再次重建影响性能，通常浏览器会在一个域名下会建立多个tcp连接提供并发性能\n\n\n# 3. 配置文件参考\n\nserver:\n  tomcat:\n    uri-encoding: utf-8\n    #初始化线程数\n    min-spare-threads: 100\n    #最大线程数\n    max-threads: 1000\n    #最大链接数\n    max-connections: 10000\n    #最大等待队列长度\n    accept-count: 1000\n    #请求头最大长度kb\n    # max-http-header-size: 1048576\n    #请请求体最大长度kb\n    # max-http-post-size: 2097152\n  #服务http端口\n  port: 8080\n  #链接建立超时时间\n  connection-timeout: 10000\n  servlet:\n    #访问根路径\n    context-path: /test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n",charsets:{cjk:!0}},{title:"Java代码杂记",frontmatter:{title:"Java代码杂记",date:"2022-05-11T10:48:26.000Z",permalink:"/pages/b3856c/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/30.Java%E4%BB%A3%E7%A0%81%E6%9D%82%E8%AE%B0.html",relativePath:"02.技术应用/01.工作杂货/30.Java代码杂记.md",key:"v-15f02c2b",path:"/pages/b3856c/",headers:[{level:2,title:"1 类相同属性比较",slug:"_1-类相同属性比较",normalizedTitle:"1 类相同属性比较",charIndex:2},{level:2,title:"2 驼峰字符串转下划线字符串",slug:"_2-驼峰字符串转下划线字符串",normalizedTitle:"2 驼峰字符串转下划线字符串",charIndex:1e3}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 类相同属性比较 2 驼峰字符串转下划线字符串",content:'# 1 类相同属性比较\n\npublic class Test {\n  public static void main(String[]args)throws NoSuchFieldException {\n    Map<String, String> map1 = new HashMap<>();\n    Field[] fields = OmsOrderApiVO.class.getDeclaredFields();\n    for (Field field : fields) {\n      String fieldName = field.getName();\n      ApiModelProperty annotation = field.getAnnotation(ApiModelProperty.class);\n      String val = "-";\n      if (annotation != null) {\n        val = annotation.value();\n      }\n      map1.put(fieldName, val);\n    }\n\n    Map<String, String> map2 = new HashMap<>();\n    Field[] fields2 = OmsWaybillApiDTO.class.getDeclaredFields();\n    for (Field field2 : fields2) {\n      String fieldName = field2.getName();\n      ApiModelProperty annotation = field2.getAnnotation(ApiModelProperty.class);\n      String val = "-";\n      if (annotation != null) {\n        val = annotation.value();\n      }\n      map2.put(fieldName, val);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 2 驼峰字符串转下划线字符串\n\npublic class Test {\n  public static void main(String[] args) throws NoSuchFieldException {\n    Map<String, String> map1 = new HashMap<>();\n    Field[] fields = SpmCashBillDetail.class.getDeclaredFields();\n    for (Field field : fields) {\n      String fieldName = field.getName();\n      System.out.println(toUnderlineCase(fieldName).toUpperCase());\n    }\n  }\n\n  public static String toUnderlineCase(String camelCaseStr) {\n    if (camelCaseStr == null) {\n      return null;\n    }\n    // 将驼峰字符串转换成数组\n    char[] charArray = camelCaseStr.toCharArray();\n    StringBuffer buffer = new StringBuffer();\n    //处理字符串\n    for (int i = 0, l = charArray.length; i < l; i++) {\n      if (charArray[i] >= 65 && charArray[i] <= 90) {\n        buffer.append("_").append(charArray[i] += 32);\n      } else {\n        buffer.append(charArray[i]);\n      }\n    }\n    return buffer.toString();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',normalizedContent:'# 1 类相同属性比较\n\npublic class test {\n  public static void main(string[]args)throws nosuchfieldexception {\n    map<string, string> map1 = new hashmap<>();\n    field[] fields = omsorderapivo.class.getdeclaredfields();\n    for (field field : fields) {\n      string fieldname = field.getname();\n      apimodelproperty annotation = field.getannotation(apimodelproperty.class);\n      string val = "-";\n      if (annotation != null) {\n        val = annotation.value();\n      }\n      map1.put(fieldname, val);\n    }\n\n    map<string, string> map2 = new hashmap<>();\n    field[] fields2 = omswaybillapidto.class.getdeclaredfields();\n    for (field field2 : fields2) {\n      string fieldname = field2.getname();\n      apimodelproperty annotation = field2.getannotation(apimodelproperty.class);\n      string val = "-";\n      if (annotation != null) {\n        val = annotation.value();\n      }\n      map2.put(fieldname, val);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 2 驼峰字符串转下划线字符串\n\npublic class test {\n  public static void main(string[] args) throws nosuchfieldexception {\n    map<string, string> map1 = new hashmap<>();\n    field[] fields = spmcashbilldetail.class.getdeclaredfields();\n    for (field field : fields) {\n      string fieldname = field.getname();\n      system.out.println(tounderlinecase(fieldname).touppercase());\n    }\n  }\n\n  public static string tounderlinecase(string camelcasestr) {\n    if (camelcasestr == null) {\n      return null;\n    }\n    // 将驼峰字符串转换成数组\n    char[] chararray = camelcasestr.tochararray();\n    stringbuffer buffer = new stringbuffer();\n    //处理字符串\n    for (int i = 0, l = chararray.length; i < l; i++) {\n      if (chararray[i] >= 65 && chararray[i] <= 90) {\n        buffer.append("_").append(chararray[i] += 32);\n      } else {\n        buffer.append(chararray[i]);\n      }\n    }\n    return buffer.tostring();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',charsets:{cjk:!0}},{title:"SQL脚本杂记",frontmatter:{title:"SQL脚本杂记",date:"2022-05-11T10:49:00.000Z",permalink:"/pages/94c02c/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/33.SQL%E8%84%9A%E6%9C%AC%E6%9D%82%E8%AE%B0.html",relativePath:"02.技术应用/01.工作杂货/33.SQL脚本杂记.md",key:"v-6b29efa8",path:"/pages/94c02c/",headers:[{level:2,title:"1 Oracle根据表名反查job和存储过程",slug:"_1-oracle根据表名反查job和存储过程",normalizedTitle:"1 oracle根据表名反查job和存储过程",charIndex:2},{level:2,title:"2 Oracle查询库表所有列",slug:"_2-oracle查询库表所有列",normalizedTitle:"2 oracle查询库表所有列",charIndex:325}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Oracle根据表名反查job和存储过程 2 Oracle查询库表所有列",content:"# 1 Oracle根据表名反查job和存储过程\n\nselect *\nfrom user_dependencies\nwhere referenced_name=upper('TAB_NET_SIGNOMITARRIVE_STAT')\n\n\n1\n2\n3\n\n\nselect *\nfrom user_jobs\nwhere upper(what) like '%SIGNOMITARRIVE%'\n\n\n1\n2\n3\n\n\nselect *\nfrom tab_job_monitor\nwhere upper(procedure_name) like '%SIGNOMITARRIVE%'\norder by createdate desc\n\n\n1\n2\n3\n4\n\n\n\n# 2 Oracle查询库表所有列\n\nselect\n  a.column_name 列名,\n  b.COMMENTS 注释,\n  CASE a.nullable\n      WHEN 'Y' THEN ''\n      WHEN 'N' THEN '否'\n      END 是否可为空\nfrom all_tab_columns a\n    left join user_col_comments b\n        on a.COLUMN_NAME = b.COLUMN_NAME\n        and a.TABLE_NAME = b.TABLE_NAME\nwhere a.table_name='表名'\n  AND a.owner = UPPER('用户名');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",normalizedContent:"# 1 oracle根据表名反查job和存储过程\n\nselect *\nfrom user_dependencies\nwhere referenced_name=upper('tab_net_signomitarrive_stat')\n\n\n1\n2\n3\n\n\nselect *\nfrom user_jobs\nwhere upper(what) like '%signomitarrive%'\n\n\n1\n2\n3\n\n\nselect *\nfrom tab_job_monitor\nwhere upper(procedure_name) like '%signomitarrive%'\norder by createdate desc\n\n\n1\n2\n3\n4\n\n\n\n# 2 oracle查询库表所有列\n\nselect\n  a.column_name 列名,\n  b.comments 注释,\n  case a.nullable\n      when 'y' then ''\n      when 'n' then '否'\n      end 是否可为空\nfrom all_tab_columns a\n    left join user_col_comments b\n        on a.column_name = b.column_name\n        and a.table_name = b.table_name\nwhere a.table_name='表名'\n  and a.owner = upper('用户名');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",charsets:{cjk:!0}},{title:"批量算费本地工具类",frontmatter:{title:"批量算费本地工具类",date:"2022-05-11T10:02:40.000Z",permalink:"/pages/1cacdd/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/50.%E6%89%B9%E9%87%8F%E7%AE%97%E8%B4%B9%E6%9C%AC%E5%9C%B0%E5%B7%A5%E5%85%B7%E7%B1%BB.html",relativePath:"02.技术应用/01.工作杂货/50.批量算费本地工具类.md",key:"v-e32e9ca0",path:"/pages/1cacdd/",headers:[{level:2,title:"1 工具类",slug:"_1-工具类",normalizedTitle:"1 工具类",charIndex:2},{level:2,title:"2 读取文件（示例）",slug:"_2-读取文件-示例",normalizedTitle:"2 读取文件（示例）",charIndex:5529}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 工具类 2 读取文件（示例）",content:'# 1 工具类\n\n@Slf4j\npublic class Recost {\n\n    //重算费请求接口\n    private static final String URL = "https://xxx/xxx/xxx/reComCost";\n    //算费接口请求头设置：token ------- 使用时替换生产用户登录的token\n    private static final String HEADER_AUTHTOKEN = "263464be9c924309af15b7ec21d87739";\n    //算费接口请求头设置：路由\n    private static final String HEADER_ROUTENAME = "sendWaybillSite";\n\n    //几个线程并发执行\n    //所有运单号分成几组执行\n    private static final int SPLIT_LEN = 6;\n    //每次算费运单个数\n    private static final int WAYBILL_COST_SIZE = 250;\n\n    //读取的文件名  ------- 放resources目录下\n    private static final String FILE_NAME = "waybillno.txt";\n\n    private static ExecutorService executorService = Executors.newFixedThreadPool(SPLIT_LEN);\n\n    public static void main(String[] args) {\n        try {\n            long l1 = System.currentTimeMillis();\n            List<String> waybillStrList = loadWaybillNoParams();\n            int len = (int) Math.ceil((double) waybillStrList.size() / SPLIT_LEN);\n            List<List<String>> waybillGroupList = groupList(waybillStrList, len);\n\n            List<CompletableFuture<Void>> futureList = new ArrayList<>();\n            for (List<String> list : waybillGroupList) {\n                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n                    for (String waybillStr : list) {\n                        String params = "waybillNos=" + waybillStr;\n                        String response = sendPost(URL, params);\n                        log.info(response);\n                    }\n                }, executorService);\n                futureList.add(future);\n            }\n            CompletableFuture<Void> futureAll = CompletableFuture.allOf(futureList.stream().toArray(CompletableFuture[]::new));\n            futureAll.join();\n            long l2 = System.currentTimeMillis();\n\n            log.info("接口耗时：{}", (l2 - l1));\n\n            executorService.shutdown();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /*\n     * List分割\n     */\n    public static List<List<String>> groupList(List<String> list, int len) {\n        List<List<String>> listGroup = new ArrayList<>();\n        int listSize = list.size();\n        //子集合的长度\n        int toIndex = 2;\n        for (int i = 0; i < list.size(); i += len) {\n            if (i + len > listSize) {\n                len = listSize - i;\n            }\n            List<String> newList = list.subList(i, i + len);\n            listGroup.add(newList);\n        }\n        return listGroup;\n    }\n\n    public static List<String> loadWaybillNoParams() throws IOException, URISyntaxException {\n        List<String> resultList = new ArrayList<>();\n        URI uri = ClassLoader.getSystemResource(FILE_NAME).toURI();\n        List<String> list = Files.readAllLines(Paths.get(uri));\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < list.size(); i++) {\n            int pos = i + 1;\n            sb.append(list.get(i));\n            if (pos % WAYBILL_COST_SIZE == 0 || pos == list.size()) {\n                resultList.add(sb.toString());\n                sb = new StringBuilder();\n            } else {\n                sb.append(",");\n            }\n        }\n        return resultList;\n    }\n\n    /**\n     * @param url\n     * @param params name1=value1&name2=value2\n     * @return\n     */\n    public static String sendPost(String url, String params) {\n        PrintWriter out;\n        out = null;\n        BufferedReader in = null;\n        StringBuilder result = new StringBuilder();\n        try {\n            URL realUrl = new URL(url);\n            // 打开和URL之间的连接\n            URLConnection conn = realUrl.openConnection();\n            // 设置通用的请求属性\n            conn.setRequestProperty("authToken", HEADER_AUTHTOKEN);\n            conn.setRequestProperty("routeName", HEADER_ROUTENAME);\n            conn.setRequestProperty("accept", "*/*");\n            conn.setRequestProperty("connection", "Keep-Alive");\n            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");\n            // 发送POST请求必须设置如下两行\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            // 获取URLConnection对象对应的输出流\n            out = new PrintWriter(conn.getOutputStream());\n            // 发送请求参数\n            out.print(params);\n            // flush输出流的缓冲\n            out.flush();\n            // 定义BufferedReader输入流来读取URL的响应\n            in = new BufferedReader(\n                    new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //使用finally块来关闭输出流、输入流\n        finally{\n            try{\n                if(out!=null){\n                    out.close();\n                }\n                if(in!=null){\n                    in.close();\n                }\n            }\n            catch(IOException ex){\n                ex.printStackTrace();\n            }\n        }\n        return result.toString();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n\n\n\n# 2 读取文件（示例）\n\nwaybillno.txt\n\nabc300006078626\nabc300006043651\nabc300006201477\nabc300006251049\n\n\n1\n2\n3\n4\n',normalizedContent:'# 1 工具类\n\n@slf4j\npublic class recost {\n\n    //重算费请求接口\n    private static final string url = "https://xxx/xxx/xxx/recomcost";\n    //算费接口请求头设置：token ------- 使用时替换生产用户登录的token\n    private static final string header_authtoken = "263464be9c924309af15b7ec21d87739";\n    //算费接口请求头设置：路由\n    private static final string header_routename = "sendwaybillsite";\n\n    //几个线程并发执行\n    //所有运单号分成几组执行\n    private static final int split_len = 6;\n    //每次算费运单个数\n    private static final int waybill_cost_size = 250;\n\n    //读取的文件名  ------- 放resources目录下\n    private static final string file_name = "waybillno.txt";\n\n    private static executorservice executorservice = executors.newfixedthreadpool(split_len);\n\n    public static void main(string[] args) {\n        try {\n            long l1 = system.currenttimemillis();\n            list<string> waybillstrlist = loadwaybillnoparams();\n            int len = (int) math.ceil((double) waybillstrlist.size() / split_len);\n            list<list<string>> waybillgrouplist = grouplist(waybillstrlist, len);\n\n            list<completablefuture<void>> futurelist = new arraylist<>();\n            for (list<string> list : waybillgrouplist) {\n                completablefuture<void> future = completablefuture.runasync(() -> {\n                    for (string waybillstr : list) {\n                        string params = "waybillnos=" + waybillstr;\n                        string response = sendpost(url, params);\n                        log.info(response);\n                    }\n                }, executorservice);\n                futurelist.add(future);\n            }\n            completablefuture<void> futureall = completablefuture.allof(futurelist.stream().toarray(completablefuture[]::new));\n            futureall.join();\n            long l2 = system.currenttimemillis();\n\n            log.info("接口耗时：{}", (l2 - l1));\n\n            executorservice.shutdown();\n\n        } catch (exception e) {\n            e.printstacktrace();\n        }\n    }\n\n    /*\n     * list分割\n     */\n    public static list<list<string>> grouplist(list<string> list, int len) {\n        list<list<string>> listgroup = new arraylist<>();\n        int listsize = list.size();\n        //子集合的长度\n        int toindex = 2;\n        for (int i = 0; i < list.size(); i += len) {\n            if (i + len > listsize) {\n                len = listsize - i;\n            }\n            list<string> newlist = list.sublist(i, i + len);\n            listgroup.add(newlist);\n        }\n        return listgroup;\n    }\n\n    public static list<string> loadwaybillnoparams() throws ioexception, urisyntaxexception {\n        list<string> resultlist = new arraylist<>();\n        uri uri = classloader.getsystemresource(file_name).touri();\n        list<string> list = files.readalllines(paths.get(uri));\n        stringbuilder sb = new stringbuilder();\n        for (int i = 0; i < list.size(); i++) {\n            int pos = i + 1;\n            sb.append(list.get(i));\n            if (pos % waybill_cost_size == 0 || pos == list.size()) {\n                resultlist.add(sb.tostring());\n                sb = new stringbuilder();\n            } else {\n                sb.append(",");\n            }\n        }\n        return resultlist;\n    }\n\n    /**\n     * @param url\n     * @param params name1=value1&name2=value2\n     * @return\n     */\n    public static string sendpost(string url, string params) {\n        printwriter out;\n        out = null;\n        bufferedreader in = null;\n        stringbuilder result = new stringbuilder();\n        try {\n            url realurl = new url(url);\n            // 打开和url之间的连接\n            urlconnection conn = realurl.openconnection();\n            // 设置通用的请求属性\n            conn.setrequestproperty("authtoken", header_authtoken);\n            conn.setrequestproperty("routename", header_routename);\n            conn.setrequestproperty("accept", "*/*");\n            conn.setrequestproperty("connection", "keep-alive");\n            conn.setrequestproperty("user-agent", "mozilla/4.0 (compatible; msie 6.0; windows nt 5.1;sv1)");\n            // 发送post请求必须设置如下两行\n            conn.setdooutput(true);\n            conn.setdoinput(true);\n            // 获取urlconnection对象对应的输出流\n            out = new printwriter(conn.getoutputstream());\n            // 发送请求参数\n            out.print(params);\n            // flush输出流的缓冲\n            out.flush();\n            // 定义bufferedreader输入流来读取url的响应\n            in = new bufferedreader(\n                    new inputstreamreader(conn.getinputstream()));\n            string line;\n            while ((line = in.readline()) != null) {\n                result.append(line);\n            }\n        } catch (exception e) {\n            e.printstacktrace();\n        }\n        //使用finally块来关闭输出流、输入流\n        finally{\n            try{\n                if(out!=null){\n                    out.close();\n                }\n                if(in!=null){\n                    in.close();\n                }\n            }\n            catch(ioexception ex){\n                ex.printstacktrace();\n            }\n        }\n        return result.tostring();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n\n\n\n# 2 读取文件（示例）\n\nwaybillno.txt\n\nabc300006078626\nabc300006043651\nabc300006201477\nabc300006251049\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0}},{title:"Apollo配置模糊查询",frontmatter:{title:"Apollo配置模糊查询",date:"2022-05-11T10:42:42.000Z",permalink:"/pages/87ba0f/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/53.Apollo%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2.html",relativePath:"02.技术应用/01.工作杂货/53.Apollo配置模糊查询.md",key:"v-eb618af4",path:"/pages/87ba0f/",headers:[{level:2,title:"1 Apollo配置模糊查询",slug:"_1-apollo配置模糊查询",normalizedTitle:"1 apollo配置模糊查询",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Apollo配置模糊查询",content:"# 1 Apollo配置模糊查询\n\nselect (\n    select appid \n    from namespace \n    where id = NamespaceId\n    ), value \nfrom item \nwhere value like '%要搜索的配置%'；\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 1 apollo配置模糊查询\n\nselect (\n    select appid \n    from namespace \n    where id = namespaceid\n    ), value \nfrom item \nwhere value like '%要搜索的配置%'；\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0}},{title:"开发问题记录",frontmatter:{title:"开发问题记录",date:"2022-05-11T15:57:03.000Z",permalink:"/pages/8fe4ca/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/70.%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",relativePath:"02.技术应用/01.工作杂货/70.开发问题记录.md",key:"v-522398cf",path:"/pages/8fe4ca/",headers:[{level:2,title:"1 Es数据与Mysql数据不一致",slug:"_1-es数据与mysql数据不一致",normalizedTitle:"1 es数据与mysql数据不一致",charIndex:2},{level:2,title:"2 内部feign自调用",slug:"_2-内部feign自调用",normalizedTitle:"2 内部feign自调用",charIndex:89},{level:2,title:"3 服务切oracle后出现内存溢出情况",slug:"_3-服务切oracle后出现内存溢出情况",normalizedTitle:"3 服务切oracle后出现内存溢出情况",charIndex:234},{level:2,title:"4 服务偶发性所有接口变慢",slug:"_4-服务偶发性所有接口变慢",normalizedTitle:"4 服务偶发性所有接口变慢",charIndex:424},{level:2,title:"5 MQ消息发送阻塞影响相关接口调用变慢",slug:"_5-mq消息发送阻塞影响相关接口调用变慢",normalizedTitle:"5 mq消息发送阻塞影响相关接口调用变慢",charIndex:723},{level:2,title:"6 服务消费MQ消息自动ACK改手动ACK出现消息堆积",slug:"_6-服务消费mq消息自动ack改手动ack出现消息堆积",normalizedTitle:"6 服务消费mq消息自动ack改手动ack出现消息堆积",charIndex:851},{level:2,title:"7 young gc 业务量大时耗时持续飙高",slug:"_7-young-gc-业务量大时耗时持续飙高",normalizedTitle:"7 young gc 业务量大时耗时持续飙高",charIndex:1141},{level:2,title:"8 查询接口超时",slug:"_8-查询接口超时",normalizedTitle:"8 查询接口超时",charIndex:1343},{level:2,title:"9 动态列导出列顺序错乱",slug:"_9-动态列导出列顺序错乱",normalizedTitle:"9 动态列导出列顺序错乱",charIndex:1513}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 Es数据与Mysql数据不一致 2 内部feign自调用 3 服务切oracle后出现内存溢出情况 4 服务偶发性所有接口变慢 5 MQ消息发送阻塞影响相关接口调用变慢 6 服务消费MQ消息自动ACK改手动ACK出现消息堆积 7 young gc 业务量大时耗时持续飙高 8 查询接口超时 9 动态列导出列顺序错乱",content:"# 1 Es数据与Mysql数据不一致\n\n原因： 批量操作高峰期，频繁更新数据库导致同步堆积，数据未能及时同步到Es。\n\n解决方案： 批量任务控制并发数，控制更新速率。\n\n\n# 2 内部feign自调用\n\n描述： 订单运单解藕，外部接口调用临时改内部feign调用自己，服务重启后出现大量错误。\n\n原因： 节点启动有先后顺序，先启动的节点feign调用自己服务时调用的是旧节点，导致调用不到新接口。\n\n解决方案： 避免使用feign调用自己服务这种临时方案。\n\n\n# 3 服务切oracle后出现内存溢出情况\n\n原因： 按多个运单号查询列表，先查一个月内将命中数据放到内存，查不到的去掉时间范围再查，最后合并内存中的数据及后面查的数据高峰期接口调用量大导致内存迅速被占满。\n\n解决方案： 按运单号查询数据库，由于运单号是全局唯一索引，查询速度足够快，不需要先查一个月再扩大到全部。\n直接按运单号查询即可，这样就不需要将运单数据放在缓存中。\n\n\n# 4 服务偶发性所有接口变慢\n\n原因： 数据库连接数配置未生效，默认只有8，导致业务高峰期获取不到连接数影响接口响应。\n代码里面获取的配置路径是spring.datasource.maxActive，配置文件里面配的是sping.datasource.druid.maxActive。\n\n解决方案： 数据库配置调整正确，例：\n\nspring:\n  datasource:\n    druid:\n      initialSize: 20\n      minIdle: 20\n      maxActive: 100\n      maxWait: 60000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5 MQ消息发送阻塞影响相关接口调用变慢\n\n原因： MQ消息消费缓慢，致使队列内存达到30多G触发流控。\n\n解决方案：\n1.删除多余、无效的消息发送\n2.优化下游账单消费速度\n3.优化消息体大小，去除不必要字段（后续）\n4.调整为惰性队列（后续）\n\n\n# 6 服务消费MQ消息自动ACK改手动ACK出现消息堆积\n\n原因： MQ消费端指定了headers，导致不是该headers的消息一直未ack。\n\n解决方案： 非指定headers的消息手动确认.\n\nObject o = payload.getHeaders().get(WAYBILL_MQ_HEADER);\nif (!String.valueOf(o).equals(WAYBILL_MQ_HEADER_VALUE)) {\n  channel.basicAck(deliveryTag, false); // 手动确认\n  return;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 7 young gc 业务量大时耗时持续飙高\n\n原因： 猜测跨年代对象引用\n\n解决方案：\nJVM调优 -XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=2M\n调优原因：经分析每个线程从MQ拉取的对象信息为0.23M，MQ最大线程数为10，默认为0，\n当业务量飙升时，线程扩容到10个，那么将这部分的大对象直接放入老年代，减轻年轻代压力。\n\n\n# 8 查询接口超时\n\n原因： 使用了多表关联查询，其中还有一张大表，导致了查询速度缓慢。单条达到了40-80ms,当批量任务200条数据的请求过来，每次都需要处理将近8-16S。\n\n解决方案： 拆sql语句。将多表的关联查询，拆成单表查询，并保证每个查询语句都落到索引，提高每张表的查询效率。优化后200条的批量在1s内可执行完成。\n\n\n# 9 动态列导出列顺序错乱\n\n原因： 在动态列导出时，每次都会去修改VO类的导出字段顺序，在并发导出时，新请求动态列顺序会覆盖上一次动态列顺序，导致生成的文档顺序错乱。\n覆盖原因是在类加载时会将类元信息存入元空间，每次修改都会更新元空间中的类信息，而不管有几个线程，在同一个JVM中，指向的类元信息都是同一个，所以在修改类元信息时，会互相影响。 解决方案：\n\nsynchronized (voClass) {\n    List&lt;String> columnSet = new ArrayList&lt;>();\n    columnSet = customColumns.stream().map(item -> item.getName()).collect(Collectors.toList());\n    //构建动态导出header\n    Class&lt;V> headerClass = this.getCustomerHeaderClass(t, voClass, columnSet);\n    excelWriter.write(resultList, writeSheet);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n在导出动态列执行write之前，加锁重新设置导出的列顺序，保证每次的列顺序都是当前线程所需要的，防止互相覆盖。",normalizedContent:"# 1 es数据与mysql数据不一致\n\n原因： 批量操作高峰期，频繁更新数据库导致同步堆积，数据未能及时同步到es。\n\n解决方案： 批量任务控制并发数，控制更新速率。\n\n\n# 2 内部feign自调用\n\n描述： 订单运单解藕，外部接口调用临时改内部feign调用自己，服务重启后出现大量错误。\n\n原因： 节点启动有先后顺序，先启动的节点feign调用自己服务时调用的是旧节点，导致调用不到新接口。\n\n解决方案： 避免使用feign调用自己服务这种临时方案。\n\n\n# 3 服务切oracle后出现内存溢出情况\n\n原因： 按多个运单号查询列表，先查一个月内将命中数据放到内存，查不到的去掉时间范围再查，最后合并内存中的数据及后面查的数据高峰期接口调用量大导致内存迅速被占满。\n\n解决方案： 按运单号查询数据库，由于运单号是全局唯一索引，查询速度足够快，不需要先查一个月再扩大到全部。\n直接按运单号查询即可，这样就不需要将运单数据放在缓存中。\n\n\n# 4 服务偶发性所有接口变慢\n\n原因： 数据库连接数配置未生效，默认只有8，导致业务高峰期获取不到连接数影响接口响应。\n代码里面获取的配置路径是spring.datasource.maxactive，配置文件里面配的是sping.datasource.druid.maxactive。\n\n解决方案： 数据库配置调整正确，例：\n\nspring:\n  datasource:\n    druid:\n      initialsize: 20\n      minidle: 20\n      maxactive: 100\n      maxwait: 60000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5 mq消息发送阻塞影响相关接口调用变慢\n\n原因： mq消息消费缓慢，致使队列内存达到30多g触发流控。\n\n解决方案：\n1.删除多余、无效的消息发送\n2.优化下游账单消费速度\n3.优化消息体大小，去除不必要字段（后续）\n4.调整为惰性队列（后续）\n\n\n# 6 服务消费mq消息自动ack改手动ack出现消息堆积\n\n原因： mq消费端指定了headers，导致不是该headers的消息一直未ack。\n\n解决方案： 非指定headers的消息手动确认.\n\nobject o = payload.getheaders().get(waybill_mq_header);\nif (!string.valueof(o).equals(waybill_mq_header_value)) {\n  channel.basicack(deliverytag, false); // 手动确认\n  return;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 7 young gc 业务量大时耗时持续飙高\n\n原因： 猜测跨年代对象引用\n\n解决方案：\njvm调优 -xx:maxtenuringthreshold=5 -xx:pretenuresizethreshold=2m\n调优原因：经分析每个线程从mq拉取的对象信息为0.23m，mq最大线程数为10，默认为0，\n当业务量飙升时，线程扩容到10个，那么将这部分的大对象直接放入老年代，减轻年轻代压力。\n\n\n# 8 查询接口超时\n\n原因： 使用了多表关联查询，其中还有一张大表，导致了查询速度缓慢。单条达到了40-80ms,当批量任务200条数据的请求过来，每次都需要处理将近8-16s。\n\n解决方案： 拆sql语句。将多表的关联查询，拆成单表查询，并保证每个查询语句都落到索引，提高每张表的查询效率。优化后200条的批量在1s内可执行完成。\n\n\n# 9 动态列导出列顺序错乱\n\n原因： 在动态列导出时，每次都会去修改vo类的导出字段顺序，在并发导出时，新请求动态列顺序会覆盖上一次动态列顺序，导致生成的文档顺序错乱。\n覆盖原因是在类加载时会将类元信息存入元空间，每次修改都会更新元空间中的类信息，而不管有几个线程，在同一个jvm中，指向的类元信息都是同一个，所以在修改类元信息时，会互相影响。 解决方案：\n\nsynchronized (voclass) {\n    list&lt;string> columnset = new arraylist&lt;>();\n    columnset = customcolumns.stream().map(item -> item.getname()).collect(collectors.tolist());\n    //构建动态导出header\n    class&lt;v> headerclass = this.getcustomerheaderclass(t, voclass, columnset);\n    excelwriter.write(resultlist, writesheet);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n在导出动态列执行write之前，加锁重新设置导出的列顺序，保证每次的列顺序都是当前线程所需要的，防止互相覆盖。",charsets:{cjk:!0}},{title:"机器配置参考",frontmatter:{title:"机器配置参考",date:"2022-04-28T18:08:53.000Z",permalink:"/pages/4a8a37/",categories:["技术应用","工作杂货"],tags:[null],author:{name:"luoxiaofeng"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/01.%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%B4%A7/99.%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83.html",relativePath:"02.技术应用/01.工作杂货/99.机器配置参考.md",key:"v-182434ca",path:"/pages/4a8a37/",headers:[{level:2,title:"机器配置备忘",slug:"机器配置备忘",normalizedTitle:"机器配置备忘",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"机器配置备忘",content:"# 机器配置备忘\n\njava应用4c8g\n\nrabbitMQ 16c64g\n\nes 16c64g",normalizedContent:"# 机器配置备忘\n\njava应用4c8g\n\nrabbitmq 16c64g\n\nes 16c64g",charsets:{cjk:!0}},{title:"IntelliJ IDEA",frontmatter:{title:"IntelliJ IDEA",date:"2022-05-08T19:38:18.000Z",permalink:"/pages/43b3b2/",categories:["技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/00.IntelliJ%20IDEA.html",relativePath:"02.技术应用/03.技巧备忘/00.IntelliJ IDEA.md",key:"v-d8432bb6",path:"/pages/43b3b2/",headers:[{level:2,title:"1 常用快捷键（MAC）",slug:"_1-常用快捷键-mac",normalizedTitle:"1 常用快捷键（mac）",charIndex:2},{level:2,title:"2 推荐插件",slug:"_2-推荐插件",normalizedTitle:"2 推荐插件",charIndex:224},{level:3,title:"2.1 RestfulTool",slug:"_2-1-restfultool",normalizedTitle:"2.1 restfultool",charIndex:235},{level:3,title:"2.2 Translation",slug:"_2-2-translation",normalizedTitle:"2.2 translation",charIndex:437},{level:3,title:"2.3 MyBatisX",slug:"_2-3-mybatisx",normalizedTitle:"2.3 mybatisx",charIndex:500},{level:3,title:"2.4 IDE Eval Reset",slug:"_2-4-ide-eval-reset",normalizedTitle:"2.4 ide eval reset",charIndex:517},{level:2,title:"3 正则搜索",slug:"_3-正则搜索",normalizedTitle:"3 正则搜索",charIndex:540}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 常用快捷键（MAC） 2 推荐插件 2.1 RestfulTool 2.2 Translation 2.3 MyBatisX 2.4 IDE Eval Reset 3 正则搜索",content:"# 1 常用快捷键（MAC）\n\n⌘ + N   生成构造方法或getter、setter\n\n⌥ + ⌘  + V   给新建对象创建变量\n\n⌃ + O   覆盖方法\n\n⌃ + I   实现方法\n\n⌘ + ⌥ + L   格式化代码\n\n⌃ + ⌥ + O   优化import\n\n⌘  +  O   查找类文件\n\n⌘  +  ⇧  +  O   查找所有类型文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2 推荐插件\n\n\n# 2.1 RestfulTool\n\n1、根据 URL 直接跳转到对应的方法定义。\n\n2、提供了一个 Services tree 的显示窗口。\n\n3、一个简单的 http 请求工具。\n\n4、直接导航到方法，复制接口地址，复制接口，复制方法参数。\n\n使用方法\n\n1、执行全局URL查找定位 按快捷键：command+option+/\n\n2、提供了一个 Services tree 的API接口显示窗口\n\n\n# 2.2 Translation\n\n翻译插件。可自定义快捷键，方便使用。如：control + command + U\n\n\n# 2.3 MyBatisX\n\n\n# 2.4 IDE Eval Reset\n\n\n# 3 正则搜索\n\n正则匹配例子：搜索所有指定标签的行\n\n(.*)@OperationParamLog(.*)\n(.*)@OperationDeleteLog(\\(.*)\n\n\n1\n2\n",normalizedContent:"# 1 常用快捷键（mac）\n\n⌘ + n   生成构造方法或getter、setter\n\n⌥ + ⌘  + v   给新建对象创建变量\n\n⌃ + o   覆盖方法\n\n⌃ + i   实现方法\n\n⌘ + ⌥ + l   格式化代码\n\n⌃ + ⌥ + o   优化import\n\n⌘  +  o   查找类文件\n\n⌘  +  ⇧  +  o   查找所有类型文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2 推荐插件\n\n\n# 2.1 restfultool\n\n1、根据 url 直接跳转到对应的方法定义。\n\n2、提供了一个 services tree 的显示窗口。\n\n3、一个简单的 http 请求工具。\n\n4、直接导航到方法，复制接口地址，复制接口，复制方法参数。\n\n使用方法\n\n1、执行全局url查找定位 按快捷键：command+option+/\n\n2、提供了一个 services tree 的api接口显示窗口\n\n\n# 2.2 translation\n\n翻译插件。可自定义快捷键，方便使用。如：control + command + u\n\n\n# 2.3 mybatisx\n\n\n# 2.4 ide eval reset\n\n\n# 3 正则搜索\n\n正则匹配例子：搜索所有指定标签的行\n\n(.*)@operationparamlog(.*)\n(.*)@operationdeletelog(\\(.*)\n\n\n1\n2\n",charsets:{cjk:!0}},{title:"Git其他仓库分支合并",frontmatter:{title:"Git其他仓库分支合并",date:"2022-05-08T20:53:00.000Z",permalink:"/pages/82c18a/",categories:["技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/06.Git%E5%85%B6%E4%BB%96%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6.html",relativePath:"02.技术应用/03.技巧备忘/06.Git其他仓库分支合并.md",key:"v-71af77ce",path:"/pages/82c18a/",headers:[{level:2,title:"代码合并",slug:"代码合并",normalizedTitle:"代码合并",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"代码合并",content:"# 代码合并\n\n1.Idea工具上操作，选择工具栏中Git的Manage Remotes选项。\n\n2.添加其他仓库的地址，该仓库的代码结构需与当前仓库的代码结构一样。\n\n3.添加完后，在提交历史中可查看其他仓库的历史。\n\n4.可选中其他仓库的提交记录合并到当前仓库开发分支。",normalizedContent:"# 代码合并\n\n1.idea工具上操作，选择工具栏中git的manage remotes选项。\n\n2.添加其他仓库的地址，该仓库的代码结构需与当前仓库的代码结构一样。\n\n3.添加完后，在提交历史中可查看其他仓库的历史。\n\n4.可选中其他仓库的提交记录合并到当前仓库开发分支。",charsets:{cjk:!0}},{title:"Mac新建软连接",frontmatter:{title:"Mac新建软连接",date:"2022-05-05T11:20:43.000Z",permalink:"/pages/f739c1/",categories:["技术应用","技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/09.Mac%E6%96%B0%E5%BB%BA%E8%BD%AF%E8%BF%9E%E6%8E%A5.html",relativePath:"02.技术应用/03.技巧备忘/09.Mac新建软连接.md",key:"v-1cc965f3",path:"/pages/f739c1/",lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:null,content:"Mac根目录下无法新建文件夹，可通过软连接方式实现效果。\n\nluoxiaofeng@luoxiaofengdeMacBook-Pro blog % sudo vi /etc/synthetic.conf\n\ndata    /Users/data\nimg     /Users/luoxiaofeng/githubprojects/blog/docs/.vuepress/public/img\n\n\n1\n2\n3\n4\n\n\n重启生效",normalizedContent:"mac根目录下无法新建文件夹，可通过软连接方式实现效果。\n\nluoxiaofeng@luoxiaofengdemacbook-pro blog % sudo vi /etc/synthetic.conf\n\ndata    /users/data\nimg     /users/luoxiaofeng/githubprojects/blog/docs/.vuepress/public/img\n\n\n1\n2\n3\n4\n\n\n重启生效",charsets:{cjk:!0}},{title:"Nginx安装",frontmatter:{title:"Nginx安装",date:"2022-05-10T11:16:44.000Z",permalink:"/pages/31c6f3/",categories:["技术应用","技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/12.Nginx%E5%AE%89%E8%A3%85.html",relativePath:"02.技术应用/03.技巧备忘/12.Nginx安装.md",key:"v-46df2ec5",path:"/pages/31c6f3/",headers:[{level:2,title:"1 MAC上安装nginx",slug:"_1-mac上安装nginx",normalizedTitle:"1 mac上安装nginx",charIndex:2},{level:3,title:"1.1 判断mac电脑是否已安装brew",slug:"_1-1-判断mac电脑是否已安装brew",normalizedTitle:"1.1 判断mac电脑是否已安装brew",charIndex:20},{level:3,title:"1.2 如果没有安装brew，可以用国内版本安装",slug:"_1-2-如果没有安装brew-可以用国内版本安装",normalizedTitle:"1.2 如果没有安装brew，可以用国内版本安装",charIndex:63},{level:3,title:"1.3 查询需要安装的nginx包是否存在",slug:"_1-3-查询需要安装的nginx包是否存在",normalizedTitle:"1.3 查询需要安装的nginx包是否存在",charIndex:372},{level:3,title:"1.4 安装nginx",slug:"_1-4-安装nginx",normalizedTitle:"1.4 安装nginx",charIndex:422},{level:3,title:"1.5 安装成功后，查看nginx安装目录",slug:"_1-5-安装成功后-查看nginx安装目录",normalizedTitle:"1.5 安装成功后，查看nginx安装目录",charIndex:463},{level:3,title:"1.6 启动nginx",slug:"_1-6-启动nginx",normalizedTitle:"1.6 启动nginx",charIndex:579},{level:3,title:"1.7 nginx 常用操作",slug:"_1-7-nginx-常用操作",normalizedTitle:"1.7 nginx 常用操作",charIndex:640},{level:2,title:"2 LINUX上安装nginx",slug:"_2-linux上安装nginx",normalizedTitle:"2 linux上安装nginx",charIndex:709},{level:3,title:"2.1 官网地址",slug:"_2-1-官网地址",normalizedTitle:"2.1 官网地址",charIndex:729},{level:3,title:"2.2 下载解压",slug:"_2-2-下载解压",normalizedTitle:"2.2 下载解压",charIndex:801},{level:3,title:"2.3 安装必要插件",slug:"_2-3-安装必要插件",normalizedTitle:"2.3 安装必要插件",charIndex:972},{level:3,title:"2.4 配置及安装",slug:"_2-4-配置及安装",normalizedTitle:"2.4 配置及安装",charIndex:1296},{level:2,title:"3 nginx.conf 示例",slug:"_3-nginx-conf-示例",normalizedTitle:"3 nginx.conf 示例",charIndex:1870}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 MAC上安装nginx 1.1 判断mac电脑是否已安装brew 1.2 如果没有安装brew，可以用国内版本安装 1.3 查询需要安装的nginx包是否存在 1.4 安装nginx 1.5 安装成功后，查看nginx安装目录 1.6 启动nginx 1.7 nginx 常用操作 2 LINUX上安装nginx 2.1 官网地址 2.2 下载解压 2.3 安装必要插件 2.4 配置及安装 3 nginx.conf 示例",content:'# 1 MAC上安装nginx\n\n\n# 1.1 判断mac电脑是否已安装brew\n\nbrew update\n\n\n1\n\n\n\n# 1.2 如果没有安装brew，可以用国内版本安装\n\n# 官网地址：https://brew.sh/index_zh-cn.html\n# 官网安装命令：\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# 国内版本：（根据提示选择安装下载镜像、执行脚本选择Y）\n/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 1.3 查询需要安装的nginx包是否存在\n\nbrew search nginx\n\n\n1\n\n\n\n# 1.4 安装nginx\n\nbrew install nginx\n\n\n1\n\n\n\n# 1.5 安装成功后，查看nginx安装目录\n\nbrew info nginx\n\n\n1\n\n\n服务目录：open /usr/local/var/www\n配置目录：open /usr/local/etc/nginx\n\n\n1\n2\n\n\n\n# 1.6 启动nginx\n\nnginx\n\n\n1\n\n\n打开浏览器，访问 http://localhost:8080/\n\n\n# 1.7 nginx 常用操作\n\n#重启\nnginx -s reload\n#关闭\nnginx -s stop\n\n\n1\n2\n3\n4\n\n\n\n# 2 LINUX上安装nginx\n\n\n# 2.1 官网地址\n\nhttp://nginx.org\nhttp://nginx.org/en/download.html\n\n\n1\n2\n\n\n\n# 2.2 下载解压\n\n# 执行下载： \nwget http://nginx.org/download/nginx-1.18.0.tar.gz\n\n# 然后把下载好的文件进行解压：\ntar -zxvf nginx-1.18.0.tar.gz\n\n# 进入nginx目录：\ncd nginx-1.18.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2.3 安装必要插件\n\n运行命令：\n\nyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n\n\n1\n\n\ngcc 可以编译 C,C++,Ada,Object C和Java等语言\npcre pcre-devel pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式\nzlib zlib-devel zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip\nopenssl openssl-devel openssl是web安全通信的基石\n\n\n1\n2\n3\n4\n\n\n\n# 2.4 配置及安装\n\n1.新建个组，用于运行nginx\n\ngroupadd www\n\n\n1\n\n\n2.添加个www用户，并为不能用于登录的\n\nuseradd -g www www -s /bin/false\n\n\n1\n\n\n3.配置\n\n./configure --prefix=/usr/local/nginx \\\n--user=www \\\n--group=www \\\n--with-http_ssl_module \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-stream_realip_module \\\n--with-http_stub_status_module \\\n--with-http_gzip_static_module \\\n--with-http_realip_module \\\n--with-http_sub_module \\\n--with-pcre\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n4.安装\n\nmake && make install\n\n\n1\n\n\n5.测试配置文件是否成功\n\n/usr/local/nginx/sbin/nginx -t\n\n\n1\n\n\n6.启动nginx\n\n/usr/local/nginx/sbin/nginx\n\n\n1\n\n\n\n# 3 nginx.conf 示例\n\n#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            alias  /Users/luoxiaofeng/githubprojects/blogweb/gh-pages/;\n            # root   html;\n            # index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include servers/*;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',normalizedContent:'# 1 mac上安装nginx\n\n\n# 1.1 判断mac电脑是否已安装brew\n\nbrew update\n\n\n1\n\n\n\n# 1.2 如果没有安装brew，可以用国内版本安装\n\n# 官网地址：https://brew.sh/index_zh-cn.html\n# 官网安装命令：\n/bin/bash -c "$(curl -fssl https://raw.githubusercontent.com/homebrew/install/head/install.sh)"\n\n# 国内版本：（根据提示选择安装下载镜像、执行脚本选择y）\n/bin/zsh -c "$(curl -fssl https://gitee.com/cunkai/homebrewcn/raw/master/homebrew.sh)"\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 1.3 查询需要安装的nginx包是否存在\n\nbrew search nginx\n\n\n1\n\n\n\n# 1.4 安装nginx\n\nbrew install nginx\n\n\n1\n\n\n\n# 1.5 安装成功后，查看nginx安装目录\n\nbrew info nginx\n\n\n1\n\n\n服务目录：open /usr/local/var/www\n配置目录：open /usr/local/etc/nginx\n\n\n1\n2\n\n\n\n# 1.6 启动nginx\n\nnginx\n\n\n1\n\n\n打开浏览器，访问 http://localhost:8080/\n\n\n# 1.7 nginx 常用操作\n\n#重启\nnginx -s reload\n#关闭\nnginx -s stop\n\n\n1\n2\n3\n4\n\n\n\n# 2 linux上安装nginx\n\n\n# 2.1 官网地址\n\nhttp://nginx.org\nhttp://nginx.org/en/download.html\n\n\n1\n2\n\n\n\n# 2.2 下载解压\n\n# 执行下载： \nwget http://nginx.org/download/nginx-1.18.0.tar.gz\n\n# 然后把下载好的文件进行解压：\ntar -zxvf nginx-1.18.0.tar.gz\n\n# 进入nginx目录：\ncd nginx-1.18.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2.3 安装必要插件\n\n运行命令：\n\nyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n\n\n1\n\n\ngcc 可以编译 c,c++,ada,object c和java等语言\npcre pcre-devel pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式\nzlib zlib-devel zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip\nopenssl openssl-devel openssl是web安全通信的基石\n\n\n1\n2\n3\n4\n\n\n\n# 2.4 配置及安装\n\n1.新建个组，用于运行nginx\n\ngroupadd www\n\n\n1\n\n\n2.添加个www用户，并为不能用于登录的\n\nuseradd -g www www -s /bin/false\n\n\n1\n\n\n3.配置\n\n./configure --prefix=/usr/local/nginx \\\n--user=www \\\n--group=www \\\n--with-http_ssl_module \\\n--with-stream \\\n--with-stream_ssl_module \\\n--with-stream_realip_module \\\n--with-http_stub_status_module \\\n--with-http_gzip_static_module \\\n--with-http_realip_module \\\n--with-http_sub_module \\\n--with-pcre\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n4.安装\n\nmake && make install\n\n\n1\n\n\n5.测试配置文件是否成功\n\n/usr/local/nginx/sbin/nginx -t\n\n\n1\n\n\n6.启动nginx\n\n/usr/local/nginx/sbin/nginx\n\n\n1\n\n\n\n# 3 nginx.conf 示例\n\n#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            alias  /users/luoxiaofeng/githubprojects/blogweb/gh-pages/;\n            # root   html;\n            # index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include servers/*;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',charsets:{cjk:!0}},{title:"SSH连接Github仓库",frontmatter:{title:"SSH连接Github仓库",date:"2022-05-10T14:38:51.000Z",permalink:"/pages/b6ebf4/",categories:["技术应用","技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/15.SSH%E8%BF%9E%E6%8E%A5Github%E4%BB%93%E5%BA%93.html",relativePath:"02.技术应用/03.技巧备忘/15.SSH连接Github仓库.md",key:"v-c2b6ac38",path:"/pages/b6ebf4/",headers:[{level:2,title:"1 生成/修改秘钥",slug:"_1-生成-修改秘钥",normalizedTitle:"1 生成/修改秘钥",charIndex:2},{level:2,title:"2 SSH密钥添加到ssh-agent",slug:"_2-ssh密钥添加到ssh-agent",normalizedTitle:"2 ssh密钥添加到ssh-agent",charIndex:119},{level:2,title:"SSH秘钥添加到GitHub账户",slug:"ssh秘钥添加到github账户",normalizedTitle:"ssh秘钥添加到github账户",charIndex:241}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"1 生成/修改秘钥 2 SSH密钥添加到ssh-agent SSH秘钥添加到GitHub账户",content:'# 1 生成/修改秘钥\n\n生成SSH密钥的指令如下，想要修改也是用这个先生成再覆盖\n\nssh-keygen -t rsa -b 4096 -C "yourid@email.com"\n\n\n1\n\n\n看到这个页面就说明成功生成密钥啦！\n\n\n# 2 SSH密钥添加到ssh-agent\n\n1.启动ssh-agent\n\neval $(ssh-agent -s)\n\n\n1\n\n\n结果如下\n\n2.把SSH私钥添加到ssh-agent\n\nssh-add ~/.ssh/id_rsa\n\n\n1\n\n\n\n# SSH秘钥添加到GitHub账户\n\n1.复制密钥\n\n# 路径：\n~/.ssh/id_rsa.pub\n\n\n1\n2\n\n\n2.访问GitHub，右上角点击头像，进入Settings\n\n点 SSH and GPG keys\n\n新增秘钥\n\n测试\n\nssh -T git@github.com\n\n\n1\n\n\n如果是第一次添加SSH，还应该会问你 Are you sure you want to continue connecting?\n\n选择 yes',normalizedContent:'# 1 生成/修改秘钥\n\n生成ssh密钥的指令如下，想要修改也是用这个先生成再覆盖\n\nssh-keygen -t rsa -b 4096 -c "yourid@email.com"\n\n\n1\n\n\n看到这个页面就说明成功生成密钥啦！\n\n\n# 2 ssh密钥添加到ssh-agent\n\n1.启动ssh-agent\n\neval $(ssh-agent -s)\n\n\n1\n\n\n结果如下\n\n2.把ssh私钥添加到ssh-agent\n\nssh-add ~/.ssh/id_rsa\n\n\n1\n\n\n\n# ssh秘钥添加到github账户\n\n1.复制密钥\n\n# 路径：\n~/.ssh/id_rsa.pub\n\n\n1\n2\n\n\n2.访问github，右上角点击头像，进入settings\n\n点 ssh and gpg keys\n\n新增秘钥\n\n测试\n\nssh -t git@github.com\n\n\n1\n\n\n如果是第一次添加ssh，还应该会问你 are you sure you want to continue connecting?\n\n选择 yes',charsets:{cjk:!0}},{title:"博客构建",frontmatter:{title:"博客构建",date:"2022-05-01T10:24:36.000Z",permalink:"/pages/685cf3/",categories:["技巧备忘"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/03.%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/60.%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA.html",relativePath:"02.技术应用/03.技巧备忘/60.博客构建.md",key:"v-7f5d7911",path:"/pages/685cf3/",headers:[{level:2,title:"本地构建运行",slug:"本地构建运行",normalizedTitle:"本地构建运行",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"本地构建运行",content:"# 本地构建运行\n\n1.安装nodejs。\n\n2.安装yarn。\n\n3.下载项目，并用yarn运行。报错！\n\n4.需先安装vuepress。yarn add vuepress 或者 npm install vuepress。\n\n5.VuePress中文网\n\nhttps://www.vuepress.cn/",normalizedContent:"# 本地构建运行\n\n1.安装nodejs。\n\n2.安装yarn。\n\n3.下载项目，并用yarn运行。报错！\n\n4.需先安装vuepress。yarn add vuepress 或者 npm install vuepress。\n\n5.vuepress中文网\n\nhttps://www.vuepress.cn/",charsets:{cjk:!0}},{title:"常用Git命令清单",frontmatter:{title:"常用Git命令清单",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/8292d8/",categories:["手册教程"],tags:["Git"],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/07.%E6%89%8B%E5%86%8C%E6%95%99%E7%A8%8B/00.%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html",relativePath:"02.技术应用/07.手册教程/00.常用Git命令清单.md",key:"v-29813f1e",path:"/pages/8292d8/",headers:[{level:2,title:"一、新建代码库",slug:"一、新建代码库",normalizedTitle:"一、新建代码库",charIndex:129},{level:2,title:"二、配置",slug:"二、配置",normalizedTitle:"二、配置",charIndex:276},{level:2,title:"三、增加/删除文件",slug:"三、增加-删除文件",normalizedTitle:"三、增加/删除文件",charIndex:547},{level:2,title:"四、代码提交",slug:"四、代码提交",normalizedTitle:"四、代码提交",charIndex:947},{level:2,title:"五、分支",slug:"五、分支",normalizedTitle:"五、分支",charIndex:1348},{level:2,title:"六、标签",slug:"六、标签",normalizedTitle:"六、标签",charIndex:2141},{level:2,title:"七、查看信息",slug:"七、查看信息",normalizedTitle:"七、查看信息",charIndex:2558},{level:2,title:"八、远程同步",slug:"八、远程同步",normalizedTitle:"八、远程同步",charIndex:3667},{level:2,title:"九、撤销",slug:"九、撤销",normalizedTitle:"九、撤销",charIndex:4089},{level:2,title:"十、常用操作组合",slug:"十、常用操作组合",normalizedTitle:"十、常用操作组合",charIndex:4741},{level:3,title:"1. 修改本地分支名和远程分支名",slug:"_1-修改本地分支名和远程分支名",normalizedTitle:"1. 修改本地分支名和远程分支名",charIndex:4754}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"一、新建代码库 二、配置 三、增加/删除文件 四、代码提交 五、分支 六、标签 七、查看信息 八、远程同步 九、撤销 十、常用操作组合 1. 修改本地分支名和远程分支名",content:'# 常用Git命令清单\n\n常用 Git 命令清单。几个专用名词的译名如下。\n\n>  * Workspace：工作区\n>  * Index / Stage：暂存区\n>  * Repository：仓库区（或本地仓库）\n>  * Remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 Git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',normalizedContent:'# 常用git命令清单\n\n常用 git 命令清单。几个专用名词的译名如下。\n\n>  * workspace：工作区\n>  * index / stage：暂存区\n>  * repository：仓库区（或本地仓库）\n>  * remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个git代码库\n$ git init\n\n# 新建一个目录，将其初始化为git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\ngit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的git配置\n$ git config --list\n\n# 编辑git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagname]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -s [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] head --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] head --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff head\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前head为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',charsets:{cjk:!0}},{title:"yaml语言教程",frontmatter:{title:"yaml语言教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/4e8444e2d534d14f",categories:["手册教程"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/07.%E6%89%8B%E5%86%8C%E6%95%99%E7%A8%8B/02.Yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B.html",relativePath:"02.技术应用/07.手册教程/02.Yaml语言教程.md",key:"v-2be6fdcc",path:"/pages/4e8444e2d534d14f/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:15},{level:2,title:"基本语法",slug:"基本语法",normalizedTitle:"基本语法",charIndex:326},{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:422},{level:2,title:"YAML 对象",slug:"yaml-对象",normalizedTitle:"yaml 对象",charIndex:576},{level:2,title:"YAML 数组",slug:"yaml-数组",normalizedTitle:"yaml 数组",charIndex:1086},{level:2,title:"复合结构（对象和数组组合）",slug:"复合结构-对象和数组组合",normalizedTitle:"复合结构（对象和数组组合）",charIndex:1594},{level:2,title:"纯量",slug:"纯量",normalizedTitle:"纯量",charIndex:549},{level:2,title:"转换数据格式",slug:"转换数据格式",normalizedTitle:"转换数据格式",charIndex:3050},{level:2,title:"锚点引用",slug:"锚点引用",normalizedTitle:"锚点引用",charIndex:3157}],excerpt:'<h1 id="yaml语言教程"><a class="header-anchor" href="#yaml语言教程">#</a> yaml语言教程</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>YAML 是 &quot;YAML Ain\'t a Markup Language&quot;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）。</p>\n',lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"简介 基本语法 数据类型 YAML 对象 YAML 数组 复合结构（对象和数组组合） 纯量 转换数据格式 锚点引用",content:"# yaml语言教程\n\n\n# 简介\n\nYAML 是 \"YAML Ain't a Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。\n\nYAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。\n\nYAML 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n\n * 使用缩进表示层级关系\n\n * 缩进不允许使用tab，只允许空格\n\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n\n * '#'表示注释\n\n\n# 数据类型\n\nYAML 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# YAML 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# YAML 数组\n\n以 - 开头的行表示构成一个数组：\n\n- A\n- B\n- C\n\n\n1\n2\n3\n\n\nYAML 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - A\n - B\n - C\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200W\n    -\n        id: 2\n        name: company2\n        price: 500W\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - Ruby\n  - Perl\n  - Python \nwebsites:\n  YAML: yaml.org \n  Ruby: ruby-lang.org \n  Python: python.org \n  Perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'Ruby', 'Perl', 'Python'],\n  websites: {\n    YAML: 'yaml.org',\n    Ruby: 'ruby-lang.org',\n    Python: 'python.org',\n    Perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * Null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - TRUE  #true,True都可以\n    - FALSE  #false，False都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # Null\n    nodeName: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'Hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用ISO 8601格式，即yyyy-MM-dd\ndatetime: \n    -  2018-02-17T15:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用|保留换行符，也可以使用>折叠换行。\n\nthis: |\n  Foo\n  Bar\nthat: >\n  Foo\n  Bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'Foo\\nBar\\n', that: 'Foo Bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  Foo\n \ns2: |+\n  Foo\n \n \ns3: |-\n  Foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'Foo\\n', s2: 'Foo\\n\\n\\n', s3: 'Foo' }\n\n\n1\n\n\n字符串之中可以插入 HTML 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell Steve \n- Clark \n- Brian \n- Oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",normalizedContent:"# yaml语言教程\n\n\n# 简介\n\nyaml 是 \"yaml ain't a markup language\"（yaml 不是一种标记语言）的递归缩写。在开发的这种语言时，yaml 的意思其实是：\"yet another markup language\"（仍是一种标记语言）。\n\nyaml 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和yaml非常接近）。\n\nyaml 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n\n * 使用缩进表示层级关系\n\n * 缩进不允许使用tab，只允许空格\n\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n\n * '#'表示注释\n\n\n# 数据类型\n\nyaml 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# yaml 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# yaml 数组\n\n以 - 开头的行表示构成一个数组：\n\n- a\n- b\n- c\n\n\n1\n2\n3\n\n\nyaml 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - a\n - b\n - c\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200w\n    -\n        id: 2\n        name: company2\n        price: 500w\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200w},{id: 2,name: company2,price: 500w}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - ruby\n  - perl\n  - python \nwebsites:\n  yaml: yaml.org \n  ruby: ruby-lang.org \n  python: python.org \n  perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'ruby', 'perl', 'python'],\n  websites: {\n    yaml: 'yaml.org',\n    ruby: 'ruby-lang.org',\n    python: 'python.org',\n    perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - true  #true,true都可以\n    - false  #false，false都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # null\n    nodename: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用iso 8601格式，即yyyy-mm-dd\ndatetime: \n    -  2018-02-17t15:02:31+08:00    #时间使用iso 8601格式，时间和日期之间使用t连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用|保留换行符，也可以使用>折叠换行。\n\nthis: |\n  foo\n  bar\nthat: >\n  foo\n  bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'foo\\nbar\\n', that: 'foo bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  foo\n \ns2: |+\n  foo\n \n \ns3: |-\n  foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'foo\\n', s2: 'foo\\n\\n\\n', s3: 'foo' }\n\n\n1\n\n\n字符串之中可以插入 html 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell steve \n- clark \n- brian \n- oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'steve', 'clark', 'brian', 'oren', 'steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",charsets:{cjk:!0}},{title:"Jenkins教程",frontmatter:{title:"Jenkins教程",date:"2022-04-26T17:07:36.000Z",permalink:"/pages/035670/",categories:["手册教程"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/02.%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/07.%E6%89%8B%E5%86%8C%E6%95%99%E7%A8%8B/04.Jenkins%E6%95%99%E7%A8%8B.html",relativePath:"02.技术应用/07.手册教程/04.Jenkins教程.md",key:"v-569bd8d0",path:"/pages/035670/",headers:[{level:2,title:"jenkins搭建",slug:"jenkins搭建",normalizedTitle:"jenkins搭建",charIndex:2},{level:4,title:"1.环境信息",slug:"_1-环境信息",normalizedTitle:"1.环境信息",charIndex:15},{level:4,title:"2.maven配置仓库",slug:"_2-maven配置仓库",normalizedTitle:"2.maven配置仓库",charIndex:70},{level:4,title:"3.docker方式安装jekins",slug:"_3-docker方式安装jekins",normalizedTitle:"3.docker方式安装jekins",charIndex:326},{level:4,title:"4.安装插件",slug:"_4-安装插件",normalizedTitle:"4.安装插件",charIndex:963},{level:4,title:"5.配置jenkins",slug:"_5-配置jenkins",normalizedTitle:"5.配置jenkins",charIndex:1219},{level:4,title:"6.系统配置",slug:"_6-系统配置",normalizedTitle:"6.系统配置",charIndex:1575},{level:4,title:"7.构建java项目",slug:"_7-构建java项目",normalizedTitle:"7.构建java项目",charIndex:1722},{level:4,title:"8.构建VUE项目",slug:"_8-构建vue项目",normalizedTitle:"8.构建vue项目",charIndex:3790},{level:4,title:"9.问题",slug:"_9-问题",normalizedTitle:"9.问题",charIndex:5317}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"jenkins搭建 1.环境信息 2.maven配置仓库 3.docker方式安装jekins 4.安装插件 5.配置jenkins 6.系统配置 7.构建java项目 8.构建VUE项目 9.问题",content:'# jenkins搭建\n\n# 1.环境信息\n\nJDK1.8\nmaven 3.5.4\njenkins laster \n\n\n1\n2\n3\n\n\n# 2.maven配置仓库\n\n<mirrors>\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\t\n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 3.docker方式安装jekins\n\n3.1 docker拉取jekins\n\ndocker pull jenkins/jenkins:lts\n\n\n1\n\n\n3.2 创建挂载目录 并开放读写权限\n\nmkdir -p /opt/work/jenkins\nchmod 777 /opt/work/jenkins\nchown -R 1000 /opt/work/jenkins\n\n\n1\n2\n3\n\n\n3.3 启动\n\ndocker run -d --name jenkins -p 9000:8080 -p 50000:50000  --restart=always -v /opt/work/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -v /opt/work/apache-maven-3.5.4:/usr/local/maven jenkins/jenkins:lts\n\n\n1\n\n\n3.4进入控制台\n\nhttp://ip:9000\n等待界面初始化进入解锁界面\n\n\n1\n2\n\n\n3.5查看初始化密码\n\ndocker exec -it jenkins bash\ncat /var/jenkins_home/secrets/initialAdminPassword\n\n\n1\n2\n\n\n3.6选择安装插件的方式\n\n如果知道要安装哪些插件，就选择安装推荐的插件。\n\n3.7等待安装完成，后续步骤按照界面提示即可\n\n# 4.安装插件\n\n主要安装以下几个插件，在右上角进行搜索\nPublish Over SSH -- 服务器操作插件 配置服务器信息 -- 暂未用到该方式\nSSH2 Easy     -----  服务器操作插件 配置服务器信息\nMaven Integration ----- maven插件 发布JAR包用\nGit Parameter ----- git插件\t拉取代码用\nNodeJS Plugin ----- nodejs插件 发布VUE用\n安装完后重启勾选右下角重启服务\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 5.配置jenkins\n\n进入配置界面\n\n5.1全局环境配置\n\n进入容器\ndocker exec -it jenkins bash\n查看java home\necho $JAVA_HOME 获取java路径\n界面点击新增jdk 取消自动安装\n/opt/java/openjdk\n\n\n1\n2\n3\n4\n5\n6\n\n\n5.2配置maven\n\n取消自动安装\n在第3.3步骤中启动时配置了maven路径usr/local/maven 复制路径填入下面框格\n\n\n1\n2\n\n\n5.3配置nodejs\n\n这个需要特别注意，需要根据目前开发的VUE版本安装对应的支持版本，否则可能导致构建失败。我第一次安装了nodejs14的版本就由于版本过高导致构建失败，后来重新安装了nodejs 12.16.2才正常构建成功。\n\n\n1\n\n\n# 6.系统配置\n\n点击系统设置-系统设置\n\n6.1 Server Groups Center 配置服务器信息\n\n配置完成之后,需要先保存退出配置界面，再进入才可以配置Server List，否则可能找不到Server Group\n\n\n1\n\n\n6.2 配置Server Group List\n\n# 7.构建java项目\n\n点击左侧菜单新建任务，然后选择构建一个MAVEN项目\n\n\n1\n\n\n7.1构建策略\n\n构建的版本保留几个作为回滚就够了，不需要一直保留着，以免占用服务器硬盘资源。\n点击General勾选丢弃旧的构建，根据实际使用情况备份以下2个信息\n\t保持构建的天数\n\t保持构建的最大个数\n还可以勾选参数化构建过程，对一些信息参数化。（这一步我暂时未做）\n\n\n1\n2\n3\n4\n5\n\n\n7.2 git配置\n\n点击源码管理配置git信息，输入URL 添加认证 选择要构建的分支\n如果做了参数化构建，这里就可以配置参数。\n\n\n1\n2\n\n\n7.3 取消构建触发器\n\n在构建触发器 取消勾选 “Build whenever a SNAPSHOT dependency is built”\n\n\n1\n\n\n7.4 配置maven构建命令\n\n如果是单模块项目，则使用以下命令即可\nclean install xxx -Dmaven.test.skip=true\n如果是多模块项目，则需要确认构建的执行项目\nclean install -pl xxx -am -amd -Dmaven.test.skip=true\n-pl 标识指定构建某个模块\n-am 是向下的。表示同时处理选定模块所依赖的模块。\n-amd 是向上的。表示同时处理依赖选定模块的模块。\n使用-am、-amd等时候，必须配合-pl指定模块使用\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n7.5 配置FTP上传\n\n我没有使用SSH上传方式（懒的弄证书😂）\n配置FTP方式上传包\nRun only if build succeed 标识构建成功后才执行\ntarget server对应的是jenkins容器里面的绝对路径\n/var/jenkins_home/workspace/项目路径/target/jar包名.jar\nremoteLocation  表示要上传到远程服务器的哪个位置\nfileName 表示上传之后文件的名称\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n7.6 执行远程脚本或者命令发起部署\n\n# docker构建部署命令例子\nexport BUILD_ID=dontKillMe \ninnerport=8086 #docker容器内部端口\noutport=8081 #docker容器外部端口\ndockername=api #容器名称\nweb=api-0.0.1-SNAPSHOT #jar包名\nwebdir=/opt/work/api #docker构建路径\nbackup=/opt/work/backup #备份路径\nbulid=/opt/work/bulid #jenkins 上传的路径\ndate=$(date +%Y%m%d%H%M) #备份的文件后缀\necho "####### 备份jar包 ##########"\ncp $webdir/$web.jar $backup/$web-$date.jar #备份历史版本\nrm -rf $webdir/$web.jar #删除历史版本\nmv $bulid/$web.jar $webdir/$web.jar #拷贝最新版本到 构建路径\necho "####### 删除当前容器 ##########"\ndocker stop $dockername\nsleep 10\ndocker rm $dockername\nsleep 3\ndocker rmi $dockername\nsleep 3\necho "####### 制作最新的当前镜像 ##########"\ncd $webdir #进入构建路径\ndocker build -t $dockername .\necho "####### 启动当前最新的容器 ##########"\ndocker run -d --name $dockername -p $outport:$innerport $dockername\nsleep 5\npid=`ps aux|grep $dockername|grep -v grep |grep -v "/bin/sh"| awk \'{print $2}\'`\nif [ -z "${pid}" ]; then\necho "################################项目启动失败################################"\ncat dsadsadas #使jenkins发布失败，导致构建项目不稳定\nelse\necho "################################项目启动成功#########################################"\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n# 8.构建VUE项目\n\n大部分的操作和构建Java项目一致，略微有点小区别。\n第一步选择构建一个自由风格的软件项目\n第一次构建要安装nodejs，时间会久点\n\n\n1\n2\n3\n\n\n1-3步与第7点一致\n\n\n1\n\n\n8.1 构建环境选择nodejs\n\n1.要选择安装nodejs插件，在第4点已安装\n2.点击构建环境，勾选Provide Node & npm bin/ folder to PATH\n\n\n1\n2\n\n\n8.2新增执行shell命令\n\ncnpm install\ncnpm run build\ncd /var/jenkins_home/workspace/xxx\ntar -cvf dist.tar dist/\n\n\n1\n2\n3\n4\n\n\n8.3 FTP上传\n\n 8. 4 执行远程shell命令\n\nexport BUILD_ID=dontKillMe\ninnerport=8080\noutport=8080\ndockername=vue\nweb=dist\nwebdir=/opt/work/vue\nbackup=/opt/work/backup\nbulid=/opt/work/bulid\ndate=$(date +%Y%m%d%H%M)\necho "####### 备份jar包 ##########"\ncd $webdir\ntar -cvf $web.tar  $web\ncp $webdir/$web.tar $backup/$web-$date.tar\nrm -rf $webdir/$web.tar\nmv $bulid/$web.tar $webdir/$web.tar\ntar -xvf $web.tar\nrm -rf $web.tar\necho "####### 删除当前容器 ##########"\ndocker stop $dockername\nsleep 10\ndocker rm $dockername\nsleep 3\ndocker rmi $dockername\nsleep 3\necho "####### 制作最新的当前镜像 ##########"\ndocker build -t $dockername .\necho "####### 启动当前最新的容器 ##########"\ndocker run -d --name $dockername -p $outport:$innerport $dockername\nsleep 5\npid=`ps aux|grep $dockername|grep -v grep |grep -v "/bin/sh"| awk \'{print $2}\'`\nif [ -z "${pid}" ]; then\necho "################################项目启动失败################################"\ncat dsadsadas #使jenkins发布失败，导致构建项目不稳定\nelse\necho "################################项目启动成功#########################################"\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n8.5 上传成功之后，删除包\n\ncd /var/jenkins_home/workspace/xxx\nrm -rf dist.tar\n\n\n1\n2\n\n\n# 9.问题\n\n目前碰到的大部分问题都是权限不足的问题\n\n仓库的权限不足\n\nchmod 777 -R /jenkins主目录/.m2/repository\n\n\n1\n\n\nbulid 目录权限不足\n\nchmod 777 -R xxx\n\n\n1\n\n\n脚本执行异常 sh脚本要通过touch创建，如果从window放上去有字符的问题',normalizedContent:'# jenkins搭建\n\n# 1.环境信息\n\njdk1.8\nmaven 3.5.4\njenkins laster \n\n\n1\n2\n3\n\n\n# 2.maven配置仓库\n\n<mirrors>\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorof>central</mirrorof>\n        <name>nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\t\n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 3.docker方式安装jekins\n\n3.1 docker拉取jekins\n\ndocker pull jenkins/jenkins:lts\n\n\n1\n\n\n3.2 创建挂载目录 并开放读写权限\n\nmkdir -p /opt/work/jenkins\nchmod 777 /opt/work/jenkins\nchown -r 1000 /opt/work/jenkins\n\n\n1\n2\n3\n\n\n3.3 启动\n\ndocker run -d --name jenkins -p 9000:8080 -p 50000:50000  --restart=always -v /opt/work/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -v /opt/work/apache-maven-3.5.4:/usr/local/maven jenkins/jenkins:lts\n\n\n1\n\n\n3.4进入控制台\n\nhttp://ip:9000\n等待界面初始化进入解锁界面\n\n\n1\n2\n\n\n3.5查看初始化密码\n\ndocker exec -it jenkins bash\ncat /var/jenkins_home/secrets/initialadminpassword\n\n\n1\n2\n\n\n3.6选择安装插件的方式\n\n如果知道要安装哪些插件，就选择安装推荐的插件。\n\n3.7等待安装完成，后续步骤按照界面提示即可\n\n# 4.安装插件\n\n主要安装以下几个插件，在右上角进行搜索\npublish over ssh -- 服务器操作插件 配置服务器信息 -- 暂未用到该方式\nssh2 easy     -----  服务器操作插件 配置服务器信息\nmaven integration ----- maven插件 发布jar包用\ngit parameter ----- git插件\t拉取代码用\nnodejs plugin ----- nodejs插件 发布vue用\n安装完后重启勾选右下角重启服务\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 5.配置jenkins\n\n进入配置界面\n\n5.1全局环境配置\n\n进入容器\ndocker exec -it jenkins bash\n查看java home\necho $java_home 获取java路径\n界面点击新增jdk 取消自动安装\n/opt/java/openjdk\n\n\n1\n2\n3\n4\n5\n6\n\n\n5.2配置maven\n\n取消自动安装\n在第3.3步骤中启动时配置了maven路径usr/local/maven 复制路径填入下面框格\n\n\n1\n2\n\n\n5.3配置nodejs\n\n这个需要特别注意，需要根据目前开发的vue版本安装对应的支持版本，否则可能导致构建失败。我第一次安装了nodejs14的版本就由于版本过高导致构建失败，后来重新安装了nodejs 12.16.2才正常构建成功。\n\n\n1\n\n\n# 6.系统配置\n\n点击系统设置-系统设置\n\n6.1 server groups center 配置服务器信息\n\n配置完成之后,需要先保存退出配置界面，再进入才可以配置server list，否则可能找不到server group\n\n\n1\n\n\n6.2 配置server group list\n\n# 7.构建java项目\n\n点击左侧菜单新建任务，然后选择构建一个maven项目\n\n\n1\n\n\n7.1构建策略\n\n构建的版本保留几个作为回滚就够了，不需要一直保留着，以免占用服务器硬盘资源。\n点击general勾选丢弃旧的构建，根据实际使用情况备份以下2个信息\n\t保持构建的天数\n\t保持构建的最大个数\n还可以勾选参数化构建过程，对一些信息参数化。（这一步我暂时未做）\n\n\n1\n2\n3\n4\n5\n\n\n7.2 git配置\n\n点击源码管理配置git信息，输入url 添加认证 选择要构建的分支\n如果做了参数化构建，这里就可以配置参数。\n\n\n1\n2\n\n\n7.3 取消构建触发器\n\n在构建触发器 取消勾选 “build whenever a snapshot dependency is built”\n\n\n1\n\n\n7.4 配置maven构建命令\n\n如果是单模块项目，则使用以下命令即可\nclean install xxx -dmaven.test.skip=true\n如果是多模块项目，则需要确认构建的执行项目\nclean install -pl xxx -am -amd -dmaven.test.skip=true\n-pl 标识指定构建某个模块\n-am 是向下的。表示同时处理选定模块所依赖的模块。\n-amd 是向上的。表示同时处理依赖选定模块的模块。\n使用-am、-amd等时候，必须配合-pl指定模块使用\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n7.5 配置ftp上传\n\n我没有使用ssh上传方式（懒的弄证书😂）\n配置ftp方式上传包\nrun only if build succeed 标识构建成功后才执行\ntarget server对应的是jenkins容器里面的绝对路径\n/var/jenkins_home/workspace/项目路径/target/jar包名.jar\nremotelocation  表示要上传到远程服务器的哪个位置\nfilename 表示上传之后文件的名称\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n7.6 执行远程脚本或者命令发起部署\n\n# docker构建部署命令例子\nexport build_id=dontkillme \ninnerport=8086 #docker容器内部端口\noutport=8081 #docker容器外部端口\ndockername=api #容器名称\nweb=api-0.0.1-snapshot #jar包名\nwebdir=/opt/work/api #docker构建路径\nbackup=/opt/work/backup #备份路径\nbulid=/opt/work/bulid #jenkins 上传的路径\ndate=$(date +%y%m%d%h%m) #备份的文件后缀\necho "####### 备份jar包 ##########"\ncp $webdir/$web.jar $backup/$web-$date.jar #备份历史版本\nrm -rf $webdir/$web.jar #删除历史版本\nmv $bulid/$web.jar $webdir/$web.jar #拷贝最新版本到 构建路径\necho "####### 删除当前容器 ##########"\ndocker stop $dockername\nsleep 10\ndocker rm $dockername\nsleep 3\ndocker rmi $dockername\nsleep 3\necho "####### 制作最新的当前镜像 ##########"\ncd $webdir #进入构建路径\ndocker build -t $dockername .\necho "####### 启动当前最新的容器 ##########"\ndocker run -d --name $dockername -p $outport:$innerport $dockername\nsleep 5\npid=`ps aux|grep $dockername|grep -v grep |grep -v "/bin/sh"| awk \'{print $2}\'`\nif [ -z "${pid}" ]; then\necho "################################项目启动失败################################"\ncat dsadsadas #使jenkins发布失败，导致构建项目不稳定\nelse\necho "################################项目启动成功#########################################"\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n# 8.构建vue项目\n\n大部分的操作和构建java项目一致，略微有点小区别。\n第一步选择构建一个自由风格的软件项目\n第一次构建要安装nodejs，时间会久点\n\n\n1\n2\n3\n\n\n1-3步与第7点一致\n\n\n1\n\n\n8.1 构建环境选择nodejs\n\n1.要选择安装nodejs插件，在第4点已安装\n2.点击构建环境，勾选provide node & npm bin/ folder to path\n\n\n1\n2\n\n\n8.2新增执行shell命令\n\ncnpm install\ncnpm run build\ncd /var/jenkins_home/workspace/xxx\ntar -cvf dist.tar dist/\n\n\n1\n2\n3\n4\n\n\n8.3 ftp上传\n\n 8. 4 执行远程shell命令\n\nexport build_id=dontkillme\ninnerport=8080\noutport=8080\ndockername=vue\nweb=dist\nwebdir=/opt/work/vue\nbackup=/opt/work/backup\nbulid=/opt/work/bulid\ndate=$(date +%y%m%d%h%m)\necho "####### 备份jar包 ##########"\ncd $webdir\ntar -cvf $web.tar  $web\ncp $webdir/$web.tar $backup/$web-$date.tar\nrm -rf $webdir/$web.tar\nmv $bulid/$web.tar $webdir/$web.tar\ntar -xvf $web.tar\nrm -rf $web.tar\necho "####### 删除当前容器 ##########"\ndocker stop $dockername\nsleep 10\ndocker rm $dockername\nsleep 3\ndocker rmi $dockername\nsleep 3\necho "####### 制作最新的当前镜像 ##########"\ndocker build -t $dockername .\necho "####### 启动当前最新的容器 ##########"\ndocker run -d --name $dockername -p $outport:$innerport $dockername\nsleep 5\npid=`ps aux|grep $dockername|grep -v grep |grep -v "/bin/sh"| awk \'{print $2}\'`\nif [ -z "${pid}" ]; then\necho "################################项目启动失败################################"\ncat dsadsadas #使jenkins发布失败，导致构建项目不稳定\nelse\necho "################################项目启动成功#########################################"\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n8.5 上传成功之后，删除包\n\ncd /var/jenkins_home/workspace/xxx\nrm -rf dist.tar\n\n\n1\n2\n\n\n# 9.问题\n\n目前碰到的大部分问题都是权限不足的问题\n\n仓库的权限不足\n\nchmod 777 -r /jenkins主目录/.m2/repository\n\n\n1\n\n\nbulid 目录权限不足\n\nchmod 777 -r xxx\n\n\n1\n\n\n脚本执行异常 sh脚本要通过touch创建，如果从window放上去有字符的问题',charsets:{cjk:!0}},{title:"代码版本管理",frontmatter:{title:"代码版本管理",date:"2022-05-13T23:44:06.000Z",permalink:"/pages/bcce0d/",categories:["流程规范"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/03.%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83/01.%E5%B7%A5%E4%BD%9C%E5%8D%8F%E5%90%8C/03.%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html",relativePath:"03.流程规范/01.工作协同/03.代码版本管理.md",key:"v-24deae09",path:"/pages/bcce0d/",headers:[{level:2,title:"版本管理",slug:"版本管理",normalizedTitle:"版本管理",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"版本管理",content:"# 版本管理\n\n从国内事务改成接手国际项目，由于国际项目相关资源不足，环境也只有UAT和生产两套。\n\n相应的调整版本管理策略。",normalizedContent:"# 版本管理\n\n从国内事务改成接手国际项目，由于国际项目相关资源不足，环境也只有uat和生产两套。\n\n相应的调整版本管理策略。",charsets:{cjk:!0}},{title:"工作流程",frontmatter:{title:"工作流程",date:"2022-05-13T23:53:18.000Z",permalink:"/pages/aaac48/",categories:["流程规范"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/03.%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83/01.%E5%B7%A5%E4%BD%9C%E5%8D%8F%E5%90%8C/06.%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html",relativePath:"03.流程规范/01.工作协同/06.工作流程.md",key:"v-64e6777b",path:"/pages/aaac48/",headers:[{level:2,title:"工作流程",slug:"工作流程",normalizedTitle:"工作流程",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"工作流程",content:"# 工作流程\n\n产品、开发、测试三者协同。",normalizedContent:"# 工作流程\n\n产品、开发、测试三者协同。",charsets:{cjk:!0}},{title:"发版流程",frontmatter:{title:"发版流程",date:"2022-05-13T23:53:33.000Z",permalink:"/pages/35e7ea/",categories:["流程规范"],tags:[null],author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/03.%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83/01.%E5%B7%A5%E4%BD%9C%E5%8D%8F%E5%90%8C/09.%E5%8F%91%E7%89%88%E6%B5%81%E7%A8%8B.html",relativePath:"03.流程规范/01.工作协同/09.发版流程.md",key:"v-26bc51ec",path:"/pages/35e7ea/",headers:[{level:2,title:"发版流程",slug:"发版流程",normalizedTitle:"发版流程",charIndex:2}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"发版流程",content:"# 发版流程\n\n业务、产品、开发、运维发版流程规范。",normalizedContent:"# 发版流程\n\n业务、产品、开发、运维发版流程规范。",charsets:{cjk:!0}},{title:"更多",frontmatter:{title:"更多",date:"2019-12-25T14:27:01.000Z",permalink:"/friends",article:!1,sidebar:!1,author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},regularPath:"/04.%E6%9B%B4%E5%A4%9A/99.%E6%9B%B4%E5%A4%9A.html",relativePath:"04.更多/99.更多.md",key:"v-9cb1d18a",path:"/friends/",headers:[{level:2,title:"友情连接",slug:"友情连接",normalizedTitle:"友情连接",charIndex:2},{level:2,title:"网站备忘",slug:"网站备忘",normalizedTitle:"网站备忘",charIndex:975},{level:2,title:"学习",slug:"学习",normalizedTitle:"学习",charIndex:17},{level:2,title:"各种云",slug:"各种云",normalizedTitle:"各种云",charIndex:3026},{level:2,title:"MAC应用下载",slug:"mac应用下载",normalizedTitle:"mac应用下载",charIndex:3555}],lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:"友情连接 网站备忘 学习 各种云 MAC应用下载",content:"# 友情连接\n\n凯子\n\n致敬每个爱学习的你\n\n大飞\n\n大道至简，知易行难\n\n罗亮\n\n种树最好的时间是十年前\n其次是现在\n\n阿阮\n\n众筹买域名中，敬请期待...\n\n阿乐\n\n心有猛虎，细嗅蔷薇\n\n- name: 凯子\n  desc: 致敬每个爱学习的你\n  avatar: /img/kai.jpg\n  link: http://gkmall.top # 可选\n  #https://github.com/liuwenkai01/blog.git\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' \n- name: 大飞\n  desc: 大道至简，知易行难\n  avatar: /img/df.png\n  #link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgColor: '#FCE5BF'\n  textColor: '#7B2532'\n- name: 罗亮\n  desc: 种树最好的时间是十年前 <br>其次是现在\n  avatar: /img/wll.jpeg\n  link: http://blog.luoliang.top/ # 可选\n  bgColor: '#B7DBFF'\n  textColor: '#294D71'\n- name: 阿阮\n  desc: 众筹买域名中，敬请期待...\n  avatar: /img/rsx.jpeg\n  #link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgColor: '#FCE5BF'\n  textColor: '#7B2532'\n- name: 阿乐\n  desc: 心有猛虎，细嗅蔷薇\n  avatar: /img/fl.jpeg\n  link: https://flyoptimistic.github.io/blog\n  bgColor: '#FFCEDE'\n  textColor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 网站备忘\n\nvdoing\n\n一款简洁高效的博客主题\n\nwallhaven\n\n全网最好的壁纸网站\n\n网站测速\n\n为创业者提供动力\n\n在线取色器\n\nRGB网页颜色在线取色器\n\n蜂巢\n\n蜂巢VPN\n\n- name: vdoing\n  desc: 一款简洁高效的博客主题\n  avatar: /img/vdoing.png\n  link: https://doc.xugaoyi.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: wallhaven\n  desc: 全网最好的壁纸网站\n  avatar: /img/wallhaven.png\n  link: https://wallhaven.cc\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: 网站测速\n  desc: 为创业者提供动力\n  avatar: /img/ping.png\n  link: https://ping.chinaz.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: 在线取色器\n  desc: RGB网页颜色在线取色器\n  avatar: /img/rgb.png\n  link: https://ping.chinaz.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n  \n- name: 蜂巢\n  desc: 蜂巢VPN\n  avatar: /img/666yun.png\n  link: https://666yun.men\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1'\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 学习\n\nGithub\n\n一起更好地构建软件\n\nmyUSF\n\n数据结构演示\n\nJavaGuide\n\nJava开发知识整理\n\n知行动手实验室\n\n沉浸式学习最新云原生技术\n\nProcessOn\n\n在线流程图思维导图\n\n力扣（LeetCode）\n\n全球极客挚爱的技术成长平台\n\n- name: Github\n  desc: 一起更好地构建软件\n  avatar: /img/github.png\n  link: https://github.com\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1'\n  \n- name: myUSF\n  desc: 数据结构演示\n  avatar: /img/myusf.png\n  link: https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: JavaGuide\n  desc: Java开发知识整理\n  avatar: /img/javaguide.png\n  link: https://snailclimb.gitee.io/javaguide/#/\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: 知行动手实验室\n  desc: 沉浸式学习最新云原生技术\n  avatar: /img/startaliyun.png\n  link: https://start.aliyun.com\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1' \n\n- name: ProcessOn\n  desc: 在线流程图思维导图\n  avatar: /img/processon.png\n  link: https://processon.com\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1' \n\n- name: 力扣（LeetCode）\n  desc: 全球极客挚爱的技术成长平台\n  avatar: /img/leetcode.png\n  link: https://leetcode.cn/problemset/all/\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1' \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 各种云\n\n阿里云\n\n助力企业无忧上云\n\n腾讯云\n\n产业数字化助手\n\n七牛云\n\n连接数据 · 重塑价值\n\n- name: 阿里云\n  desc: 助力企业无忧上云\n  avatar: /img/aliyun.png\n  link: https://account.aliyun.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: 腾讯云\n  desc: 产业数字化助手\n  avatar: /img/tencent.png\n  link: https://console.cloud.tencent.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: 七牛云\n  desc: 连接数据 · 重塑价值\n  avatar: /img/qiniu.png\n  link: https://portal.qiniu.com\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1'\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# MAC应用下载\n\nMacWk\n\nMAC精品应用\n\nifunmac\n\n玩转苹果\n\n- name: MacWk\n  desc: MAC精品应用\n  avatar: /img/macwk.png\n  link: https://www.macwk.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n- name: ifunmac\n  desc: 玩转苹果\n  avatar: /img/ifunmac.png\n  link: https://www.ifunmac.com\n  bgColor: '#CBEAFA' \n  textColor: '#6854A1' \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",normalizedContent:"# 友情连接\n\n凯子\n\n致敬每个爱学习的你\n\n大飞\n\n大道至简，知易行难\n\n罗亮\n\n种树最好的时间是十年前\n其次是现在\n\n阿阮\n\n众筹买域名中，敬请期待...\n\n阿乐\n\n心有猛虎，细嗅蔷薇\n\n- name: 凯子\n  desc: 致敬每个爱学习的你\n  avatar: /img/kai.jpg\n  link: http://gkmall.top # 可选\n  #https://github.com/liuwenkai01/blog.git\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' \n- name: 大飞\n  desc: 大道至简，知易行难\n  avatar: /img/df.png\n  #link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgcolor: '#fce5bf'\n  textcolor: '#7b2532'\n- name: 罗亮\n  desc: 种树最好的时间是十年前 <br>其次是现在\n  avatar: /img/wll.jpeg\n  link: http://blog.luoliang.top/ # 可选\n  bgcolor: '#b7dbff'\n  textcolor: '#294d71'\n- name: 阿阮\n  desc: 众筹买域名中，敬请期待...\n  avatar: /img/rsx.jpeg\n  #link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgcolor: '#fce5bf'\n  textcolor: '#7b2532'\n- name: 阿乐\n  desc: 心有猛虎，细嗅蔷薇\n  avatar: /img/fl.jpeg\n  link: https://flyoptimistic.github.io/blog\n  bgcolor: '#ffcede'\n  textcolor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 网站备忘\n\nvdoing\n\n一款简洁高效的博客主题\n\nwallhaven\n\n全网最好的壁纸网站\n\n网站测速\n\n为创业者提供动力\n\n在线取色器\n\nrgb网页颜色在线取色器\n\n蜂巢\n\n蜂巢vpn\n\n- name: vdoing\n  desc: 一款简洁高效的博客主题\n  avatar: /img/vdoing.png\n  link: https://doc.xugaoyi.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: wallhaven\n  desc: 全网最好的壁纸网站\n  avatar: /img/wallhaven.png\n  link: https://wallhaven.cc\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: 网站测速\n  desc: 为创业者提供动力\n  avatar: /img/ping.png\n  link: https://ping.chinaz.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: 在线取色器\n  desc: rgb网页颜色在线取色器\n  avatar: /img/rgb.png\n  link: https://ping.chinaz.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n  \n- name: 蜂巢\n  desc: 蜂巢vpn\n  avatar: /img/666yun.png\n  link: https://666yun.men\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1'\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 学习\n\ngithub\n\n一起更好地构建软件\n\nmyusf\n\n数据结构演示\n\njavaguide\n\njava开发知识整理\n\n知行动手实验室\n\n沉浸式学习最新云原生技术\n\nprocesson\n\n在线流程图思维导图\n\n力扣（leetcode）\n\n全球极客挚爱的技术成长平台\n\n- name: github\n  desc: 一起更好地构建软件\n  avatar: /img/github.png\n  link: https://github.com\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1'\n  \n- name: myusf\n  desc: 数据结构演示\n  avatar: /img/myusf.png\n  link: https://www.cs.usfca.edu/~galles/visualization/algorithms.html\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: javaguide\n  desc: java开发知识整理\n  avatar: /img/javaguide.png\n  link: https://snailclimb.gitee.io/javaguide/#/\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: 知行动手实验室\n  desc: 沉浸式学习最新云原生技术\n  avatar: /img/startaliyun.png\n  link: https://start.aliyun.com\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1' \n\n- name: processon\n  desc: 在线流程图思维导图\n  avatar: /img/processon.png\n  link: https://processon.com\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1' \n\n- name: 力扣（leetcode）\n  desc: 全球极客挚爱的技术成长平台\n  avatar: /img/leetcode.png\n  link: https://leetcode.cn/problemset/all/\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1' \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 各种云\n\n阿里云\n\n助力企业无忧上云\n\n腾讯云\n\n产业数字化助手\n\n七牛云\n\n连接数据 · 重塑价值\n\n- name: 阿里云\n  desc: 助力企业无忧上云\n  avatar: /img/aliyun.png\n  link: https://account.aliyun.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: 腾讯云\n  desc: 产业数字化助手\n  avatar: /img/tencent.png\n  link: https://console.cloud.tencent.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: 七牛云\n  desc: 连接数据 · 重塑价值\n  avatar: /img/qiniu.png\n  link: https://portal.qiniu.com\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1'\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# mac应用下载\n\nmacwk\n\nmac精品应用\n\nifunmac\n\n玩转苹果\n\n- name: macwk\n  desc: mac精品应用\n  avatar: /img/macwk.png\n  link: https://www.macwk.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n- name: ifunmac\n  desc: 玩转苹果\n  avatar: /img/ifunmac.png\n  link: https://www.ifunmac.com\n  bgcolor: '#cbeafa' \n  textcolor: '#6854a1' \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-53104ef6",path:"/archives/",lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-1a9d53e5",path:"/categories/",lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-150b83f6",path:"/tags/",lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Home",frontmatter:{home:!0,heroText:"Louis's Blog",tagline:"积跬步以至千里",bannerBg:"/img/bg.jpeg"},regularPath:"/",relativePath:"index.md",key:"v-a113e2c4",path:"/",lastUpdated:"5/14/2022, 2:24:44 PM",lastUpdatedTimestamp:1652509484e3,headersStr:null,content:"",normalizedContent:"",charsets:{}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"学习笔记",link:"/pages/8611ff/"},{text:"技术应用",link:"/pages/f811c1/"},{text:"流程规范",link:"/pages/bcce0d/"},{text:"更多",link:"/friends/"}],sidebarDepth:2,logo:"/img/star.png",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",sidebar:{"/01.学习笔记/":[{title:"基础",collapsable:!0,children:[["01.基础/03.概念.md","理论概念","/pages/8611ff/"],["01.基础/12.ThreadLocal.md","ThreadLocal","/pages/b356cc/"],["01.基础/15.volatile关键字.md","volatile关键字","/pages/61751f/"],["01.基础/18.数据结构.md","数据结构","/pages/a27f33/"],["01.基础/21.并发加锁.md","并发加锁","/pages/745032/"],["01.基础/24.多线程.md","多线程","/pages/136ae8/"],["01.基础/70.设计模式.md","设计模式","/pages/f8ee2e/"],["01.基础/100.常见基础问题.md","常见基础问题","/pages/e76e64/"],["01.基础/101.常见系统问题.md","常见系统问题","/pages/fbe426/"]]},{title:"JVM",collapsable:!0,children:[["05.JVM/30.内存模型.md","内存模型","/pages/ed0ace/"],["05.JVM/33.类加载.md","类加载","/pages/d8d213/"],["05.JVM/36.虚拟机对象.md","虚拟机对象","/pages/16dbc6/"],["05.JVM/39.垃圾回收.md","垃圾回收","/pages/c026dc/"],["05.JVM/42.工具命令.md","工具命令","/pages/cc9ed4/"],["05.JVM/45.配置示例.md","生产配置示例","/pages/445465/"]]},{title:"Spring",collapsable:!0,children:[["07.Spring/73.SpringMVC.md","SpringMVC","/pages/f3f573/"],["07.Spring/76.Spring.md","Spring","/pages/d4c31c/"],["07.Spring/79.Mybatis.md","Mybatis","/pages/fb83f0/"]]},{title:"Redis",collapsable:!0,children:[["10.Redis/100.基础.md","基础","/pages/6ff65b/"],["10.Redis/103.位图|布隆.md","位图|布隆","/pages/ce06ac/"],["10.Redis/106.过期删除.md","过期删除","/pages/83dde6/"],["10.Redis/109.持久化.md","持久化","/pages/55dced/"],["10.Redis/112.缓存雪崩|击穿|穿透.md","缓存雪崩|击穿|穿透","/pages/64119e/"],["10.Redis/115.集群.md","集群","/pages/aa0d2f/"],["10.Redis/118.Redisson分布式锁.md","Redisson分布式锁","/pages/b2f2fe/"]]},{title:"消息中间件",collapsable:!0,children:[["15.消息中间件/153.理论概念.md","理论概念","/pages/8f7c47/"],["15.消息中间件/156.Kafka.md","Kafka","/pages/9eb6ed/"],["15.消息中间件/159.RabbitMQ.md","RabbitMQ","/pages/c1ac33/"]]},{title:"持久化",collapsable:!0,children:[["20.持久化/203.数据库设计三大范式.md","数据库设计三大范式","/pages/b7bb53/"],["20.持久化/206.执行计划Explain.md","执行计划Explain","/pages/a37446/"],["20.持久化/209.索引.md","索引","/pages/391bcd/"],["20.持久化/212.事务.md","事务","/pages/904632/"],["20.持久化/215.数据库锁.md","数据库锁","/pages/d9091c/"],["20.持久化/250.Elasticsearch.md","Elasticsearch","/pages/649d86/"]]},{title:"算法",collapsable:!0,children:[["40.算法/403.排序算法.md","排序算法","/pages/86f5d7/"],["40.算法/406.场景题.md","场景题","/pages/4245a9/"]]},{title:"网络",collapsable:!0,children:[["50.网络/503.网络模型.md","网络模型","/pages/86a1eb/"],["50.网络/506.HTTPS.md","HTTPS","/pages/dcc15b/"],["50.网络/509.TCP交互.md","TCP交互","/pages/73d39c/"],["50.网络/512.代理.md","代理","/pages/97f034/"]]},{title:"系统架构",collapsable:!0,children:[["60.系统架构/02.架构设计.md","架构设计","/pages/427643/"],["60.系统架构/603.分布式.md","分布式","/pages/c0fe60/"],["60.系统架构/606.机器评估.md","机器评估","/pages/68d51a/"]]}],catalogue:{},"/02.技术应用/":[{title:"工作杂货",collapsable:!0,children:[["01.工作杂货/01.Jprofiler排查.md","Jprofiler排查","/pages/f811c1/"],["01.工作杂货/02.ES查询压测.md","ES查询压测","/pages/6e6e98/"],["01.工作杂货/03.阿尔萨斯(Arthas).md","阿尔萨斯(Arthas)","/pages/41333d/"],["01.工作杂货/07.定时任务.md","定时任务","/pages/67b177/"],["01.工作杂货/09.DruidDataSource配置.md","DruidDataSource配置","/pages/165fe3/"],["01.工作杂货/11.Spring Cloud Stream.md","Spring Cloud Stream","/pages/c3ec16/"],["01.工作杂货/13.线上Tomcat配置参考.md","线上Tomcat配置参考","/pages/a2ebd4/"],["01.工作杂货/30.Java代码杂记.md","Java代码杂记","/pages/b3856c/"],["01.工作杂货/33.SQL脚本杂记.md","SQL脚本杂记","/pages/94c02c/"],["01.工作杂货/50.批量算费本地工具类.md","批量算费本地工具类","/pages/1cacdd/"],["01.工作杂货/53.Apollo配置模糊查询.md","Apollo配置模糊查询","/pages/87ba0f/"],["01.工作杂货/70.开发问题记录.md","开发问题记录","/pages/8fe4ca/"],["01.工作杂货/99.机器配置参考.md","机器配置参考","/pages/4a8a37/"]]},{title:"技巧备忘",collapsable:!0,children:[["03.技巧备忘/00.IntelliJ IDEA.md","IntelliJ IDEA","/pages/43b3b2/"],["03.技巧备忘/06.Git其他仓库分支合并.md","Git其他仓库分支合并","/pages/82c18a/"],["03.技巧备忘/09.Mac新建软连接.md","Mac新建软连接","/pages/f739c1/"],["03.技巧备忘/12.Nginx安装.md","Nginx安装","/pages/31c6f3/"],["03.技巧备忘/15.SSH连接Github仓库.md","SSH连接Github仓库","/pages/b6ebf4/"],["03.技巧备忘/60.博客构建.md","博客构建","/pages/685cf3/"]]},{title:"手册教程",collapsable:!0,children:[["07.手册教程/00.常用Git命令清单.md","常用Git命令清单","/pages/8292d8/"],["07.手册教程/02.Yaml语言教程.md","yaml语言教程","/pages/4e8444e2d534d14f"],["07.手册教程/04.Jenkins教程.md","Jenkins教程","/pages/035670/"]]}],"/03.流程规范/":[{title:"工作协同",collapsable:!0,children:[["01.工作协同/03.代码版本管理.md","代码版本管理","/pages/bcce0d/"],["01.工作协同/06.工作流程.md","工作流程","/pages/aaac48/"],["01.工作协同/09.发版流程.md","发版流程","/pages/35e7ea/"]]}],"/04.更多/":[["99.更多.md","更多","/friends"]]},author:{name:"luoxiaofeng",link:"https://github.com/954118124"},blogger:{avatar:"/img/lxf.jpeg",name:"Louis"},extendFrontmatter:{author:{name:"luoxiaofeng",link:"https://github.com/954118124"}},htmlModules:{homeSidebarB:""}},locales:{"/":{lang:"zh-CN",title:"Louis's Blog",description:"专注后端技术",path:"/"}}},ll=(t(88),t(142),t(84),t(227)),cl=t(228),ul=(t(393),t(243),t(43));var dl={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,a=e.home;return!(t||!1===r||!0===a)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(ul.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(ul.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(ul.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,a){var i=n[r].frontmatter,o=i.categories,s=i.tags;"array"===Object(ul.n)(o)&&o.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(ul.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},a=0,i=n.length;a<i;a++)r(a);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var a in n.tags)t.push({key:a,length:n.tags[a].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Oa.component(ll.default),Oa.component(cl.default);function pl(n){return n.toString().padStart(2,"0")}t(397);Oa.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,572))})),Oa.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,227))})),Oa.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,228))}));t(398),t(219);var hl={name:"Ribbon",data:function(){return{canvas:null,ctx:null,angle:0,resizeTimeout:null,visible:!1,config:{size:90,opacity:.3,zIndex:-1}}},mounted:function(){},methods:{draw:function(n){var e=this.ctx,t=this.config.size,r=n[0],a=n[1],i={x:a.x+this.rand(-.25,1.75)*t,y:this.nextY(a.y)};e.beginPath(),e.moveTo(r.x,r.y),e.lineTo(a.x,a.y),e.lineTo(i.x,i.y),e.closePath(),e.fillStyle=this.nextColor(),e.fill(),n[0]=a,n[1]=i},getCanvas:function(){var n=document.getElementById("Ribbon");return n.width=window.innerWidth,n.height=window.innerHeight,this.setStyle(n),n},redraw:function(){var n=this.canvas.width,e=this.canvas.height,t=this.config.size,r=[{x:0,y:.7*e+t},{x:0,y:.7*e-t}];for(this.ctx.clearRect(0,0,n,e);r[1].x<n+t;)this.draw(r)},nextY:function(n){this.canvas.width;var e=this.canvas.height,t=this.config.size,r=n+this.rand(-1.1,.9)*t;return r>e||r<0?this.nextY(n):r},setStyle:function(n){var e=n.style;e.opacity=this.config.opacity,e.position="fixed",e.top=0,e.left=0,e.zIndex=this.config.zIndex,e.width=n.width,e.height=n.height,e.pointerEvents="none"},rand:function(n,e){return Math.random()*(e-n)+n},nextColor:function(){var n=2*Math.PI;return this.angle+=.02*n,this.angle%=n,"#"+(127*Math.cos(this.angle)+128<<16|127*Math.cos(this.angle+n/3)+128<<8|127*Math.cos(this.angle+n/3*2)+128).toString(16).padStart(6,"0")},isMobile:function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)},handleResize:function(){var n=this;null!=this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout((function(){n.canvas.width=window.innerWidth,n.canvas.height=window.innerHeight,n.redraw()}),500)}}},fl=Object(al.a)(hl,(function(){var n=this.$createElement,e=this._self._c||n;return this.visible?e("canvas",{attrs:{id:"Ribbon"}}):this._e()}),[],!1,null,null,null).exports,ml={name:"RibbonAnimation",data:function(){return{RIBBON_OPTION:{colorSaturation:"80%",colorBrightness:"60%",colorAlpha:.65,colorCycleSpeed:6,verticalPosition:"center",horizontalSpeed:200,ribbonCount:5,strokeSize:0,parallaxAmount:0,animateSections:!0},visible:!0}},mounted:function(){new(t(400).default)(this.RIBBON_OPTION)}},gl=Object(al.a)(ml,(function(){var n=this.$createElement,e=this._self._c||n;return this.visible?e("div",{staticClass:"RibbonAnimation"}):this._e()}),[],!1,null,null,null).exports,vl=[function(n){n.Vue,n.options,n.router,n.siteData},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,a=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(pl(n.getUTCMonth()+1),"-").concat(pl(n.getUTCDate())," ").concat(pl(n.getUTCHours()),":").concat(pl(n.getUTCMinutes()),":").concat(pl(n.getUTCSeconds()))}(r)),a?n.author=a:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(dl)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.router;"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},function(n){var e=n.router;"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?503f098e7e5b3a5b5d8c5fc2938af002";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),e.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))},function(n){var e=n.Vue;e.component(fl.name,fl),e.component(gl.name,gl)}],bl=["Ribbon","RibbonAnimation"];t(86),t(99);t(220);function yl(n,e){return(yl=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(221),t(222);function xl(n){return(xl=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function _l(n,e){if(e&&("object"===Object(To.a)(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function kl(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=xl(n);if(e){var a=xl(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return _l(this,t)}}var wl=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&yl(n,e)}(t,n);var e=kl(t);function t(){return cs(this,t),e.apply(this,arguments)}return ds(t)}(function(){function n(){cs(this,n),this.store=new Oa({data:{state:{}}})}return ds(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Oa.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(wl.prototype,{getPageAsyncComponent:Uo,getLayoutAsyncComponent:Fo,getAsyncComponent:Go,getVueComponent:Vo});var El={install:function(n){var e=new wl;n.$vuepress=e,n.prototype.$vuepress=e}};function Al(n){n.beforeEach((function(e,t,r){if(Tl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var a=e.path.replace(/\/$/,"")+".html";Tl(n,a)?r(a):r()}else r();else{var i=e.path+"/",o=e.path+".html";Tl(n,o)?r(o):Tl(n,i)?r(i):r()}}))}function Tl(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Sl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Jo("pageKey",e),Oa.component(e)||Oa.component(e,Uo(e)),Oa.component(e)?n(e):n("")}},Cl={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},jl={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Il=(t(402),t(403),Object(al.a)(jl,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function zl(){return(zl=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:sl.routerBase||sl.base,Al(r=new Eo({base:t,mode:"history",fallback:!1,routes:ol,scrollBehavior:function(n,e,t){return t||(n.hash?!Oa.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(vl.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Oa,options:a,router:r,siteData:sl,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new Oa(Object.assign(a,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},bl.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Oa.config.productionTip=!1,Oa.use(Eo),Oa.use(El),Oa.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Oa;Ao(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),a=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),o={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),o),{computed:o}}((function(n){return function(){function e(){cs(this,e)}return ds(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var a in r)"/"===a?e=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),sl)),Oa.component("Content",Sl),Oa.component("ContentSlotsDistributor",Cl),Oa.component("OutboundLink",Il),Oa.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Oa.component("Layout",Fo("Layout")),Oa.component("NotFound",Fo("NotFound")),Oa.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"51cdb01"},function(n){return zl.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);