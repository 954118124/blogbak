(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{516:function(a,t,s){"use strict";s.r(t);var e=s(18),i=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-mybatis常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mybatis常见问题"}},[a._v("#")]),a._v(" 1 Mybatis常见问题")]),a._v(" "),s("h3",{attrs:{id:"_1-1-mybatis是如何进行分页的-分页插件的原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mybatis是如何进行分页的-分页插件的原理是什么"}},[a._v("#")]),a._v(" 1.1 Mybatis是如何进行分页的？分页插件的原理是什么？")]),a._v(" "),s("p",[a._v("1.Mybatis使用RowBounds对象进行分页，它是针对结果集进行的内存分页。")]),a._v(" "),s("p",[a._v("2.分页插件的原理是使用"),s("strong",[a._v("Mybatis提供的插件接口")]),a._v("，实现自定义插件，可以在插件的拦截方法内拦截待执行的sql，然后重写sql来完成物理分页。")]),a._v(" "),s("h3",{attrs:{id:"_1-2-mybatis有哪些动态sql标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-mybatis有哪些动态sql标签"}},[a._v("#")]),a._v(" 1.2 Mybatis有哪些动态sql标签？")]),a._v(" "),s("p",[a._v("Mybatis提供了9种动态sql标签：trim、where、set、foreach、if、choose、when、otherwise、bind")]),a._v(" "),s("h3",{attrs:{id:"_1-3-mybatis-xml映射文件中有哪些常见标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-mybatis-xml映射文件中有哪些常见标签"}},[a._v("#")]),a._v(" 1.3 Mybatis Xml映射文件中有哪些常见标签？")]),a._v(" "),s("p",[a._v("select、insert、update、delete、resultMap、parameterMap、sql、include，加上动态sql9个标签，其中<sql>为sql片段标签，通过<include>标签引入sql片段。")]),a._v(" "),s("h3",{attrs:{id:"_1-4-mybatis的一级、二级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-mybatis的一级、二级缓存"}},[a._v("#")]),a._v(" 1.4 Mybatis的一级、二级缓存")]),a._v(" "),s("p",[a._v("一级缓存：Mybatis的一级缓存是利用SqlSession实现的，同样的sql，如果在同一个SqlSession执行，就会利用一级缓存，提高查询效率。")]),a._v(" "),s("p",[a._v("二级缓存：存储作用域为Mapper(Namespace)，可自定义存储源，如redis。")]),a._v(" "),s("h3",{attrs:{id:"_1-5-mybatis一对一、一对多的关联查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-mybatis一对一、一对多的关联查询"}},[a._v("#")]),a._v(" 1.5 Mybatis一对一、一对多的关联查询")]),a._v(" "),s("img",{staticClass:"imgcss",attrs:{src:"/img/media/3e9239c22cf7a5538d090c2ded54d1c2.png",width:"70%"}}),a._v(" "),s("img",{staticClass:"imgcss",attrs:{src:"/img/media/7d6cf4bee4fa0bde28cff3afa20297ae.png",width:"70%"}}),a._v(" "),s("h2",{attrs:{id:"_2-mybatis插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-mybatis插件"}},[a._v("#")]),a._v(" 2 Mybatis插件")]),a._v(" "),s("h3",{attrs:{id:"_2-1-mybatis插件的运行原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-mybatis插件的运行原理"}},[a._v("#")]),a._v(" 2.1 Mybatis插件的运行原理？")]),a._v(" "),s("p",[a._v("Mybatis使用JDK的动态代理，为指定的接口生成代理对象，实现接口方法拦截功能。Mybatis仅支持4种指定接口的插件，分别是：ParameterHandler、ResultSetHandler、StatementHandler、Executor。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-如何编写一个mybatis插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-如何编写一个mybatis插件"}},[a._v("#")]),a._v(" 2.2 如何编写一个Mybatis插件？")]),a._v(" "),s("p",[a._v("实现Mybatis的Interceptor接口并重写intercept()方法，然后给插件编写注解，指定要拦截哪一个接口的哪些方法即可。另外还需要在配置文件中配置好编写的插件。")]),a._v(" "),s("img",{staticClass:"imgcss",attrs:{src:"/img/media/02ab883a708405ec5ea8aa5df5f8df15.png",width:"70%"}}),a._v(" "),s("img",{staticClass:"imgcss",attrs:{src:"/img/media/386cbff8bacc0b57591ff347faa5f860.png",width:"70%"}})])}),[],!1,null,null,null);t.default=i.exports}}]);